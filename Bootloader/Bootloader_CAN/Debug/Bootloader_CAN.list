
Bootloader_CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001628  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001734  08001734  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001734  08001734  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  08001734  08001734  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001734  08001734  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001734  08001734  00011734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001738  08001738  00011738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  0800173c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000424  20000038  08001774  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000045c  08001774  0002045c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020061  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003549  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000112c  00000000  00000000  000235ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004c0  00000000  00000000  00024720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000350  00000000  00000000  00024be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003344  00000000  00000000  00024f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000038fc  00000000  00000000  00028274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00082e3c  00000000  00000000  0002bb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000e80  00000000  00000000  000ae9ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  000af82c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000038 	.word	0x20000038
 8000128:	00000000 	.word	0x00000000
 800012c:	0800171c 	.word	0x0800171c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000003c 	.word	0x2000003c
 8000148:	0800171c 	.word	0x0800171c

0800014c <BL_voidSpecify_Bank>:
*******************************************************************************/
/**
 * This function is used to check the bank flags and decide run bootloader or jump into applicatiopn
 */
void BL_voidSpecify_Bank()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	/* Reading the status address of Specifying flag */
	u32 Specifying_Flag = FLS_u32ReadWord(BL_SPECIFYING_BANK_FLAG);
 8000152:	480a      	ldr	r0, [pc, #40]	; (800017c <BL_voidSpecify_Bank+0x30>)
 8000154:	f000 ff9b 	bl	800108e <FLS_u32ReadWord>
 8000158:	6078      	str	r0, [r7, #4]

	if(Specifying_Flag == RESET_SPECIFYING_FLAG)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000160:	d102      	bne.n	8000168 <BL_voidSpecify_Bank+0x1c>
	{
		/* if yes go check bank1 status and crc ......... */
		BL_Check_Active_Bank();
 8000162:	f000 f80d 	bl	8000180 <BL_Check_Active_Bank>
	else
	{
		/* NOTHING */
	}

}
 8000166:	e004      	b.n	8000172 <BL_voidSpecify_Bank+0x26>
	else if(Specifying_Flag == SET_SPECIFYING_FLAG)
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2b00      	cmp	r3, #0
 800016c:	d101      	bne.n	8000172 <BL_voidSpecify_Bank+0x26>
		BL_void_Jump_To_Bootloader();
 800016e:	f000 f913 	bl	8000398 <BL_void_Jump_To_Bootloader>
}
 8000172:	bf00      	nop
 8000174:	3708      	adds	r7, #8
 8000176:	46bd      	mov	sp, r7
 8000178:	bd80      	pop	{r7, pc}
 800017a:	bf00      	nop
 800017c:	0800fc00 	.word	0x0800fc00

08000180 <BL_Check_Active_Bank>:

/**
 * This function is used to specify which bank will be excuted
 */
void BL_Check_Active_Bank()
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b084      	sub	sp, #16
 8000184:	af00      	add	r7, sp, #0
	/* Intialize Banks Status and read every flag first */
	u32 Bank1_Status = FLS_u32ReadWord(BANK1_STATUS_ADDRESS);
 8000186:	4821      	ldr	r0, [pc, #132]	; (800020c <BL_Check_Active_Bank+0x8c>)
 8000188:	f000 ff81 	bl	800108e <FLS_u32ReadWord>
 800018c:	60f8      	str	r0, [r7, #12]
	u32 Bank1_CRC    = FLS_u32ReadWord(BANK1_CRC_ADDRESS);
 800018e:	4820      	ldr	r0, [pc, #128]	; (8000210 <BL_Check_Active_Bank+0x90>)
 8000190:	f000 ff7d 	bl	800108e <FLS_u32ReadWord>
 8000194:	60b8      	str	r0, [r7, #8]
	u32 Bank2_Status = BOOTLOADER_INIT_NOT_APPROPRIATE;
 8000196:	f06f 030c 	mvn.w	r3, #12
 800019a:	607b      	str	r3, [r7, #4]


	if(BOOTLOADER_APP_IS_IN_BANK1 == Bank1_Status)
 800019c:	68fb      	ldr	r3, [r7, #12]
 800019e:	f113 0f0f 	cmn.w	r3, #15
 80001a2:	d111      	bne.n	80001c8 <BL_Check_Active_Bank+0x48>
	{
		/* Make sure that the value of the saved crc is the same calcuted new crc */
		u32 Bank1_New_CRC = BL_u32Calculate_CRC_Bank1();
 80001a4:	f000 f912 	bl	80003cc <BL_u32Calculate_CRC_Bank1>
 80001a8:	6038      	str	r0, [r7, #0]
		if(Bank1_New_CRC == Bank1_CRC)
 80001aa:	683a      	ldr	r2, [r7, #0]
 80001ac:	68bb      	ldr	r3, [r7, #8]
 80001ae:	429a      	cmp	r2, r3
 80001b0:	d102      	bne.n	80001b8 <BL_Check_Active_Bank+0x38>
		{
			/* If yes then jump to application*/
			BL_voidJump_To_Bank();
 80001b2:	f000 f8f9 	bl	80003a8 <BL_voidJump_To_Bank>
		/* NOTHING */
	}



}
 80001b6:	e025      	b.n	8000204 <BL_Check_Active_Bank+0x84>
			NVM_voidUpdateControlPage(BANK1_STATUS_ADDRESS, BOOTLOADER_BANK_NOT_APPROPRIATE);
 80001b8:	f06f 010b 	mvn.w	r1, #11
 80001bc:	4813      	ldr	r0, [pc, #76]	; (800020c <BL_Check_Active_Bank+0x8c>)
 80001be:	f001 f8eb 	bl	8001398 <NVM_voidUpdateControlPage>
			WWDT_voidMakeSoftWareReset();
 80001c2:	f001 f9e5 	bl	8001590 <WWDT_voidMakeSoftWareReset>
}
 80001c6:	e01d      	b.n	8000204 <BL_Check_Active_Bank+0x84>
	else if((BOOTLOADER_BANK_NOT_APPROPRIATE == Bank1_Status) || (0xFFFFFFFF == Bank1_Status))
 80001c8:	68fb      	ldr	r3, [r7, #12]
 80001ca:	f113 0f0c 	cmn.w	r3, #12
 80001ce:	d003      	beq.n	80001d8 <BL_Check_Active_Bank+0x58>
 80001d0:	68fb      	ldr	r3, [r7, #12]
 80001d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80001d6:	d115      	bne.n	8000204 <BL_Check_Active_Bank+0x84>
		Bank2_Status = BL_u32Check_Bank2();
 80001d8:	f000 f81c 	bl	8000214 <BL_u32Check_Bank2>
 80001dc:	6078      	str	r0, [r7, #4]
		if(Bank2_Status == BOOTLOADER_BANK_APPROPRIATE)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	f113 0f0e 	cmn.w	r3, #14
 80001e4:	d104      	bne.n	80001f0 <BL_Check_Active_Bank+0x70>
			BL_voidCopy_Bank2_To_Bank1();
 80001e6:	f000 f929 	bl	800043c <BL_voidCopy_Bank2_To_Bank1>
			BL_voidJump_To_Bank();
 80001ea:	f000 f8dd 	bl	80003a8 <BL_voidJump_To_Bank>
}
 80001ee:	e009      	b.n	8000204 <BL_Check_Active_Bank+0x84>
		else if((Bank2_Status == BOOTLOADER_BANK_NOT_APPROPRIATE) || (Bank2_Status == 0xFFFFFFFF))
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	f113 0f0c 	cmn.w	r3, #12
 80001f6:	d003      	beq.n	8000200 <BL_Check_Active_Bank+0x80>
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80001fe:	d101      	bne.n	8000204 <BL_Check_Active_Bank+0x84>
			BL_voidSet_Specifying_Flag_Make_SW_Reset();
 8000200:	f000 f9ce 	bl	80005a0 <BL_voidSet_Specifying_Flag_Make_SW_Reset>
}
 8000204:	bf00      	nop
 8000206:	3710      	adds	r7, #16
 8000208:	46bd      	mov	sp, r7
 800020a:	bd80      	pop	{r7, pc}
 800020c:	0800fc14 	.word	0x0800fc14
 8000210:	0800fc1c 	.word	0x0800fc1c

08000214 <BL_u32Check_Bank2>:
/**
 * This function is used to check bank 2 application appropriate or not
 * @return u32
 */
u32 BL_u32Check_Bank2()
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af00      	add	r7, sp, #0
	u32 Bank2_Status = FLS_u32ReadWord(BANK2_STATUS_ADDRESS);
 800021a:	4813      	ldr	r0, [pc, #76]	; (8000268 <BL_u32Check_Bank2+0x54>)
 800021c:	f000 ff37 	bl	800108e <FLS_u32ReadWord>
 8000220:	60b8      	str	r0, [r7, #8]
	u32 Bank2_CRC    = FLS_u32ReadWord(BANK2_CRC_ADDRESS);
 8000222:	4812      	ldr	r0, [pc, #72]	; (800026c <BL_u32Check_Bank2+0x58>)
 8000224:	f000 ff33 	bl	800108e <FLS_u32ReadWord>
 8000228:	6078      	str	r0, [r7, #4]
	u32 result = 0;
 800022a:	2300      	movs	r3, #0
 800022c:	60fb      	str	r3, [r7, #12]
	if(Bank2_Status == BOOTLOADER_BACKUP_IS_IN_BANK2)
 800022e:	68bb      	ldr	r3, [r7, #8]
 8000230:	f113 0f0d 	cmn.w	r3, #13
 8000234:	d112      	bne.n	800025c <BL_u32Check_Bank2+0x48>
	{
		u32 Bank2_New_CRC = BL_u32Calculate_CRC_Bank2();
 8000236:	f000 f8e5 	bl	8000404 <BL_u32Calculate_CRC_Bank2>
 800023a:	6038      	str	r0, [r7, #0]
		if(Bank2_New_CRC == Bank2_CRC)
 800023c:	683a      	ldr	r2, [r7, #0]
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	429a      	cmp	r2, r3
 8000242:	d103      	bne.n	800024c <BL_u32Check_Bank2+0x38>
		{
			result = BOOTLOADER_BANK_APPROPRIATE;
 8000244:	f06f 030d 	mvn.w	r3, #13
 8000248:	60fb      	str	r3, [r7, #12]
 800024a:	e007      	b.n	800025c <BL_u32Check_Bank2+0x48>
		}
		else
		{
			/* if it's not the same CRC value then we will update the flag and return not appropeiate */
			NVM_voidUpdateControlPage(BANK2_STATUS_ADDRESS, BOOTLOADER_BANK_NOT_APPROPRIATE);
 800024c:	f06f 010b 	mvn.w	r1, #11
 8000250:	4805      	ldr	r0, [pc, #20]	; (8000268 <BL_u32Check_Bank2+0x54>)
 8000252:	f001 f8a1 	bl	8001398 <NVM_voidUpdateControlPage>
			result =  BOOTLOADER_BANK_NOT_APPROPRIATE;
 8000256:	f06f 030b 	mvn.w	r3, #11
 800025a:	60fb      	str	r3, [r7, #12]
		}
	}
	return result;
 800025c:	68fb      	ldr	r3, [r7, #12]
}
 800025e:	4618      	mov	r0, r3
 8000260:	3710      	adds	r7, #16
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	0800fc34 	.word	0x0800fc34
 800026c:	0800fc3c 	.word	0x0800fc3c

08000270 <BL_u8Check_Bank_Validity>:
/**
 * This function is used to check the validity of crc and flag of a specific bank
 * @return u8
 */
u8 BL_u8Check_Bank_Validity()
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
	u8 Result = 0;
 8000276:	2300      	movs	r3, #0
 8000278:	73fb      	strb	r3, [r7, #15]

	/* Read both status flags for both banks */
	u32 Bank1_Status = FLS_u32ReadWord(BANK1_STATUS_ADDRESS);
 800027a:	4812      	ldr	r0, [pc, #72]	; (80002c4 <BL_u8Check_Bank_Validity+0x54>)
 800027c:	f000 ff07 	bl	800108e <FLS_u32ReadWord>
 8000280:	60b8      	str	r0, [r7, #8]
	u32 Bank2_Status = FLS_u32ReadWord(BANK2_STATUS_ADDRESS);
 8000282:	4811      	ldr	r0, [pc, #68]	; (80002c8 <BL_u8Check_Bank_Validity+0x58>)
 8000284:	f000 ff03 	bl	800108e <FLS_u32ReadWord>
 8000288:	6078      	str	r0, [r7, #4]

	if((Bank1_Status == 0xFFFFFFFF) || (Bank1_Status == BOOTLOADER_BANK_NOT_APPROPRIATE))
 800028a:	68bb      	ldr	r3, [r7, #8]
 800028c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000290:	d003      	beq.n	800029a <BL_u8Check_Bank_Validity+0x2a>
 8000292:	68bb      	ldr	r3, [r7, #8]
 8000294:	f113 0f0c 	cmn.w	r3, #12
 8000298:	d10d      	bne.n	80002b6 <BL_u8Check_Bank_Validity+0x46>
	{
		if ((Bank2_Status == 0xFFFFFFFF) || (Bank2_Status == BOOTLOADER_BANK_NOT_APPROPRIATE))
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002a0:	d003      	beq.n	80002aa <BL_u8Check_Bank_Validity+0x3a>
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	f113 0f0c 	cmn.w	r3, #12
 80002a8:	d102      	bne.n	80002b0 <BL_u8Check_Bank_Validity+0x40>
		{
			Result = BOOTLOADER_APP_IS_NOT_APPROPRIATE_OR_NOT_EXISTING;
 80002aa:	2301      	movs	r3, #1
 80002ac:	73fb      	strb	r3, [r7, #15]
		if ((Bank2_Status == 0xFFFFFFFF) || (Bank2_Status == BOOTLOADER_BANK_NOT_APPROPRIATE))
 80002ae:	e004      	b.n	80002ba <BL_u8Check_Bank_Validity+0x4a>
		}
		else
		{
			Result = BOOTLOADER_APP_IS_APPROPRIATE_OR_EXISTING;
 80002b0:	2300      	movs	r3, #0
 80002b2:	73fb      	strb	r3, [r7, #15]
		if ((Bank2_Status == 0xFFFFFFFF) || (Bank2_Status == BOOTLOADER_BANK_NOT_APPROPRIATE))
 80002b4:	e001      	b.n	80002ba <BL_u8Check_Bank_Validity+0x4a>
		}
	}
	else
	{
		Result = BOOTLOADER_APP_IS_APPROPRIATE_OR_EXISTING;
 80002b6:	2300      	movs	r3, #0
 80002b8:	73fb      	strb	r3, [r7, #15]
	}
	return Result;
 80002ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80002bc:	4618      	mov	r0, r3
 80002be:	3710      	adds	r7, #16
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	0800fc14 	.word	0x0800fc14
 80002c8:	0800fc34 	.word	0x0800fc34

080002cc <BL_voidUpdate_Control_Page>:

/**
 * This function is used to Update the flags in the control paga
 */
void BL_voidUpdate_Control_Page()
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b088      	sub	sp, #32
 80002d0:	af00      	add	r7, sp, #0
	u8  Bank_Status      =  BL_u8Check_Bank_Validity();
 80002d2:	f7ff ffcd 	bl	8000270 <BL_u8Check_Bank_Validity>
 80002d6:	4603      	mov	r3, r0
 80002d8:	77fb      	strb	r3, [r7, #31]
	u32 Bank1_Status     =  FLS_u32ReadWord(BANK1_STATUS_ADDRESS);
 80002da:	482b      	ldr	r0, [pc, #172]	; (8000388 <BL_voidUpdate_Control_Page+0xbc>)
 80002dc:	f000 fed7 	bl	800108e <FLS_u32ReadWord>
 80002e0:	61b8      	str	r0, [r7, #24]
	u32 First_Request    =  0;
 80002e2:	2300      	movs	r3, #0
 80002e4:	60fb      	str	r3, [r7, #12]
	u8  Control_Flag     =  0;
 80002e6:	2300      	movs	r3, #0
 80002e8:	72fb      	strb	r3, [r7, #11]
	u32 Bank_Size        =  0;
 80002ea:	2300      	movs	r3, #0
 80002ec:	617b      	str	r3, [r7, #20]
	u32 CRC_Value        =  0;
 80002ee:	2300      	movs	r3, #0
 80002f0:	613b      	str	r3, [r7, #16]
	u8 Data[8]           = {0};
 80002f2:	2300      	movs	r3, #0
 80002f4:	603b      	str	r3, [r7, #0]
 80002f6:	2300      	movs	r3, #0
 80002f8:	607b      	str	r3, [r7, #4]



	if(Bank_Status == BOOTLOADER_APP_IS_NOT_APPROPRIATE_OR_NOT_EXISTING)
 80002fa:	7ffb      	ldrb	r3, [r7, #31]
 80002fc:	2b01      	cmp	r3, #1
 80002fe:	d107      	bne.n	8000310 <BL_voidUpdate_Control_Page+0x44>
	{
		/* First time to flash the bank */
		CanIf_voidReceive_Word(&First_Request);
 8000300:	f107 030c 	add.w	r3, r7, #12
 8000304:	4618      	mov	r0, r3
 8000306:	f000 fa1b 	bl	8000740 <CanIf_voidReceive_Word>
		First_Flash = 1;
 800030a:	4b20      	ldr	r3, [pc, #128]	; (800038c <BL_voidUpdate_Control_Page+0xc0>)
 800030c:	2201      	movs	r2, #1
 800030e:	701a      	strb	r2, [r3, #0]
	{
		/* NOTHING */
	}

	/* Send Request to the server that we need update */
	CanIf_voidTransmit_Byte(UDS_MCU_ACKNOWLEDGE_UPGRADE_REQUEST);
 8000310:	2050      	movs	r0, #80	; 0x50
 8000312:	f000 fa69 	bl	80007e8 <CanIf_voidTransmit_Byte>

	/* wait for the server to send the flag value which followed by array of 8 elemneets the first 4 is data represent the size and the last 4 are crc values */
	CanIf_voidReceive_Byte(&Control_Flag);
 8000316:	f107 030b 	add.w	r3, r7, #11
 800031a:	4618      	mov	r0, r3
 800031c:	f000 fa2c 	bl	8000778 <CanIf_voidReceive_Byte>


	if(Control_Flag == UDS_GWY_PROVIDE_HEADER)
 8000320:	7afb      	ldrb	r3, [r7, #11]
 8000322:	2b34      	cmp	r3, #52	; 0x34
 8000324:	d12b      	bne.n	800037e <BL_voidUpdate_Control_Page+0xb2>
	{
		CanIf_voidTransmit_Byte(UDS_MCU_ACCEPT_RECEIVING_HEADER);
 8000326:	2073      	movs	r0, #115	; 0x73
 8000328:	f000 fa5e 	bl	80007e8 <CanIf_voidTransmit_Byte>
		CanIf_voidReceive_Block(Data, 8);
 800032c:	463b      	mov	r3, r7
 800032e:	2108      	movs	r1, #8
 8000330:	4618      	mov	r0, r3
 8000332:	f000 fa3f 	bl	80007b4 <CanIf_voidReceive_Block>

		/* Here we received the array which contain the size and the crc values from the host or the server and we gonna parse this array to extarct the values */
		Bank_Size = ((Data[3] << 24) | (Data[2] << 16) | (Data[1] << 8) | (Data[0]));
 8000336:	78fb      	ldrb	r3, [r7, #3]
 8000338:	061a      	lsls	r2, r3, #24
 800033a:	78bb      	ldrb	r3, [r7, #2]
 800033c:	041b      	lsls	r3, r3, #16
 800033e:	431a      	orrs	r2, r3
 8000340:	787b      	ldrb	r3, [r7, #1]
 8000342:	021b      	lsls	r3, r3, #8
 8000344:	4313      	orrs	r3, r2
 8000346:	783a      	ldrb	r2, [r7, #0]
 8000348:	4313      	orrs	r3, r2
 800034a:	617b      	str	r3, [r7, #20]

		CRC_Value = ((Data[7] << 24) | (Data[6] << 16) | (Data[5] << 8) | (Data[4]));
 800034c:	79fb      	ldrb	r3, [r7, #7]
 800034e:	061a      	lsls	r2, r3, #24
 8000350:	79bb      	ldrb	r3, [r7, #6]
 8000352:	041b      	lsls	r3, r3, #16
 8000354:	431a      	orrs	r2, r3
 8000356:	797b      	ldrb	r3, [r7, #5]
 8000358:	021b      	lsls	r3, r3, #8
 800035a:	4313      	orrs	r3, r2
 800035c:	793a      	ldrb	r2, [r7, #4]
 800035e:	4313      	orrs	r3, r2
 8000360:	613b      	str	r3, [r7, #16]

		/* After Updateing the size of the bank and the new CRC values we will make bank 2 as a backup of bank 1 */
		if(Bank1_Status == BOOTLOADER_APP_IS_IN_BANK1)
 8000362:	69bb      	ldr	r3, [r7, #24]
 8000364:	f113 0f0f 	cmn.w	r3, #15
 8000368:	d101      	bne.n	800036e <BL_voidUpdate_Control_Page+0xa2>
		{
			BL_voidCopy_Bank1_To_Bank2();
 800036a:	f000 f8c1 	bl	80004f0 <BL_voidCopy_Bank1_To_Bank2>
		}

		NVM_voidUpdateControlPage(BANK1_SIZE_ADDRESS, Bank_Size);
 800036e:	6979      	ldr	r1, [r7, #20]
 8000370:	4807      	ldr	r0, [pc, #28]	; (8000390 <BL_voidUpdate_Control_Page+0xc4>)
 8000372:	f001 f811 	bl	8001398 <NVM_voidUpdateControlPage>
		NVM_voidUpdateControlPage(BANK1_CRC_ADDRESS, CRC_Value);
 8000376:	6939      	ldr	r1, [r7, #16]
 8000378:	4806      	ldr	r0, [pc, #24]	; (8000394 <BL_voidUpdate_Control_Page+0xc8>)
 800037a:	f001 f80d 	bl	8001398 <NVM_voidUpdateControlPage>
	}

}
 800037e:	bf00      	nop
 8000380:	3720      	adds	r7, #32
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	0800fc14 	.word	0x0800fc14
 800038c:	20000000 	.word	0x20000000
 8000390:	0800fc18 	.word	0x0800fc18
 8000394:	0800fc1c 	.word	0x0800fc1c

08000398 <BL_void_Jump_To_Bootloader>:

/**
 * This function is used to make the processor jump to the bootloader appliaction
 */
void BL_void_Jump_To_Bootloader()
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
	BL_voidUpdate_Control_Page();
 800039c:	f7ff ff96 	bl	80002cc <BL_voidUpdate_Control_Page>
	BL_voidRecieve_APP();
 80003a0:	f000 f90a 	bl	80005b8 <BL_voidRecieve_APP>
}
 80003a4:	bf00      	nop
 80003a6:	bd80      	pop	{r7, pc}

080003a8 <BL_voidJump_To_Bank>:

/**
 * This function is used to make the processir jump to specific bank
 */
void BL_voidJump_To_Bank()
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
	Function_t Address = 0;
 80003ae:	2300      	movs	r3, #0
 80003b0:	607b      	str	r3, [r7, #4]
	/* Assigning tha bank 1 address */
	Address = *(Function_t *)(ADDRESS_OF_BANK1);
 80003b2:	4b05      	ldr	r3, [pc, #20]	; (80003c8 <BL_voidJump_To_Bank+0x20>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	607b      	str	r3, [r7, #4]

	/* Make the vector table offset */
	BL_voidVector_Table_Offset();
 80003b8:	f000 f96a 	bl	8000690 <BL_voidVector_Table_Offset>

	/* Jump to bank 1 address */
	Address();
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	4798      	blx	r3



}
 80003c0:	bf00      	nop
 80003c2:	3708      	adds	r7, #8
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	08001404 	.word	0x08001404

080003cc <BL_u32Calculate_CRC_Bank1>:
/**
 * This function is used to calculate the crc value for bank1
 * @return u32
 */
u32 BL_u32Calculate_CRC_Bank1()
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b084      	sub	sp, #16
 80003d0:	af00      	add	r7, sp, #0
	u32 CRC_Value = 0;
 80003d2:	2300      	movs	r3, #0
 80003d4:	607b      	str	r3, [r7, #4]

	/* Reading the bank size   */
	u32 Size_Bank = FLS_u32ReadWord(BANK1_SIZE_ADDRESS);
 80003d6:	4809      	ldr	r0, [pc, #36]	; (80003fc <BL_u32Calculate_CRC_Bank1+0x30>)
 80003d8:	f000 fe59 	bl	800108e <FLS_u32ReadWord>
 80003dc:	60f8      	str	r0, [r7, #12]

	u32 NO_Words = Size_Bank / 4;
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	089b      	lsrs	r3, r3, #2
 80003e2:	60bb      	str	r3, [r7, #8]

	/* CAlculate CRC */
	MCRC_voidCalculateCrcDirect(ADDRESS_OF_STARTUP_BANK1, NO_Words, &CRC_Value);
 80003e4:	1d3b      	adds	r3, r7, #4
 80003e6:	461a      	mov	r2, r3
 80003e8:	68b9      	ldr	r1, [r7, #8]
 80003ea:	4805      	ldr	r0, [pc, #20]	; (8000400 <BL_u32Calculate_CRC_Bank1+0x34>)
 80003ec:	f000 fd4c 	bl	8000e88 <MCRC_voidCalculateCrcDirect>

	return CRC_Value;
 80003f0:	687b      	ldr	r3, [r7, #4]

}
 80003f2:	4618      	mov	r0, r3
 80003f4:	3710      	adds	r7, #16
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	0800fc18 	.word	0x0800fc18
 8000400:	08001400 	.word	0x08001400

08000404 <BL_u32Calculate_CRC_Bank2>:
/**
 * This function is used to calculate the crc value for bank2
 * @return u32
 */
u32 BL_u32Calculate_CRC_Bank2()
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b084      	sub	sp, #16
 8000408:	af00      	add	r7, sp, #0
	u32 CRC_Value = 0;
 800040a:	2300      	movs	r3, #0
 800040c:	607b      	str	r3, [r7, #4]

	/* Reading the bank size   */
	u32 Size_Bank = FLS_u32ReadWord(BANK2_SIZE_ADDRESS);
 800040e:	4809      	ldr	r0, [pc, #36]	; (8000434 <BL_u32Calculate_CRC_Bank2+0x30>)
 8000410:	f000 fe3d 	bl	800108e <FLS_u32ReadWord>
 8000414:	60f8      	str	r0, [r7, #12]

	u32 NO_Words = Size_Bank / 4;
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	089b      	lsrs	r3, r3, #2
 800041a:	60bb      	str	r3, [r7, #8]

	/* CAlculate CRC */
	MCRC_voidCalculateCrcDirect(ADDRESS_OF_STARTUP_BANK2, NO_Words, &CRC_Value);
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	461a      	mov	r2, r3
 8000420:	68b9      	ldr	r1, [r7, #8]
 8000422:	4805      	ldr	r0, [pc, #20]	; (8000438 <BL_u32Calculate_CRC_Bank2+0x34>)
 8000424:	f000 fd30 	bl	8000e88 <MCRC_voidCalculateCrcDirect>

	return CRC_Value;
 8000428:	687b      	ldr	r3, [r7, #4]
}
 800042a:	4618      	mov	r0, r3
 800042c:	3710      	adds	r7, #16
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	0800fc38 	.word	0x0800fc38
 8000438:	08008800 	.word	0x08008800

0800043c <BL_voidCopy_Bank2_To_Bank1>:
 *
 * This function is used to Move bank2 to bank1
 *
 */
void BL_voidCopy_Bank2_To_Bank1()
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b088      	sub	sp, #32
 8000440:	af00      	add	r7, sp, #0
	u32 Bank2_Data    		  = 0;
 8000442:	2300      	movs	r3, #0
 8000444:	61bb      	str	r3, [r7, #24]
	u32 Bank2_Address 		  = 0;
 8000446:	2300      	movs	r3, #0
 8000448:	617b      	str	r3, [r7, #20]
	u32 Bank1_Data_Address    = 0;
 800044a:	2300      	movs	r3, #0
 800044c:	613b      	str	r3, [r7, #16]

	/* Reading THe size of bank 2 */
	u32 Bank2_Size = FLS_u32ReadWord(BANK2_SIZE_ADDRESS);
 800044e:	4822      	ldr	r0, [pc, #136]	; (80004d8 <BL_voidCopy_Bank2_To_Bank1+0x9c>)
 8000450:	f000 fe1d 	bl	800108e <FLS_u32ReadWord>
 8000454:	60f8      	str	r0, [r7, #12]

	u32 Bank2_Size_Word = Bank2_Size / 4;
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	089b      	lsrs	r3, r3, #2
 800045a:	60bb      	str	r3, [r7, #8]

	/* Calcutling CRC value for bank 2 */
	u32 Bank2_CRC = FLS_u32ReadWord(BANK2_CRC_ADDRESS);
 800045c:	481f      	ldr	r0, [pc, #124]	; (80004dc <BL_voidCopy_Bank2_To_Bank1+0xa0>)
 800045e:	f000 fe16 	bl	800108e <FLS_u32ReadWord>
 8000462:	6078      	str	r0, [r7, #4]

	/* Erase Bank 1  */
	FLS_voidEraseAppArea(NUMBER_OF_FIRST_PAGE_IN_BANK1, NUMBER_OF_LAST_PAGE_IN_BANK1);
 8000464:	2121      	movs	r1, #33	; 0x21
 8000466:	2007      	movs	r0, #7
 8000468:	f000 fdf6 	bl	8001058 <FLS_voidEraseAppArea>

	/* Copying the app in bank 2 to bank 1 */
	for(u32 Counter = 0; Counter < Bank2_Size_Word; Counter++)
 800046c:	2300      	movs	r3, #0
 800046e:	61fb      	str	r3, [r7, #28]
 8000470:	e017      	b.n	80004a2 <BL_voidCopy_Bank2_To_Bank1+0x66>
	{
		/* Looping over bank 1 addresses  */
		Bank1_Data_Address = (ADDRESS_OF_STARTUP_BANK1 + (WORD_SIZE * Counter));
 8000472:	69fb      	ldr	r3, [r7, #28]
 8000474:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8000478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800047c:	009b      	lsls	r3, r3, #2
 800047e:	613b      	str	r3, [r7, #16]

		/* Looping over bank 2 addreses */

		Bank2_Address      = (ADDRESS_OF_STARTUP_BANK2 + (WORD_SIZE * Counter));
 8000480:	69fb      	ldr	r3, [r7, #28]
 8000482:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8000486:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 800048a:	009b      	lsls	r3, r3, #2
 800048c:	617b      	str	r3, [r7, #20]

		/* Referncing the addresses into the data */
		Bank2_Data = *((volatile u32 *) Bank2_Address);
 800048e:	697b      	ldr	r3, [r7, #20]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	61bb      	str	r3, [r7, #24]


		/* Looping over the whole bank addresses to flash it */
		FLS_u8ProgramOneWordFlash(Bank1_Data_Address, Bank2_Data);
 8000494:	69b9      	ldr	r1, [r7, #24]
 8000496:	6938      	ldr	r0, [r7, #16]
 8000498:	f000 fd66 	bl	8000f68 <FLS_u8ProgramOneWordFlash>
	for(u32 Counter = 0; Counter < Bank2_Size_Word; Counter++)
 800049c:	69fb      	ldr	r3, [r7, #28]
 800049e:	3301      	adds	r3, #1
 80004a0:	61fb      	str	r3, [r7, #28]
 80004a2:	69fa      	ldr	r2, [r7, #28]
 80004a4:	68bb      	ldr	r3, [r7, #8]
 80004a6:	429a      	cmp	r2, r3
 80004a8:	d3e3      	bcc.n	8000472 <BL_voidCopy_Bank2_To_Bank1+0x36>

	}

	/* Updating the control page with the new falsg values  */
	/* Updating bank 1 size */
	NVM_voidUpdateControlPage(BANK1_SIZE_ADDRESS, Bank2_Size);
 80004aa:	68f9      	ldr	r1, [r7, #12]
 80004ac:	480c      	ldr	r0, [pc, #48]	; (80004e0 <BL_voidCopy_Bank2_To_Bank1+0xa4>)
 80004ae:	f000 ff73 	bl	8001398 <NVM_voidUpdateControlPage>

	/* Updating CRC value */
	NVM_voidUpdateControlPage(BANK1_CRC_ADDRESS, Bank2_CRC);
 80004b2:	6879      	ldr	r1, [r7, #4]
 80004b4:	480b      	ldr	r0, [pc, #44]	; (80004e4 <BL_voidCopy_Bank2_To_Bank1+0xa8>)
 80004b6:	f000 ff6f 	bl	8001398 <NVM_voidUpdateControlPage>

	/* Making the bank 1 active */
	NVM_voidUpdateControlPage(BANK1_STATUS_ADDRESS, BOOTLOADER_APP_IS_IN_BANK1);
 80004ba:	f06f 010e 	mvn.w	r1, #14
 80004be:	480a      	ldr	r0, [pc, #40]	; (80004e8 <BL_voidCopy_Bank2_To_Bank1+0xac>)
 80004c0:	f000 ff6a 	bl	8001398 <NVM_voidUpdateControlPage>


	/* making bank 2 back up */
	NVM_voidUpdateControlPage(BANK2_STATUS_ADDRESS, BOOTLOADER_BACKUP_IS_IN_BANK2);
 80004c4:	f06f 010c 	mvn.w	r1, #12
 80004c8:	4808      	ldr	r0, [pc, #32]	; (80004ec <BL_voidCopy_Bank2_To_Bank1+0xb0>)
 80004ca:	f000 ff65 	bl	8001398 <NVM_voidUpdateControlPage>

}
 80004ce:	bf00      	nop
 80004d0:	3720      	adds	r7, #32
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	0800fc38 	.word	0x0800fc38
 80004dc:	0800fc3c 	.word	0x0800fc3c
 80004e0:	0800fc18 	.word	0x0800fc18
 80004e4:	0800fc1c 	.word	0x0800fc1c
 80004e8:	0800fc14 	.word	0x0800fc14
 80004ec:	0800fc34 	.word	0x0800fc34

080004f0 <BL_voidCopy_Bank1_To_Bank2>:
 *
 * This function is used to Move bank1 to bank2
 *
 */
void BL_voidCopy_Bank1_To_Bank2()
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b088      	sub	sp, #32
 80004f4:	af00      	add	r7, sp, #0
	u32 Bank1_Data    		  = 0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	61bb      	str	r3, [r7, #24]
	u32 Bank1_Address 		  = 0;
 80004fa:	2300      	movs	r3, #0
 80004fc:	617b      	str	r3, [r7, #20]
	u32 Bank2_Data_Address    = 0;
 80004fe:	2300      	movs	r3, #0
 8000500:	613b      	str	r3, [r7, #16]

	/* Reading THe size of bank 2 */
	u32 Bank1_Size = FLS_u32ReadWord(BANK1_SIZE_ADDRESS);
 8000502:	4822      	ldr	r0, [pc, #136]	; (800058c <BL_voidCopy_Bank1_To_Bank2+0x9c>)
 8000504:	f000 fdc3 	bl	800108e <FLS_u32ReadWord>
 8000508:	60f8      	str	r0, [r7, #12]

	u32 Bank1_Size_Word = Bank1_Size / 4;
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	089b      	lsrs	r3, r3, #2
 800050e:	60bb      	str	r3, [r7, #8]

	/* Calcutling CRC value for bank 2 */
	u32 Bank1_CRC = FLS_u32ReadWord(BANK1_CRC_ADDRESS);
 8000510:	481f      	ldr	r0, [pc, #124]	; (8000590 <BL_voidCopy_Bank1_To_Bank2+0xa0>)
 8000512:	f000 fdbc 	bl	800108e <FLS_u32ReadWord>
 8000516:	6078      	str	r0, [r7, #4]

	/* Erase Bank 1  */
	FLS_voidEraseAppArea(NUMBER_OF_FIRST_PAGE_IN_BANK2, NUMBER_OF_LAST_PAGE_IN_BANK2);
 8000518:	213e      	movs	r1, #62	; 0x3e
 800051a:	2022      	movs	r0, #34	; 0x22
 800051c:	f000 fd9c 	bl	8001058 <FLS_voidEraseAppArea>

	/* Copying the app in bank 2 to bank 1 */
	for(u32 Counter = 0; Counter < Bank1_Size_Word; Counter++)
 8000520:	2300      	movs	r3, #0
 8000522:	61fb      	str	r3, [r7, #28]
 8000524:	e017      	b.n	8000556 <BL_voidCopy_Bank1_To_Bank2+0x66>
	{
		/* Looping over bank 1 addresses  */
		Bank2_Data_Address = (ADDRESS_OF_STARTUP_BANK2 + (WORD_SIZE * Counter));
 8000526:	69fb      	ldr	r3, [r7, #28]
 8000528:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800052c:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8000530:	009b      	lsls	r3, r3, #2
 8000532:	613b      	str	r3, [r7, #16]

		/* Looping over bank 2 addreses */

		Bank1_Address      = (ADDRESS_OF_STARTUP_BANK1 + (WORD_SIZE * Counter));
 8000534:	69fb      	ldr	r3, [r7, #28]
 8000536:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800053a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800053e:	009b      	lsls	r3, r3, #2
 8000540:	617b      	str	r3, [r7, #20]

		/* Referncing the addresses into the data */
		Bank1_Data = *((volatile u32 *) Bank1_Address);
 8000542:	697b      	ldr	r3, [r7, #20]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	61bb      	str	r3, [r7, #24]


		/* Looping over the whole bank addresses to flash it */
		FLS_u8ProgramOneWordFlash(Bank2_Data_Address, Bank1_Data);
 8000548:	69b9      	ldr	r1, [r7, #24]
 800054a:	6938      	ldr	r0, [r7, #16]
 800054c:	f000 fd0c 	bl	8000f68 <FLS_u8ProgramOneWordFlash>
	for(u32 Counter = 0; Counter < Bank1_Size_Word; Counter++)
 8000550:	69fb      	ldr	r3, [r7, #28]
 8000552:	3301      	adds	r3, #1
 8000554:	61fb      	str	r3, [r7, #28]
 8000556:	69fa      	ldr	r2, [r7, #28]
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	429a      	cmp	r2, r3
 800055c:	d3e3      	bcc.n	8000526 <BL_voidCopy_Bank1_To_Bank2+0x36>

	}

	/* Updating the control page with the new falsg values  */
	/* Updating bank 1 size */
	NVM_voidUpdateControlPage(BANK2_SIZE_ADDRESS, Bank1_Size);
 800055e:	68f9      	ldr	r1, [r7, #12]
 8000560:	480c      	ldr	r0, [pc, #48]	; (8000594 <BL_voidCopy_Bank1_To_Bank2+0xa4>)
 8000562:	f000 ff19 	bl	8001398 <NVM_voidUpdateControlPage>

	/* Updating CRC value */
	NVM_voidUpdateControlPage(BANK2_CRC_ADDRESS, Bank1_CRC);
 8000566:	6879      	ldr	r1, [r7, #4]
 8000568:	480b      	ldr	r0, [pc, #44]	; (8000598 <BL_voidCopy_Bank1_To_Bank2+0xa8>)
 800056a:	f000 ff15 	bl	8001398 <NVM_voidUpdateControlPage>

	/* Making the bank 1 active */
	NVM_voidUpdateControlPage(BANK2_STATUS_ADDRESS, BOOTLOADER_BACKUP_IS_IN_BANK2);
 800056e:	f06f 010c 	mvn.w	r1, #12
 8000572:	480a      	ldr	r0, [pc, #40]	; (800059c <BL_voidCopy_Bank1_To_Bank2+0xac>)
 8000574:	f000 ff10 	bl	8001398 <NVM_voidUpdateControlPage>


	/* making bank 2 back up */
	NVM_voidUpdateControlPage(BANK2_STATUS_ADDRESS, BOOTLOADER_APP_IS_IN_BANK1);
 8000578:	f06f 010e 	mvn.w	r1, #14
 800057c:	4807      	ldr	r0, [pc, #28]	; (800059c <BL_voidCopy_Bank1_To_Bank2+0xac>)
 800057e:	f000 ff0b 	bl	8001398 <NVM_voidUpdateControlPage>

}
 8000582:	bf00      	nop
 8000584:	3720      	adds	r7, #32
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	0800fc18 	.word	0x0800fc18
 8000590:	0800fc1c 	.word	0x0800fc1c
 8000594:	0800fc38 	.word	0x0800fc38
 8000598:	0800fc3c 	.word	0x0800fc3c
 800059c:	0800fc34 	.word	0x0800fc34

080005a0 <BL_voidSet_Specifying_Flag_Make_SW_Reset>:

/**
 * This function is used to update the bank specifier flag and make software reset and start from the begining
 */
void BL_voidSet_Specifying_Flag_Make_SW_Reset()
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0

	/* Making Specifying flag with zero in order to be able to recive new code  */
	NVM_voidUpdateControlPage(BL_SPECIFYING_BANK_FLAG, SET_SPECIFYING_FLAG);
 80005a4:	2100      	movs	r1, #0
 80005a6:	4803      	ldr	r0, [pc, #12]	; (80005b4 <BL_voidSet_Specifying_Flag_Make_SW_Reset+0x14>)
 80005a8:	f000 fef6 	bl	8001398 <NVM_voidUpdateControlPage>

	/* SOftware Reset via watchdog timer */
	IWDT_voidMakeSoftWareReset();
 80005ac:	f000 ffd2 	bl	8001554 <IWDT_voidMakeSoftWareReset>
}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	0800fc00 	.word	0x0800fc00

080005b8 <BL_voidRecieve_APP>:

/**
 * This function is used to request the update from the server
 */
void BL_voidRecieve_APP()
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
	u8 Gateway_Request = 0;
 80005be:	2300      	movs	r3, #0
 80005c0:	70fb      	strb	r3, [r7, #3]

	u32 Bank1_Address  = ADDRESS_OF_STARTUP_BANK1;
 80005c2:	4b2f      	ldr	r3, [pc, #188]	; (8000680 <BL_voidRecieve_APP+0xc8>)
 80005c4:	607b      	str	r3, [r7, #4]

	Size_Of_Code = FLS_u32ReadWord(BANK1_SIZE_ADDRESS);
 80005c6:	482f      	ldr	r0, [pc, #188]	; (8000684 <BL_voidRecieve_APP+0xcc>)
 80005c8:	f000 fd61 	bl	800108e <FLS_u32ReadWord>
 80005cc:	4603      	mov	r3, r0
 80005ce:	4a2e      	ldr	r2, [pc, #184]	; (8000688 <BL_voidRecieve_APP+0xd0>)
 80005d0:	6013      	str	r3, [r2, #0]

	/* Erasing bank 1 */
	FLS_voidEraseAppArea(NUMBER_OF_FIRST_PAGE_IN_BANK1, NUMBER_OF_LAST_PAGE_IN_BANK1);
 80005d2:	2121      	movs	r1, #33	; 0x21
 80005d4:	2007      	movs	r0, #7
 80005d6:	f000 fd3f 	bl	8001058 <FLS_voidEraseAppArea>

	/* Response to gateway that the headers is updated from the other function jump to bootloader*/
	CanIf_voidTransmit_Byte(UDS_MCU_ACKNOWLEDGE_HEADER_RECEIVED);
 80005da:	2074      	movs	r0, #116	; 0x74
 80005dc:	f000 f904 	bl	80007e8 <CanIf_voidTransmit_Byte>


	while(Size_Of_Code)
 80005e0:	e045      	b.n	800066e <BL_voidRecieve_APP+0xb6>
	{

		CanIf_voidReceive_Byte(&Gateway_Request);
 80005e2:	1cfb      	adds	r3, r7, #3
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 f8c7 	bl	8000778 <CanIf_voidReceive_Byte>

		if(Gateway_Request == UDS_GWY_REQUEST_SENDING_LINE_OF_CODE)
 80005ea:	78fb      	ldrb	r3, [r7, #3]
 80005ec:	2b36      	cmp	r3, #54	; 0x36
 80005ee:	d135      	bne.n	800065c <BL_voidRecieve_APP+0xa4>
		{
			CanIf_voidTransmit_Byte(UDS_MCU_ACCEPT_RECEIVING_PACKET_OF_CODE);
 80005f0:	2075      	movs	r0, #117	; 0x75
 80005f2:	f000 f8f9 	bl	80007e8 <CanIf_voidTransmit_Byte>

			if(Size_Of_Code > 1024)
 80005f6:	4b24      	ldr	r3, [pc, #144]	; (8000688 <BL_voidRecieve_APP+0xd0>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005fe:	d918      	bls.n	8000632 <BL_voidRecieve_APP+0x7a>
			{
				CanIf_voidReceive_Block(Host_Buffer, 1024);
 8000600:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000604:	4821      	ldr	r0, [pc, #132]	; (800068c <BL_voidRecieve_APP+0xd4>)
 8000606:	f000 f8d5 	bl	80007b4 <CanIf_voidReceive_Block>

				Size_Of_Code -= 1024;
 800060a:	4b1f      	ldr	r3, [pc, #124]	; (8000688 <BL_voidRecieve_APP+0xd0>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8000612:	4a1d      	ldr	r2, [pc, #116]	; (8000688 <BL_voidRecieve_APP+0xd0>)
 8000614:	6013      	str	r3, [r2, #0]

				FLS_voidProgramFlashBuffer(Bank1_Address, Host_Buffer, 1024);
 8000616:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800061a:	491c      	ldr	r1, [pc, #112]	; (800068c <BL_voidRecieve_APP+0xd4>)
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f000 fd45 	bl	80010ac <FLS_voidProgramFlashBuffer>

				Bank1_Address += 1024;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000628:	607b      	str	r3, [r7, #4]

				CanIf_voidTransmit_Byte(UDS_MCU_ACKNOWLEDGE_LINE_OF_CODE_RECEIVED);
 800062a:	2076      	movs	r0, #118	; 0x76
 800062c:	f000 f8dc 	bl	80007e8 <CanIf_voidTransmit_Byte>
 8000630:	e014      	b.n	800065c <BL_voidRecieve_APP+0xa4>
			}
			else
			{
				CanIf_voidReceive_Block(Host_Buffer, Size_Of_Code);
 8000632:	4b15      	ldr	r3, [pc, #84]	; (8000688 <BL_voidRecieve_APP+0xd0>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	b29b      	uxth	r3, r3
 8000638:	4619      	mov	r1, r3
 800063a:	4814      	ldr	r0, [pc, #80]	; (800068c <BL_voidRecieve_APP+0xd4>)
 800063c:	f000 f8ba 	bl	80007b4 <CanIf_voidReceive_Block>

				FLS_voidProgramFlashBuffer(Bank1_Address, Host_Buffer, Size_Of_Code);
 8000640:	4b11      	ldr	r3, [pc, #68]	; (8000688 <BL_voidRecieve_APP+0xd0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	b29b      	uxth	r3, r3
 8000646:	461a      	mov	r2, r3
 8000648:	4910      	ldr	r1, [pc, #64]	; (800068c <BL_voidRecieve_APP+0xd4>)
 800064a:	6878      	ldr	r0, [r7, #4]
 800064c:	f000 fd2e 	bl	80010ac <FLS_voidProgramFlashBuffer>

				Size_Of_Code -= Size_Of_Code; //zero escape while
 8000650:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <BL_voidRecieve_APP+0xd0>)
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]

				CanIf_voidTransmit_Byte(UDS_MCU_ACKNOWLEDGE_LINE_OF_CODE_RECEIVED);
 8000656:	2076      	movs	r0, #118	; 0x76
 8000658:	f000 f8c6 	bl	80007e8 <CanIf_voidTransmit_Byte>
			}
		}

		CanIf_voidReceive_Byte(&Gateway_Request);
 800065c:	1cfb      	adds	r3, r7, #3
 800065e:	4618      	mov	r0, r3
 8000660:	f000 f88a 	bl	8000778 <CanIf_voidReceive_Byte>

		if(Gateway_Request == UDS_GWY_ACKNOWLEDGE_FINISHING_SENDING_CODE)
 8000664:	78fb      	ldrb	r3, [r7, #3]
 8000666:	2b37      	cmp	r3, #55	; 0x37
 8000668:	d101      	bne.n	800066e <BL_voidRecieve_APP+0xb6>
		{
			BL_void_Finish_Bootloader();
 800066a:	f000 f81f 	bl	80006ac <BL_void_Finish_Bootloader>
	while(Size_Of_Code)
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <BL_voidRecieve_APP+0xd0>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d1b5      	bne.n	80005e2 <BL_voidRecieve_APP+0x2a>
		else
		{
			/* NOTHING */
		}
	}
}
 8000676:	bf00      	nop
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	08001400 	.word	0x08001400
 8000684:	0800fc18 	.word	0x0800fc18
 8000688:	20000054 	.word	0x20000054
 800068c:	20000058 	.word	0x20000058

08000690 <BL_voidVector_Table_Offset>:

/**
 * This function is used to set the offset SCB_VTOR of the vector table
 */
void BL_voidVector_Table_Offset()
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0

	/* Making the offset of the vector table to the start of bank 1 */
	SCB_VTOR = ADDRESS_OF_STARTUP_BANK1;
 8000694:	4b03      	ldr	r3, [pc, #12]	; (80006a4 <BL_voidVector_Table_Offset+0x14>)
 8000696:	4a04      	ldr	r2, [pc, #16]	; (80006a8 <BL_voidVector_Table_Offset+0x18>)
 8000698:	601a      	str	r2, [r3, #0]
}
 800069a:	bf00      	nop
 800069c:	46bd      	mov	sp, r7
 800069e:	bc80      	pop	{r7}
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	e000ed08 	.word	0xe000ed08
 80006a8:	08001400 	.word	0x08001400

080006ac <BL_void_Finish_Bootloader>:

/**
 * This function is used to end the process of the bootloader, update the control flags, copy bank1 to bank2 and make software reset
 */
void BL_void_Finish_Bootloader()
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
	/* Requesting a code from the gatewayy */
	CanIf_voidTransmit_Byte(UDS_MCU_ACKNOWLEDGE_FINISHING);
 80006b0:	2077      	movs	r0, #119	; 0x77
 80006b2:	f000 f899 	bl	80007e8 <CanIf_voidTransmit_Byte>

	NVM_voidUpdateControlPage(BANK1_STATUS_ADDRESS, BOOTLOADER_APP_IS_IN_BANK1);
 80006b6:	f06f 010e 	mvn.w	r1, #14
 80006ba:	480d      	ldr	r0, [pc, #52]	; (80006f0 <BL_void_Finish_Bootloader+0x44>)
 80006bc:	f000 fe6c 	bl	8001398 <NVM_voidUpdateControlPage>
	NVM_voidUpdateControlPage(BANK2_STATUS_ADDRESS, BOOTLOADER_BACKUP_IS_IN_BANK2);
 80006c0:	f06f 010c 	mvn.w	r1, #12
 80006c4:	480b      	ldr	r0, [pc, #44]	; (80006f4 <BL_void_Finish_Bootloader+0x48>)
 80006c6:	f000 fe67 	bl	8001398 <NVM_voidUpdateControlPage>

	if(First_Flash == 1)
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <BL_void_Finish_Bootloader+0x4c>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d104      	bne.n	80006dc <BL_void_Finish_Bootloader+0x30>
	{
		First_Flash = 0;
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <BL_void_Finish_Bootloader+0x4c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	701a      	strb	r2, [r3, #0]

		BL_voidCopy_Bank1_To_Bank2();
 80006d8:	f7ff ff0a 	bl	80004f0 <BL_voidCopy_Bank1_To_Bank2>
	}

	NVM_voidUpdateControlPage(BL_SPECIFYING_BANK_FLAG, RESET_SPECIFYING_FLAG);
 80006dc:	f04f 31ff 	mov.w	r1, #4294967295
 80006e0:	4806      	ldr	r0, [pc, #24]	; (80006fc <BL_void_Finish_Bootloader+0x50>)
 80006e2:	f000 fe59 	bl	8001398 <NVM_voidUpdateControlPage>

	IWDT_voidMakeSoftWareReset();
 80006e6:	f000 ff35 	bl	8001554 <IWDT_voidMakeSoftWareReset>
}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	0800fc14 	.word	0x0800fc14
 80006f4:	0800fc34 	.word	0x0800fc34
 80006f8:	20000000 	.word	0x20000000
 80006fc:	0800fc00 	.word	0x0800fc00

08000700 <CanIf_voidTransmit_Struct>:
 * Initialize transmission CAN frame to send it through specific mailbox
 * @param CANx
 * @param TxMessage
 */
Std_ReturnType CanIf_voidTransmit_Struct(CAN_TypeDef* CANx, CanTxMsg TxMessage )
{
 8000700:	b084      	sub	sp, #16
 8000702:	b580      	push	{r7, lr}
 8000704:	b084      	sub	sp, #16
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
 800070a:	f107 001c 	add.w	r0, r7, #28
 800070e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Std_ReturnType Local_ReturnError = E_OK;
 8000712:	2301      	movs	r3, #1
 8000714:	73fb      	strb	r3, [r7, #15]


	if (NULL == CANx)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d103      	bne.n	8000724 <CanIf_voidTransmit_Struct+0x24>
	{
		Local_ReturnError = E_NOT_OK;
 800071c:	2300      	movs	r3, #0
 800071e:	73fb      	strb	r3, [r7, #15]

		return  Local_ReturnError;
 8000720:	7bfb      	ldrb	r3, [r7, #15]
 8000722:	e006      	b.n	8000732 <CanIf_voidTransmit_Struct+0x32>

	}

	CAN_VoidTransmit( CANx , &TxMessage);
 8000724:	f107 031c 	add.w	r3, r7, #28
 8000728:	4619      	mov	r1, r3
 800072a:	6878      	ldr	r0, [r7, #4]
 800072c:	f000 fa72 	bl	8000c14 <CAN_VoidTransmit>

	return Local_ReturnError;
 8000730:	7bfb      	ldrb	r3, [r7, #15]
}
 8000732:	4618      	mov	r0, r3
 8000734:	3710      	adds	r7, #16
 8000736:	46bd      	mov	sp, r7
 8000738:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800073c:	b004      	add	sp, #16
 800073e:	4770      	bx	lr

08000740 <CanIf_voidReceive_Word>:
/**
 * Block FIFO until receive only one word
 * @param Copy_u32Word
 */
Std_ReturnType CanIf_voidReceive_Word(u32 *Copy_u32Word)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 	Std_ReturnType Local_ReturnError = E_OK;
 8000748:	2301      	movs	r3, #1
 800074a:	73fb      	strb	r3, [r7, #15]


	if ((NULL == Copy_u32Word))
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d103      	bne.n	800075a <CanIf_voidReceive_Word+0x1a>
	{
		Local_ReturnError = E_NOT_OK;
 8000752:	2300      	movs	r3, #0
 8000754:	73fb      	strb	r3, [r7, #15]

		return  Local_ReturnError;
 8000756:	7bfb      	ldrb	r3, [r7, #15]
 8000758:	e008      	b.n	800076c <CanIf_voidReceive_Word+0x2c>
	}
	u32 Local_u32Data ;

	Local_u32Data = Can_uint32SynRecieveWord(CAN1 , CAN_FIFO0);
 800075a:	2100      	movs	r1, #0
 800075c:	4805      	ldr	r0, [pc, #20]	; (8000774 <CanIf_voidReceive_Word+0x34>)
 800075e:	f000 fb4b 	bl	8000df8 <Can_uint32SynRecieveWord>
 8000762:	60b8      	str	r0, [r7, #8]


	(*Copy_u32Word) = Local_u32Data ;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	68ba      	ldr	r2, [r7, #8]
 8000768:	601a      	str	r2, [r3, #0]

	return  Local_ReturnError;
 800076a:	7bfb      	ldrb	r3, [r7, #15]
}
 800076c:	4618      	mov	r0, r3
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40006400 	.word	0x40006400

08000778 <CanIf_voidReceive_Byte>:
/**
 * Block FIFO until receive only one byte
 * @param Copy_u8Byte
 */
Std_ReturnType CanIf_voidReceive_Byte(u8*Copy_u8Byte)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 	Std_ReturnType Local_ReturnError = E_OK;
 8000780:	2301      	movs	r3, #1
 8000782:	73fb      	strb	r3, [r7, #15]


	if (NULL == Copy_u8Byte)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d103      	bne.n	8000792 <CanIf_voidReceive_Byte+0x1a>
	{
		Local_ReturnError = E_NOT_OK;
 800078a:	2300      	movs	r3, #0
 800078c:	73fb      	strb	r3, [r7, #15]

		return  Local_ReturnError;
 800078e:	7bfb      	ldrb	r3, [r7, #15]
 8000790:	e009      	b.n	80007a6 <CanIf_voidReceive_Byte+0x2e>
	}


	u8 Local_u8Data ;

	Local_u8Data = Can_u8SynRecieveByte(CAN1 , CAN_FIFO0);
 8000792:	2100      	movs	r1, #0
 8000794:	4806      	ldr	r0, [pc, #24]	; (80007b0 <CanIf_voidReceive_Byte+0x38>)
 8000796:	f000 fb57 	bl	8000e48 <Can_u8SynRecieveByte>
 800079a:	4603      	mov	r3, r0
 800079c:	73bb      	strb	r3, [r7, #14]

	(*Copy_u8Byte) = Local_u8Data;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	7bba      	ldrb	r2, [r7, #14]
 80007a2:	701a      	strb	r2, [r3, #0]

	return  Local_ReturnError;
 80007a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40006400 	.word	0x40006400

080007b4 <CanIf_voidReceive_Block>:
 * Block FIFO until receiving is all complete
 * @param Copy_u8DataPtr
 * @param Copy_u8DataLenght
 */
Std_ReturnType CanIf_voidReceive_Block(u8 *Copy_u8DataPtr , u16 Copy_u8DataLenght)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	460b      	mov	r3, r1
 80007be:	807b      	strh	r3, [r7, #2]

	Std_ReturnType Local_ReturnError = E_OK;
 80007c0:	2301      	movs	r3, #1
 80007c2:	73fb      	strb	r3, [r7, #15]


	if (NULL == Copy_u8DataPtr)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d103      	bne.n	80007d2 <CanIf_voidReceive_Block+0x1e>
	{
		Local_ReturnError = E_NOT_OK;
 80007ca:	2300      	movs	r3, #0
 80007cc:	73fb      	strb	r3, [r7, #15]

		return  Local_ReturnError;
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	e006      	b.n	80007e0 <CanIf_voidReceive_Block+0x2c>
	}



	Can_voidSynRecieveArray(Copy_u8DataPtr , Copy_u8DataLenght);
 80007d2:	887b      	ldrh	r3, [r7, #2]
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	4619      	mov	r1, r3
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f000 fad1 	bl	8000d80 <Can_voidSynRecieveArray>

	return  Local_ReturnError;
 80007de:	7bfb      	ldrb	r3, [r7, #15]

}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3710      	adds	r7, #16
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <CanIf_voidTransmit_Byte>:
/**
 * Transmit only one byte
 * @param Copy_u8Data
 */
Std_ReturnType CanIf_voidTransmit_Byte(u8 Copy_u8Data )
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	; 0x28
 80007ec:	af02      	add	r7, sp, #8
 80007ee:	4603      	mov	r3, r0
 80007f0:	71fb      	strb	r3, [r7, #7]

 	Std_ReturnType Local_ReturnError = E_OK;
 80007f2:	2301      	movs	r3, #1
 80007f4:	77fb      	strb	r3, [r7, #31]


	 CanTxMsg  TxMessage ;


	TxMessage.ID = NODE_ONE_MESS_ID ;
 80007f6:	2302      	movs	r3, #2
 80007f8:	60fb      	str	r3, [r7, #12]


	TxMessage.DATA_LENGHT = ONE_BTYE;
 80007fa:	2301      	movs	r3, #1
 80007fc:	743b      	strb	r3, [r7, #16]
	TxMessage.IDE = CONFOIG_IDE;
 80007fe:	2300      	movs	r3, #0
 8000800:	723b      	strb	r3, [r7, #8]
	TxMessage.RTR = CONFOIG_RTR;
 8000802:	2300      	movs	r3, #0
 8000804:	727b      	strb	r3, [r7, #9]
	TxMessage.DATA[BYTE_ZERO] = Copy_u8Data;
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	747b      	strb	r3, [r7, #17]


	Local_ReturnError = CanIf_voidTransmit_Struct(CAN1, TxMessage);
 800080a:	466a      	mov	r2, sp
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000814:	e882 0003 	stmia.w	r2, {r0, r1}
 8000818:	f107 0308 	add.w	r3, r7, #8
 800081c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800081e:	4805      	ldr	r0, [pc, #20]	; (8000834 <CanIf_voidTransmit_Byte+0x4c>)
 8000820:	f7ff ff6e 	bl	8000700 <CanIf_voidTransmit_Struct>
 8000824:	4603      	mov	r3, r0
 8000826:	77fb      	strb	r3, [r7, #31]

	return Local_ReturnError ;
 8000828:	7ffb      	ldrb	r3, [r7, #31]
}
 800082a:	4618      	mov	r0, r3
 800082c:	3720      	adds	r7, #32
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40006400 	.word	0x40006400

08000838 <CAN_VoidInit>:
 * Initializes the CAN peripheral
 * @param CANx
 * @param CANInitStruct
 */
void CAN_VoidInit(CAN_TypeDef* CANx, CAN_InitTypeDef* CANInitStruct)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
	/* The CAN Module starts in sleep mode so we exit it */
	CLR_BIT(CANx->MCR, CAN_MCR_SLEEP);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f023 0202 	bic.w	r2, r3, #2
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	601a      	str	r2, [r3, #0]


	/* Enter Intialization Mode */
	SET_BIT(CANx->MCR, CAN_MCR_INRQ);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	f043 0201 	orr.w	r2, r3, #1
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	601a      	str	r2, [r3, #0]


	/* Wait for the CAN to enter init by waiting on the flag of the sleep OR the flag of the init */
	while((CAN_MSR_SLAK == (CAN_MSR_SLAK & CAN1->MSR)) || (CAN_MSR_INAK != (CAN_MSR_INAK & CAN1->MSR)))
 800085a:	e000      	b.n	800085e <CAN_VoidInit+0x26>
	{
		asm("NOP");
 800085c:	bf00      	nop
	while((CAN_MSR_SLAK == (CAN_MSR_SLAK & CAN1->MSR)) || (CAN_MSR_INAK != (CAN_MSR_INAK & CAN1->MSR)))
 800085e:	4b3d      	ldr	r3, [pc, #244]	; (8000954 <CAN_VoidInit+0x11c>)
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	2b00      	cmp	r3, #0
 8000868:	d1f8      	bne.n	800085c <CAN_VoidInit+0x24>
	}


	/* Enable the Time Trigger COMM Mode if it's enable in the struct */
	if(CANInitStruct->CAN_TTCM == ENABLE)
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	799b      	ldrb	r3, [r3, #6]
 800086e:	2b01      	cmp	r3, #1
 8000870:	d106      	bne.n	8000880 <CAN_VoidInit+0x48>
	{
		SET_BIT(CANx->MCR, CAN_MCR_TTCM);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	e005      	b.n	800088c <CAN_VoidInit+0x54>

	}
	else
	{
		CLR_BIT(CANx->MCR, CAN_MCR_TTCM);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	601a      	str	r2, [r3, #0]

	}


	/* Setting the automatic bus off */
	if (CANInitStruct->CAN_ABOM == ENABLE)
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	79db      	ldrb	r3, [r3, #7]
 8000890:	2b01      	cmp	r3, #1
 8000892:	d106      	bne.n	80008a2 <CAN_VoidInit+0x6a>
	{
		SET_BIT(CANx->MCR, CAN_MCR_ABOM);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	e005      	b.n	80008ae <CAN_VoidInit+0x76>
	}
	else
	{
		CLR_BIT(CANx->MCR, CAN_MCR_ABOM);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	601a      	str	r2, [r3, #0]
	}

	/* Setting the automatic wake up mode  */
	if (CANInitStruct->CAN_AWUM == ENABLE)
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	7a1b      	ldrb	r3, [r3, #8]
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d106      	bne.n	80008c4 <CAN_VoidInit+0x8c>
	{
		SET_BIT(CANx->MCR, CAN_MCR_AWUM);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f043 0220 	orr.w	r2, r3, #32
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	e005      	b.n	80008d0 <CAN_VoidInit+0x98>
	}
	else
	{
		CLR_BIT(CANx->MCR, CAN_MCR_AWUM);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f023 0220 	bic.w	r2, r3, #32
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	601a      	str	r2, [r3, #0]
	}

	/* Setting the automatic Retranssmission */
	if (CANInitStruct->CAN_NART == ENABLE)
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	7a5b      	ldrb	r3, [r3, #9]
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d106      	bne.n	80008e6 <CAN_VoidInit+0xae>
	{
		SET_BIT(CANx->MCR, CAN_MCR_NART);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f043 0210 	orr.w	r2, r3, #16
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	e005      	b.n	80008f2 <CAN_VoidInit+0xba>
	}
	else
	{
		CLR_BIT(CANx->MCR, CAN_MCR_NART);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f023 0210 	bic.w	r2, r3, #16
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	601a      	str	r2, [r3, #0]
	}

	/* Setting the Transmission FIFO Priority  */
	if (CANInitStruct->CAN_TXFP == ENABLE)
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	7adb      	ldrb	r3, [r3, #11]
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d106      	bne.n	8000908 <CAN_VoidInit+0xd0>
	{
		SET_BIT(CANx->MCR, CAN_MCR_TXFP);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f043 0204 	orr.w	r2, r3, #4
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	e005      	b.n	8000914 <CAN_VoidInit+0xdc>
	}
	else
	{
		CLR_BIT(CANx->MCR, CAN_MCR_TXFP);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f023 0204 	bic.w	r2, r3, #4
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	601a      	str	r2, [r3, #0]
	}


	CANx->BTR = ((u32) CANInitStruct->CAN_MODE << 30) | ((u32) CANInitStruct->CAN_SJW << 24) | ((u32) CANInitStruct->CAN_BS1 << 16) | ((u32) CANInitStruct->CAN_BS2 << 20) | ((u32) CANInitStruct->CAN_Prescaler - 1);
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	789b      	ldrb	r3, [r3, #2]
 8000918:	079a      	lsls	r2, r3, #30
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	78db      	ldrb	r3, [r3, #3]
 800091e:	061b      	lsls	r3, r3, #24
 8000920:	431a      	orrs	r2, r3
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	791b      	ldrb	r3, [r3, #4]
 8000926:	041b      	lsls	r3, r3, #16
 8000928:	431a      	orrs	r2, r3
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	795b      	ldrb	r3, [r3, #5]
 800092e:	051b      	lsls	r3, r3, #20
 8000930:	431a      	orrs	r2, r3
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	881b      	ldrh	r3, [r3, #0]
 8000936:	3b01      	subs	r3, #1
 8000938:	431a      	orrs	r2, r3
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	61da      	str	r2, [r3, #28]


	/* Leave Init Mode */
	CLR_BIT(CANx->MCR, CAN_MCR_INRQ);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f023 0201 	bic.w	r2, r3, #1
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	601a      	str	r2, [r3, #0]
}
 800094a:	bf00      	nop
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr
 8000954:	40006400 	.word	0x40006400

08000958 <CAN_VoidFilterSet>:
/**
 * Initializes specific filter bank
 * @param CAN_FilterInitStruct
 */
void CAN_VoidFilterSet(CAN_FilterInitTypeDef* CAN_FilterInitStruct, CAN_TypeDef* CANx)
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]

	/* Initialization mode for the filter */
	SET_BIT(CANx->FMR, 0);
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000968:	f043 0201 	orr.w	r2, r3, #1
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200


	/* Getting filter mode positon */
	u32 local_u32FilterPos =  CAN_FilterInitStruct->FilterBank;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	60fb      	str	r3, [r7, #12]


	/* Deactivate filter for a while */
	CLR_BIT(CANx->FA1R, CAN_FilterInitStruct->FilterBank);
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	6952      	ldr	r2, [r2, #20]
 8000982:	2101      	movs	r1, #1
 8000984:	fa01 f202 	lsl.w	r2, r1, r2
 8000988:	43d2      	mvns	r2, r2
 800098a:	401a      	ands	r2, r3
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c


	/* Filter Scaling */
	if(CAN_FilterInitStruct->FilterScale == CAN_FILTERSCALE_16BIT)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	69db      	ldr	r3, [r3, #28]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d127      	bne.n	80009ea <CAN_VoidFilterSet+0x92>
	{
		/* 16 bit scaling */
		CLR_BIT(CANx->FS1R, local_u32FilterPos);
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80009a0:	2101      	movs	r1, #1
 80009a2:	68fa      	ldr	r2, [r7, #12]
 80009a4:	fa01 f202 	lsl.w	r2, r1, r2
 80009a8:	43d2      	mvns	r2, r2
 80009aa:	401a      	ands	r2, r3
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				 *   15-8          7-5    4   3    2-0
				 * STID[10:3] STID[2:0] RTR IDE EXID[17:15]
				 * */

		/* Assigning first 16 bit idetfier */
		CANx->sFilterRegister[CAN_FilterInitStruct->FilterBank].FR1 = (((CAN_FilterInitStruct->FilterMaskIdLow & 0x0000FFFF) << 16) |
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	68db      	ldr	r3, [r3, #12]
 80009b6:	0419      	lsls	r1, r3, #16
																			(CAN_FilterInitStruct->FilterIdLow & 0x0000FFFF));
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	b29b      	uxth	r3, r3
		CANx->sFilterRegister[CAN_FilterInitStruct->FilterBank].FR1 = (((CAN_FilterInitStruct->FilterMaskIdLow & 0x0000FFFF) << 16) |
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	6952      	ldr	r2, [r2, #20]
 80009c2:	4319      	orrs	r1, r3
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	3248      	adds	r2, #72	; 0x48
 80009c8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

		/* Assigning the sedond 16 bits */
		CANx->sFilterRegister[CAN_FilterInitStruct->FilterBank].FR2 = (((CAN_FilterInitStruct->FilterMaskIdHigh & 0x0000FFFF) << 16) |
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	689b      	ldr	r3, [r3, #8]
 80009d0:	0419      	lsls	r1, r3, #16
																		(CAN_FilterInitStruct->FilterIdHigh & 0x0000FFFF));
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	b29a      	uxth	r2, r3
		CANx->sFilterRegister[CAN_FilterInitStruct->FilterBank].FR2 = (((CAN_FilterInitStruct->FilterMaskIdHigh & 0x0000FFFF) << 16) |
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	695b      	ldr	r3, [r3, #20]
 80009dc:	430a      	orrs	r2, r1
 80009de:	6839      	ldr	r1, [r7, #0]
 80009e0:	3348      	adds	r3, #72	; 0x48
 80009e2:	00db      	lsls	r3, r3, #3
 80009e4:	440b      	add	r3, r1
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	e029      	b.n	8000a3e <CAN_VoidFilterSet+0xe6>

	}
	else if(CAN_FilterInitStruct->FilterScale == CAN_FILTERSCALE_32BIT)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	69db      	ldr	r3, [r3, #28]
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d125      	bne.n	8000a3e <CAN_VoidFilterSet+0xe6>
	{
		/* 32-bit scale for the filter */
		SET_BIT(CANx->FS1R, local_u32FilterPos);
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80009f8:	2101      	movs	r1, #1
 80009fa:	68fa      	ldr	r2, [r7, #12]
 80009fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000a00:	431a      	orrs	r2, r3
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				 * STID[10:3] STID[2:0] EXID[17:13] EXID[12:5] EXID[4:0] IDE RTR 0
				 * */

		/* 32 bit identfier */

		CANx->sFilterRegister[CAN_FilterInitStruct->FilterBank].FR1 = (((CAN_FilterInitStruct->FilterIdHigh  & 0x0000FFFF) << 16) |
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	0419      	lsls	r1, r3, #16
																		(CAN_FilterInitStruct->FilterIdLow & 0x0000FFFF));
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	b29b      	uxth	r3, r3
		CANx->sFilterRegister[CAN_FilterInitStruct->FilterBank].FR1 = (((CAN_FilterInitStruct->FilterIdHigh  & 0x0000FFFF) << 16) |
 8000a14:	687a      	ldr	r2, [r7, #4]
 8000a16:	6952      	ldr	r2, [r2, #20]
 8000a18:	4319      	orrs	r1, r3
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	3248      	adds	r2, #72	; 0x48
 8000a1e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]


		CANx->sFilterRegister[CAN_FilterInitStruct->FilterBank].FR2 = (((CAN_FilterInitStruct->FilterMaskIdHigh & 0x0000FFFF) << 16) |
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	689b      	ldr	r3, [r3, #8]
 8000a26:	0419      	lsls	r1, r3, #16
																		(CAN_FilterInitStruct->FilterMaskIdLow & 0x0000FFFF));
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	b29a      	uxth	r2, r3
		CANx->sFilterRegister[CAN_FilterInitStruct->FilterBank].FR2 = (((CAN_FilterInitStruct->FilterMaskIdHigh & 0x0000FFFF) << 16) |
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	695b      	ldr	r3, [r3, #20]
 8000a32:	430a      	orrs	r2, r1
 8000a34:	6839      	ldr	r1, [r7, #0]
 8000a36:	3348      	adds	r3, #72	; 0x48
 8000a38:	00db      	lsls	r3, r3, #3
 8000a3a:	440b      	add	r3, r1
 8000a3c:	605a      	str	r2, [r3, #4]
	else
	{
		/* NOTHING */
	}

	if(CAN_FilterInitStruct->FilterMode == CAN_FILTERMODE_IDMASK)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	699b      	ldr	r3, [r3, #24]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d10c      	bne.n	8000a60 <CAN_VoidFilterSet+0x108>
	{

		/* Masking mode */
		CLR_BIT(CANx->FM1R, local_u32FilterPos);
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	fa01 f202 	lsl.w	r2, r1, r2
 8000a54:	43d2      	mvns	r2, r2
 8000a56:	401a      	ands	r2, r3
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000a5e:	e00a      	b.n	8000a76 <CAN_VoidFilterSet+0x11e>
	}
	else
	{
		/* List mode */
		SET_BIT(CANx->FM1R, local_u32FilterPos);
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000a66:	2101      	movs	r1, #1
 8000a68:	68fa      	ldr	r2, [r7, #12]
 8000a6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a6e:	431a      	orrs	r2, r3
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	}


	/* FIFo Assignment */
	if(CAN_FilterInitStruct->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	691b      	ldr	r3, [r3, #16]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d10c      	bne.n	8000a98 <CAN_VoidFilterSet+0x140>
	{
		/*  FIFO ZERO */
		CLR_BIT(CANx->FFA1R, local_u32FilterPos);
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000a84:	2101      	movs	r1, #1
 8000a86:	68fa      	ldr	r2, [r7, #12]
 8000a88:	fa01 f202 	lsl.w	r2, r1, r2
 8000a8c:	43d2      	mvns	r2, r2
 8000a8e:	401a      	ands	r2, r3
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000a96:	e00a      	b.n	8000aae <CAN_VoidFilterSet+0x156>
	}
	else
	{
		/* FIFO 1 */
		SET_BIT(CANx->FFA1R, local_u32FilterPos);
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000a9e:	2101      	movs	r1, #1
 8000aa0:	68fa      	ldr	r2, [r7, #12]
 8000aa2:	fa01 f202 	lsl.w	r2, r1, r2
 8000aa6:	431a      	orrs	r2, r3
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	}


	/* Activate Filter */

	if(CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d10a      	bne.n	8000ace <CAN_VoidFilterSet+0x176>
	{
		SET_BIT(CANx->FA1R, local_u32FilterPos);
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8000abe:	2101      	movs	r1, #1
 8000ac0:	68fa      	ldr	r2, [r7, #12]
 8000ac2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ac6:	431a      	orrs	r2, r3
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	}

	/* Leave the init mode */
	CLR_BIT(CANx->FMR, 0);
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000ad4:	f023 0201 	bic.w	r2, r3, #1
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200


}
 8000ade:	bf00      	nop
 8000ae0:	3714      	adds	r7, #20
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr

08000ae8 <CAN_VoidReceive>:
 * @param CANx
 * @param Copy_u8FifoNumber
 * @param RxMessage
 */
void CAN_VoidReceive(CAN_TypeDef* CANx, u8 Copy_u8FifoNumber, CanRxMsg* RxMessage)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b087      	sub	sp, #28
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	460b      	mov	r3, r1
 8000af2:	607a      	str	r2, [r7, #4]
 8000af4:	72fb      	strb	r3, [r7, #11]
	u8 Local_u8ReceivDataCounter;

	/* Getting the DLC (Data Length Code) from RDTR register the first 4 bits so we make halfword mask [0:3] */
	RxMessage->DATA_LENGHT = (CANx->sFIFOMailBox[Copy_u8FifoNumber].RDTR & (u8)0x0F);
 8000af6:	7afb      	ldrb	r3, [r7, #11]
 8000af8:	68fa      	ldr	r2, [r7, #12]
 8000afa:	331b      	adds	r3, #27
 8000afc:	011b      	lsls	r3, r3, #4
 8000afe:	4413      	add	r3, r2
 8000b00:	3304      	adds	r3, #4
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	f003 030f 	and.w	r3, r3, #15
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	721a      	strb	r2, [r3, #8]

	/* Getting the IDE Identfier to know I am working standard or Extended, it's the bit 2 */
	RxMessage->IDE = (CANx->sFIFOMailBox[Copy_u8FifoNumber].RIR & (u8)0x04) ;
 8000b10:	7afb      	ldrb	r3, [r7, #11]
 8000b12:	68fa      	ldr	r2, [r7, #12]
 8000b14:	331b      	adds	r3, #27
 8000b16:	011b      	lsls	r3, r3, #4
 8000b18:	4413      	add	r3, r2
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	f003 0304 	and.w	r3, r3, #4
 8000b22:	b2da      	uxtb	r2, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	701a      	strb	r2, [r3, #0]

	/* Get the Remote Transsmosiion request, Data Frame or Remote Frame -> bit 1 */
	RxMessage->RTR = (CANx->sFIFOMailBox[Copy_u8FifoNumber].RIR & (u8)0x02) ;
 8000b28:	7afb      	ldrb	r3, [r7, #11]
 8000b2a:	68fa      	ldr	r2, [r7, #12]
 8000b2c:	331b      	adds	r3, #27
 8000b2e:	011b      	lsls	r3, r3, #4
 8000b30:	4413      	add	r3, r2
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	f003 0302 	and.w	r3, r3, #2
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	705a      	strb	r2, [r3, #1]

	/* Get the filter index, [8:15] in RDTR, contains the index of the filter message stored in the mailbox*/
	RxMessage->FMI =  ((CANx->sFIFOMailBox[Copy_u8FifoNumber].RDTR >> 8) & (u8)0xFF) ;
 8000b40:	7afb      	ldrb	r3, [r7, #11]
 8000b42:	68fa      	ldr	r2, [r7, #12]
 8000b44:	331b      	adds	r3, #27
 8000b46:	011b      	lsls	r3, r3, #4
 8000b48:	4413      	add	r3, r2
 8000b4a:	3304      	adds	r3, #4
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	0a1b      	lsrs	r3, r3, #8
 8000b50:	b2da      	uxtb	r2, r3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	745a      	strb	r2, [r3, #17]


	if (RxMessage->IDE == 0X00) /* The message is standard 11bit identfier */
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d109      	bne.n	8000b72 <CAN_VoidReceive+0x8a>
	{
		/* Storing the the 11 bits of the standard frame */
		RxMessage->ID = ( CANx->sFIFOMailBox[Copy_u8FifoNumber].RIR >> 21) & ((u32)0x000007FF);
 8000b5e:	7afb      	ldrb	r3, [r7, #11]
 8000b60:	68fa      	ldr	r2, [r7, #12]
 8000b62:	331b      	adds	r3, #27
 8000b64:	011b      	lsls	r3, r3, #4
 8000b66:	4413      	add	r3, r2
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	0d5a      	lsrs	r2, r3, #21
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	e008      	b.n	8000b84 <CAN_VoidReceive+0x9c>

	}
	else /* Extended */
	{
		/* Storing the the 28 bits of the standard frame -> [0:17]  ,  [21:31] */
		RxMessage->ID = ( CANx->sFIFOMailBox[Copy_u8FifoNumber].RIR >> 3 ) & ((u32)0x1FFFFFFF) ;
 8000b72:	7afb      	ldrb	r3, [r7, #11]
 8000b74:	68fa      	ldr	r2, [r7, #12]
 8000b76:	331b      	adds	r3, #27
 8000b78:	011b      	lsls	r3, r3, #4
 8000b7a:	4413      	add	r3, r2
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	08da      	lsrs	r2, r3, #3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	605a      	str	r2, [r3, #4]
	}



	/* Looping over the data bytes */
	for (Local_u8ReceivDataCounter = 0;  Local_u8ReceivDataCounter< RxMessage->DATA_LENGHT; Local_u8ReceivDataCounter++)
 8000b84:	2300      	movs	r3, #0
 8000b86:	75fb      	strb	r3, [r7, #23]
 8000b88:	e027      	b.n	8000bda <CAN_VoidReceive+0xf2>
	{
		if (Local_u8ReceivDataCounter < 4)
 8000b8a:	7dfb      	ldrb	r3, [r7, #23]
 8000b8c:	2b03      	cmp	r3, #3
 8000b8e:	d810      	bhi.n	8000bb2 <CAN_VoidReceive+0xca>
		{
			/* Get the LSB bytes in the low register as the counter is less than 4 */
			RxMessage->DATA[Local_u8ReceivDataCounter] = (CANx->sFIFOMailBox[Copy_u8FifoNumber].RDLR >> (Local_u8ReceivDataCounter* 8))  & 0xFF;
 8000b90:	7afb      	ldrb	r3, [r7, #11]
 8000b92:	68fa      	ldr	r2, [r7, #12]
 8000b94:	011b      	lsls	r3, r3, #4
 8000b96:	4413      	add	r3, r2
 8000b98:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	7dfb      	ldrb	r3, [r7, #23]
 8000ba0:	00db      	lsls	r3, r3, #3
 8000ba2:	40da      	lsrs	r2, r3
 8000ba4:	7dfb      	ldrb	r3, [r7, #23]
 8000ba6:	b2d1      	uxtb	r1, r2
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	4413      	add	r3, r2
 8000bac:	460a      	mov	r2, r1
 8000bae:	725a      	strb	r2, [r3, #9]
 8000bb0:	e010      	b.n	8000bd4 <CAN_VoidReceive+0xec>
		}
		else
		{
			/* Get the MSB bytes in the HIGH register as the counter is more than 4 */
			RxMessage->DATA[Local_u8ReceivDataCounter] = (CANx->sFIFOMailBox[Copy_u8FifoNumber].RDHR >> ((Local_u8ReceivDataCounter - 4) * 8)) & 0xFF;
 8000bb2:	7afb      	ldrb	r3, [r7, #11]
 8000bb4:	68fa      	ldr	r2, [r7, #12]
 8000bb6:	011b      	lsls	r3, r3, #4
 8000bb8:	4413      	add	r3, r2
 8000bba:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	7dfb      	ldrb	r3, [r7, #23]
 8000bc2:	3b04      	subs	r3, #4
 8000bc4:	00db      	lsls	r3, r3, #3
 8000bc6:	40da      	lsrs	r2, r3
 8000bc8:	7dfb      	ldrb	r3, [r7, #23]
 8000bca:	b2d1      	uxtb	r1, r2
 8000bcc:	687a      	ldr	r2, [r7, #4]
 8000bce:	4413      	add	r3, r2
 8000bd0:	460a      	mov	r2, r1
 8000bd2:	725a      	strb	r2, [r3, #9]
	for (Local_u8ReceivDataCounter = 0;  Local_u8ReceivDataCounter< RxMessage->DATA_LENGHT; Local_u8ReceivDataCounter++)
 8000bd4:	7dfb      	ldrb	r3, [r7, #23]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	75fb      	strb	r3, [r7, #23]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	7a1b      	ldrb	r3, [r3, #8]
 8000bde:	7dfa      	ldrb	r2, [r7, #23]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d3d2      	bcc.n	8000b8a <CAN_VoidReceive+0xa2>
		}
	}

	if (Copy_u8FifoNumber == CAN_FIFO0)
 8000be4:	7afb      	ldrb	r3, [r7, #11]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d106      	bne.n	8000bf8 <CAN_VoidReceive+0x110>
	{
		/* Set bit 5 in RFxR to release FIFO */
		SET_BIT(CANx->RF0R, CAN_RF0R_RFOM0);
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	68db      	ldr	r3, [r3, #12]
 8000bee:	f043 0220 	orr.w	r2, r3, #32
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	60da      	str	r2, [r3, #12]
	}
	else
	{
		/* Wrong FIFO */
	}
}
 8000bf6:	e008      	b.n	8000c0a <CAN_VoidReceive+0x122>
	else if ( Copy_u8FifoNumber == CAN_FIFO1)
 8000bf8:	7afb      	ldrb	r3, [r7, #11]
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d105      	bne.n	8000c0a <CAN_VoidReceive+0x122>
		SET_BIT(CANx->RF1R, CAN_RF1R_RFOM1);
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	691b      	ldr	r3, [r3, #16]
 8000c02:	f043 0220 	orr.w	r2, r3, #32
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	611a      	str	r2, [r3, #16]
}
 8000c0a:	bf00      	nop
 8000c0c:	371c      	adds	r7, #28
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr

08000c14 <CAN_VoidTransmit>:
 * @param CANx
 * @param TxMessage
 * @return
 */
u8 CAN_VoidTransmit(CAN_TypeDef* CANx, CanTxMsg*  TxMessage)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]
	u8 Local_u8TransMailboxNumber = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	73fb      	strb	r3, [r7, #15]


	/* Pooling on the Transmit mailbox 0 to be empty */
	while(!(CAN1->TSR & CAN_TSR_TME0));
 8000c22:	bf00      	nop
 8000c24:	4b55      	ldr	r3, [pc, #340]	; (8000d7c <CAN_VoidTransmit+0x168>)
 8000c26:	689b      	ldr	r3, [r3, #8]
 8000c28:	f003 031a 	and.w	r3, r3, #26
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d0f9      	beq.n	8000c24 <CAN_VoidTransmit+0x10>

	/* Reseting the TX mailbox register */
	CANx->sTxMailBox[Local_u8TransMailboxNumber].TIR = 0;
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	3318      	adds	r3, #24
 8000c36:	011b      	lsls	r3, r3, #4
 8000c38:	4413      	add	r3, r2
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]

	/* Setting the IDE and RTR of the frame to be transmitted */
	CANx->sTxMailBox[Local_u8TransMailboxNumber].TIR |= (TxMessage->IDE << 2) | (TxMessage->RTR << 1 ) ;
 8000c3e:	7bfb      	ldrb	r3, [r7, #15]
 8000c40:	687a      	ldr	r2, [r7, #4]
 8000c42:	3318      	adds	r3, #24
 8000c44:	011b      	lsls	r3, r3, #4
 8000c46:	4413      	add	r3, r2
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	0099      	lsls	r1, r3, #2
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	785b      	ldrb	r3, [r3, #1]
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	430b      	orrs	r3, r1
 8000c58:	4619      	mov	r1, r3
 8000c5a:	7bfb      	ldrb	r3, [r7, #15]
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	6879      	ldr	r1, [r7, #4]
 8000c60:	3318      	adds	r3, #24
 8000c62:	011b      	lsls	r3, r3, #4
 8000c64:	440b      	add	r3, r1
 8000c66:	601a      	str	r2, [r3, #0]


	if (TxMessage->IDE)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d010      	beq.n	8000c92 <CAN_VoidTransmit+0x7e>
	{
		/* Standard */
		CANx->sTxMailBox[Local_u8TransMailboxNumber].TIR |= (TxMessage->ID << 21);
 8000c70:	7bfb      	ldrb	r3, [r7, #15]
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	3318      	adds	r3, #24
 8000c76:	011b      	lsls	r3, r3, #4
 8000c78:	4413      	add	r3, r2
 8000c7a:	6819      	ldr	r1, [r3, #0]
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	055a      	lsls	r2, r3, #21
 8000c82:	7bfb      	ldrb	r3, [r7, #15]
 8000c84:	430a      	orrs	r2, r1
 8000c86:	6879      	ldr	r1, [r7, #4]
 8000c88:	3318      	adds	r3, #24
 8000c8a:	011b      	lsls	r3, r3, #4
 8000c8c:	440b      	add	r3, r1
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	e00f      	b.n	8000cb2 <CAN_VoidTransmit+0x9e>
	}
	else
	{
		/* Extended */
		CANx->sTxMailBox[Local_u8TransMailboxNumber].TIR |= (TxMessage->ID << 3);
 8000c92:	7bfb      	ldrb	r3, [r7, #15]
 8000c94:	687a      	ldr	r2, [r7, #4]
 8000c96:	3318      	adds	r3, #24
 8000c98:	011b      	lsls	r3, r3, #4
 8000c9a:	4413      	add	r3, r2
 8000c9c:	6819      	ldr	r1, [r3, #0]
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	00da      	lsls	r2, r3, #3
 8000ca4:	7bfb      	ldrb	r3, [r7, #15]
 8000ca6:	430a      	orrs	r2, r1
 8000ca8:	6879      	ldr	r1, [r7, #4]
 8000caa:	3318      	adds	r3, #24
 8000cac:	011b      	lsls	r3, r3, #4
 8000cae:	440b      	add	r3, r1
 8000cb0:	601a      	str	r2, [r3, #0]
	}

	/* Anding TDTR with halfword mask then oring with the data length  */
	CANx->sTxMailBox[Local_u8TransMailboxNumber].TDTR = (CANx->sTxMailBox[Local_u8TransMailboxNumber].TDTR & ((u8)(~0x0f)))
 8000cb2:	7bfb      	ldrb	r3, [r7, #15]
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	3318      	adds	r3, #24
 8000cb8:	011b      	lsls	r3, r3, #4
 8000cba:	4413      	add	r3, r2
 8000cbc:	3304      	adds	r3, #4
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
					                                               | TxMessage->DATA_LENGHT;
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	7a1b      	ldrb	r3, [r3, #8]
 8000cc8:	4619      	mov	r1, r3
	CANx->sTxMailBox[Local_u8TransMailboxNumber].TDTR = (CANx->sTxMailBox[Local_u8TransMailboxNumber].TDTR & ((u8)(~0x0f)))
 8000cca:	7bfb      	ldrb	r3, [r7, #15]
					                                               | TxMessage->DATA_LENGHT;
 8000ccc:	430a      	orrs	r2, r1
	CANx->sTxMailBox[Local_u8TransMailboxNumber].TDTR = (CANx->sTxMailBox[Local_u8TransMailboxNumber].TDTR & ((u8)(~0x0f)))
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	3318      	adds	r3, #24
 8000cd2:	011b      	lsls	r3, r3, #4
 8000cd4:	440b      	add	r3, r1
 8000cd6:	3304      	adds	r3, #4
 8000cd8:	601a      	str	r2, [r3, #0]


	/* Emptying the Data registers */
	CANx->sTxMailBox[Local_u8TransMailboxNumber].TDLR = 0;
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	011b      	lsls	r3, r3, #4
 8000ce0:	4413      	add	r3, r2
 8000ce2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
	CANx->sTxMailBox[Local_u8TransMailboxNumber].TDHR = 0;
 8000cea:	7bfb      	ldrb	r3, [r7, #15]
 8000cec:	687a      	ldr	r2, [r7, #4]
 8000cee:	011b      	lsls	r3, r3, #4
 8000cf0:	4413      	add	r3, r2
 8000cf2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]

	WRITE_REG(CANx->sTxMailBox[Local_u8TransMailboxNumber].TDHR,
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	7c1b      	ldrb	r3, [r3, #16]
 8000cfe:	061a      	lsls	r2, r3, #24
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	7bdb      	ldrb	r3, [r3, #15]
 8000d04:	041b      	lsls	r3, r3, #16
 8000d06:	431a      	orrs	r2, r3
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	7b9b      	ldrb	r3, [r3, #14]
 8000d0c:	021b      	lsls	r3, r3, #8
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	683a      	ldr	r2, [r7, #0]
 8000d12:	7b52      	ldrb	r2, [r2, #13]
 8000d14:	431a      	orrs	r2, r3
 8000d16:	7bfb      	ldrb	r3, [r7, #15]
 8000d18:	4611      	mov	r1, r2
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	011b      	lsls	r3, r3, #4
 8000d1e:	4413      	add	r3, r2
 8000d20:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000d24:	6019      	str	r1, [r3, #0]
						(TxMessage->DATA[6] << 16) |
						(TxMessage->DATA[5] << 8 ) |
						(TxMessage->DATA[4]));


	WRITE_REG(CANx->sTxMailBox[Local_u8TransMailboxNumber].TDLR,
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	7b1b      	ldrb	r3, [r3, #12]
 8000d2a:	061a      	lsls	r2, r3, #24
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	7adb      	ldrb	r3, [r3, #11]
 8000d30:	041b      	lsls	r3, r3, #16
 8000d32:	431a      	orrs	r2, r3
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	7a9b      	ldrb	r3, [r3, #10]
 8000d38:	021b      	lsls	r3, r3, #8
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	683a      	ldr	r2, [r7, #0]
 8000d3e:	7a52      	ldrb	r2, [r2, #9]
 8000d40:	431a      	orrs	r2, r3
 8000d42:	7bfb      	ldrb	r3, [r7, #15]
 8000d44:	4611      	mov	r1, r2
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	011b      	lsls	r3, r3, #4
 8000d4a:	4413      	add	r3, r2
 8000d4c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000d50:	6019      	str	r1, [r3, #0]
//	}



	/* Making a request to start transmit */
	SET_BIT(CANx->sTxMailBox[Local_u8TransMailboxNumber].TIR, CAN_TI0R_TXRQ);
 8000d52:	7bfb      	ldrb	r3, [r7, #15]
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	3318      	adds	r3, #24
 8000d58:	011b      	lsls	r3, r3, #4
 8000d5a:	4413      	add	r3, r2
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	7bfb      	ldrb	r3, [r7, #15]
 8000d60:	f042 0201 	orr.w	r2, r2, #1
 8000d64:	6879      	ldr	r1, [r7, #4]
 8000d66:	3318      	adds	r3, #24
 8000d68:	011b      	lsls	r3, r3, #4
 8000d6a:	440b      	add	r3, r1
 8000d6c:	601a      	str	r2, [r3, #0]


	 return Local_u8TransMailboxNumber;
 8000d6e:	7bfb      	ldrb	r3, [r7, #15]

}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3714      	adds	r7, #20
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	40006400 	.word	0x40006400

08000d80 <Can_voidSynRecieveArray>:
 * Receive Array of Data
 * @param Copy_u8DataPtr
 * @param Copy_u8DataLenght
 */
void Can_voidSynRecieveArray( u8 *Copy_u8DataPtr ,  u8 Copy_u8DataLenght)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b088      	sub	sp, #32
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	460b      	mov	r3, r1
 8000d8a:	70fb      	strb	r3, [r7, #3]
	u8 counter1 = ZERO;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	777b      	strb	r3, [r7, #29]
	u8 Frame_Number = (Copy_u8DataLenght / FRAME_DATA);
 8000d90:	78fb      	ldrb	r3, [r7, #3]
 8000d92:	08db      	lsrs	r3, r3, #3
 8000d94:	773b      	strb	r3, [r7, #28]


	for(u8 Data_Counter1 = ZERO ; Data_Counter1 < Frame_Number ; Data_Counter1++)
 8000d96:	2300      	movs	r3, #0
 8000d98:	77fb      	strb	r3, [r7, #31]
 8000d9a:	e022      	b.n	8000de2 <Can_voidSynRecieveArray+0x62>
	{
		CanRxMsg   RxMessage;


		/* Pooling on FIFO 0 to be Pending */
		while (!(CAN1->RF0R & CAN_RF0R_FMP0));
 8000d9c:	bf00      	nop
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <Can_voidSynRecieveArray+0x74>)
 8000da0:	68db      	ldr	r3, [r3, #12]
 8000da2:	f003 0303 	and.w	r3, r3, #3
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d0f9      	beq.n	8000d9e <Can_voidSynRecieveArray+0x1e>

		/* Receving the Data in the Can messagee struct */
		CAN_VoidReceive(CAN1 , CAN_FIFO0 ,&RxMessage);
 8000daa:	f107 0308 	add.w	r3, r7, #8
 8000dae:	461a      	mov	r2, r3
 8000db0:	2100      	movs	r1, #0
 8000db2:	4810      	ldr	r0, [pc, #64]	; (8000df4 <Can_voidSynRecieveArray+0x74>)
 8000db4:	f7ff fe98 	bl	8000ae8 <CAN_VoidReceive>

		for( u8 Data_Counter = ZERO ; Data_Counter < FRAME_DATA ; Data_Counter++)
 8000db8:	2300      	movs	r3, #0
 8000dba:	77bb      	strb	r3, [r7, #30]
 8000dbc:	e00b      	b.n	8000dd6 <Can_voidSynRecieveArray+0x56>
		{
			Copy_u8DataPtr[counter1]= RxMessage.DATA[Data_Counter];
 8000dbe:	7fba      	ldrb	r2, [r7, #30]
 8000dc0:	7f7b      	ldrb	r3, [r7, #29]
 8000dc2:	6879      	ldr	r1, [r7, #4]
 8000dc4:	440b      	add	r3, r1
 8000dc6:	3220      	adds	r2, #32
 8000dc8:	443a      	add	r2, r7
 8000dca:	f812 2c0f 	ldrb.w	r2, [r2, #-15]
 8000dce:	701a      	strb	r2, [r3, #0]
		for( u8 Data_Counter = ZERO ; Data_Counter < FRAME_DATA ; Data_Counter++)
 8000dd0:	7fbb      	ldrb	r3, [r7, #30]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	77bb      	strb	r3, [r7, #30]
 8000dd6:	7fbb      	ldrb	r3, [r7, #30]
 8000dd8:	2b07      	cmp	r3, #7
 8000dda:	d9f0      	bls.n	8000dbe <Can_voidSynRecieveArray+0x3e>
	for(u8 Data_Counter1 = ZERO ; Data_Counter1 < Frame_Number ; Data_Counter1++)
 8000ddc:	7ffb      	ldrb	r3, [r7, #31]
 8000dde:	3301      	adds	r3, #1
 8000de0:	77fb      	strb	r3, [r7, #31]
 8000de2:	7ffa      	ldrb	r2, [r7, #31]
 8000de4:	7f3b      	ldrb	r3, [r7, #28]
 8000de6:	429a      	cmp	r2, r3
 8000de8:	d3d8      	bcc.n	8000d9c <Can_voidSynRecieveArray+0x1c>
		}

	}
}
 8000dea:	bf00      	nop
 8000dec:	bf00      	nop
 8000dee:	3720      	adds	r7, #32
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40006400 	.word	0x40006400

08000df8 <Can_uint32SynRecieveWord>:
 * @param CANx
 * @param Copy_u8FifoNumber
 * @return
 */
u32 Can_uint32SynRecieveWord(CAN_TypeDef* CANx, u8 Copy_u8FifoNumber)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b088      	sub	sp, #32
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	460b      	mov	r3, r1
 8000e02:	70fb      	strb	r3, [r7, #3]
	u32 Copy_u32Data = ZERO ;
 8000e04:	2300      	movs	r3, #0
 8000e06:	61fb      	str	r3, [r7, #28]

    CanRxMsg   RxMessage;

    /* Pooling on FIFO 0 to be Pending */
    while (!(CAN1->RF0R & CAN_RF0R_FMP0));
 8000e08:	bf00      	nop
 8000e0a:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <Can_uint32SynRecieveWord+0x4c>)
 8000e0c:	68db      	ldr	r3, [r3, #12]
 8000e0e:	f003 0303 	and.w	r3, r3, #3
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d0f9      	beq.n	8000e0a <Can_uint32SynRecieveWord+0x12>

    /* Receving the Data in the Can messagee struct */
    CAN_VoidReceive ( CANx , Copy_u8FifoNumber ,&RxMessage);
 8000e16:	f107 0208 	add.w	r2, r7, #8
 8000e1a:	78fb      	ldrb	r3, [r7, #3]
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f7ff fe62 	bl	8000ae8 <CAN_VoidReceive>

    /* Parsing the 4 bytes in a 32 bit var  */
    Copy_u32Data = (u32)((RxMessage.DATA[BYTE_THREE]<< 24) | (RxMessage.DATA[BYTE_TWO]<< 16) | (RxMessage.DATA[BYTE_ONE]<< 8) | (RxMessage.DATA[BYTE_ZERO]));
 8000e24:	7d3b      	ldrb	r3, [r7, #20]
 8000e26:	061a      	lsls	r2, r3, #24
 8000e28:	7cfb      	ldrb	r3, [r7, #19]
 8000e2a:	041b      	lsls	r3, r3, #16
 8000e2c:	431a      	orrs	r2, r3
 8000e2e:	7cbb      	ldrb	r3, [r7, #18]
 8000e30:	021b      	lsls	r3, r3, #8
 8000e32:	4313      	orrs	r3, r2
 8000e34:	7c7a      	ldrb	r2, [r7, #17]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	61fb      	str	r3, [r7, #28]

    return  Copy_u32Data;
 8000e3a:	69fb      	ldr	r3, [r7, #28]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3720      	adds	r7, #32
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40006400 	.word	0x40006400

08000e48 <Can_u8SynRecieveByte>:
 * @param CANx
 * @param Copy_u8FifoNumber
 * @return
 */
u8 Can_u8SynRecieveByte(CAN_TypeDef* CANx, u8 Copy_u8FifoNumber)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b088      	sub	sp, #32
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	460b      	mov	r3, r1
 8000e52:	70fb      	strb	r3, [r7, #3]
	u8 Copy_u8Data = ZERO ;
 8000e54:	2300      	movs	r3, #0
 8000e56:	77fb      	strb	r3, [r7, #31]

	CanRxMsg   RxMessage;

	while (!(CAN1->RF0R & CAN_RF0R_FMP0));
 8000e58:	bf00      	nop
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <Can_u8SynRecieveByte+0x3c>)
 8000e5c:	68db      	ldr	r3, [r3, #12]
 8000e5e:	f003 0303 	and.w	r3, r3, #3
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d0f9      	beq.n	8000e5a <Can_u8SynRecieveByte+0x12>

	CAN_VoidReceive ( CANx , Copy_u8FifoNumber ,&RxMessage);
 8000e66:	f107 0208 	add.w	r2, r7, #8
 8000e6a:	78fb      	ldrb	r3, [r7, #3]
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f7ff fe3a 	bl	8000ae8 <CAN_VoidReceive>


	Copy_u8Data = (u8)((RxMessage.DATA[BYTE_ZERO]));
 8000e74:	7c7b      	ldrb	r3, [r7, #17]
 8000e76:	77fb      	strb	r3, [r7, #31]


	return  Copy_u8Data ;
 8000e78:	7ffb      	ldrb	r3, [r7, #31]


}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3720      	adds	r7, #32
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40006400 	.word	0x40006400

08000e88 <MCRC_voidCalculateCrcDirect>:
	   {
	      /*!<TODO: Null pointer detected */
	   }
}
void MCRC_voidCalculateCrcDirect(u32 Copy_u32BaseAddress, u32 Copy_u32WordNumber, u32 * Copy_u32PtrCrc)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b089      	sub	sp, #36	; 0x24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
	   *Copy_u32PtrCrc = 0;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
		u32 Local_u32Crc = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61bb      	str	r3, [r7, #24]
		u16 Local_u16HalfWordH = 0 ;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	82fb      	strh	r3, [r7, #22]
		u16 Local_u16HalfWordL = 0 ;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	82bb      	strh	r3, [r7, #20]
	    u32 * Local_u32PtrToInteger = (u32 *)(Copy_u32BaseAddress);
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	613b      	str	r3, [r7, #16]
	   if(Local_u32PtrToInteger != NULL)
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d037      	beq.n	8000f20 <MCRC_voidCalculateCrcDirect+0x98>
	   {
	      CRC_CR = CRC_RESET;
 8000eb0:	4b1e      	ldr	r3, [pc, #120]	; (8000f2c <MCRC_voidCalculateCrcDirect+0xa4>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	601a      	str	r2, [r3, #0]
	      for(u32 Local_u32WordCounter = 0;Local_u32WordCounter < Copy_u32WordNumber;Local_u32WordCounter++)
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61fb      	str	r3, [r7, #28]
 8000eba:	e029      	b.n	8000f10 <MCRC_voidCalculateCrcDirect+0x88>
	      {
					Local_u16HalfWordL = (*((volatile u8*)(Copy_u32BaseAddress))<<8) | (*((volatile u8*)(Copy_u32BaseAddress+1)));
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	021b      	lsls	r3, r3, #8
 8000ec4:	b21a      	sxth	r2, r3
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	b21b      	sxth	r3, r3
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	b21b      	sxth	r3, r3
 8000ed4:	82bb      	strh	r3, [r7, #20]
					Local_u16HalfWordH = (*((volatile u8*)(Copy_u32BaseAddress+2))<<8) | (*((volatile u8*)(Copy_u32BaseAddress+3)));
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	3302      	adds	r3, #2
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	021b      	lsls	r3, r3, #8
 8000ee0:	b21a      	sxth	r2, r3
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	3303      	adds	r3, #3
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	b21b      	sxth	r3, r3
 8000eec:	4313      	orrs	r3, r2
 8000eee:	b21b      	sxth	r3, r3
 8000ef0:	82fb      	strh	r3, [r7, #22]
					CRC_DR = (Local_u16HalfWordL<<16)|Local_u16HalfWordH;
 8000ef2:	8abb      	ldrh	r3, [r7, #20]
 8000ef4:	041a      	lsls	r2, r3, #16
 8000ef6:	8afb      	ldrh	r3, [r7, #22]
 8000ef8:	431a      	orrs	r2, r3
 8000efa:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <MCRC_voidCalculateCrcDirect+0xa8>)
 8000efc:	601a      	str	r2, [r3, #0]
					Local_u32Crc = CRC_DR;
 8000efe:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <MCRC_voidCalculateCrcDirect+0xa8>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	61bb      	str	r3, [r7, #24]
					Copy_u32BaseAddress+=WORD_SIZE_IN_BYTE;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	3304      	adds	r3, #4
 8000f08:	60fb      	str	r3, [r7, #12]
	      for(u32 Local_u32WordCounter = 0;Local_u32WordCounter < Copy_u32WordNumber;Local_u32WordCounter++)
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	61fb      	str	r3, [r7, #28]
 8000f10:	69fa      	ldr	r2, [r7, #28]
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d3d1      	bcc.n	8000ebc <MCRC_voidCalculateCrcDirect+0x34>
	      }
		  *Copy_u32PtrCrc = CRC_DR;
 8000f18:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <MCRC_voidCalculateCrcDirect+0xa8>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	601a      	str	r2, [r3, #0]
	   }
	   else
	   {
		  /* Null pointer detected */
	   }
}
 8000f20:	bf00      	nop
 8000f22:	3724      	adds	r7, #36	; 0x24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bc80      	pop	{r7}
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	40023008 	.word	0x40023008
 8000f30:	40023000 	.word	0x40023000

08000f34 <Fee_EraseImmediateBlock>:
/**
 *
 * @param Copy_u16PageNumber
 */
void Fee_EraseImmediateBlock(u16 Copy_u16PageNumber)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	80fb      	strh	r3, [r7, #6]
	FLS_voidErasePage(Copy_u16PageNumber);
 8000f3e:	88fb      	ldrh	r3, [r7, #6]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f000 f833 	bl	8000fac <FLS_voidErasePage>
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <Fee_Write>:
 *
 * @param Copy_u32Address
 * @param Copy_u32Data
 */
void Fee_Write(u32 Copy_u32Address, u32 Copy_u32Data)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
 8000f56:	6039      	str	r1, [r7, #0]
	FLS_u8ProgramOneWordFlash(Copy_u32Address, Copy_u32Data);
 8000f58:	6839      	ldr	r1, [r7, #0]
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f000 f804 	bl	8000f68 <FLS_u8ProgramOneWordFlash>
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <FLS_u8ProgramOneWordFlash>:
 * @param Copy_u32Address
 * @param Copy_u32Data
 * @return
 */
void FLS_u8ProgramOneWordFlash(u32 Copy_u32Address, u32 Copy_u32Data)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
	 u32  Local_u32StoredData = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]
	 u32 Local_u32Address = Copy_u32Address;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	613b      	str	r3, [r7, #16]
	 u16 Local_u16LeastHalfWord = (u16)(FLS_CATCH_LEAST_HALF_WORD)  & (Copy_u32Data);
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	81fb      	strh	r3, [r7, #14]
	 u16 Local_u16MostHalfWord  = (u16)((Copy_u32Data) >> TWO_BYTES_IN_BITS);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	0c1b      	lsrs	r3, r3, #16
 8000f82:	81bb      	strh	r3, [r7, #12]
	 // Check that no main Flash memory operation is ongoing.
	 FLS_voidProgramHalfWordFlash(Copy_u32Address, Local_u16LeastHalfWord);
 8000f84:	89fb      	ldrh	r3, [r7, #14]
 8000f86:	4619      	mov	r1, r3
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f000 f8c1 	bl	8001110 <FLS_voidProgramHalfWordFlash>
	 FLS_voidProgramHalfWordFlash(Copy_u32Address + TWO_BYTE, Local_u16MostHalfWord);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	3302      	adds	r3, #2
 8000f92:	89ba      	ldrh	r2, [r7, #12]
 8000f94:	4611      	mov	r1, r2
 8000f96:	4618      	mov	r0, r3
 8000f98:	f000 f8ba 	bl	8001110 <FLS_voidProgramHalfWordFlash>
	 Local_u32StoredData = *((volatile u16*)(Local_u32Address));
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	881b      	ldrh	r3, [r3, #0]
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	617b      	str	r3, [r7, #20]
}
 8000fa4:	bf00      	nop
 8000fa6:	3718      	adds	r7, #24
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <FLS_voidErasePage>:
/**
 * This function is used to ERASE code on the flash using flash driver peripheral
 * @param Copy_u16PageNumber
 */
void FLS_voidErasePage(u16 Copy_u16PageNumber)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	80fb      	strh	r3, [r7, #6]
	 SET_BIT(FLS->CR,LOCK);
 8000fb6:	4b25      	ldr	r3, [pc, #148]	; (800104c <FLS_voidErasePage+0xa0>)
 8000fb8:	691b      	ldr	r3, [r3, #16]
 8000fba:	4a24      	ldr	r2, [pc, #144]	; (800104c <FLS_voidErasePage+0xa0>)
 8000fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fc0:	6113      	str	r3, [r2, #16]
	  // Check that no main Flash memory operation is ongoing.
	  while(GET_BIT(FLS->SR, BSY) == SET);
 8000fc2:	bf00      	nop
 8000fc4:	4b21      	ldr	r3, [pc, #132]	; (800104c <FLS_voidErasePage+0xa0>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	f003 0301 	and.w	r3, r3, #1
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d0f9      	beq.n	8000fc4 <FLS_voidErasePage+0x18>
	  // Check if the flash locked or not.
	  if(GET_BIT(FLS->CR, LOCK) == SET)
 8000fd0:	4b1e      	ldr	r3, [pc, #120]	; (800104c <FLS_voidErasePage+0xa0>)
 8000fd2:	691b      	ldr	r3, [r3, #16]
 8000fd4:	09db      	lsrs	r3, r3, #7
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d105      	bne.n	8000fea <FLS_voidErasePage+0x3e>
	  {
		 // Perform Unlock Sequence To Unlock FLS Peripheral.
		 FLS->KEYR = FLS_KEY_1;
 8000fde:	4b1b      	ldr	r3, [pc, #108]	; (800104c <FLS_voidErasePage+0xa0>)
 8000fe0:	4a1b      	ldr	r2, [pc, #108]	; (8001050 <FLS_voidErasePage+0xa4>)
 8000fe2:	605a      	str	r2, [r3, #4]
		 FLS->KEYR = FLS_KEY_2;
 8000fe4:	4b19      	ldr	r3, [pc, #100]	; (800104c <FLS_voidErasePage+0xa0>)
 8000fe6:	4a1b      	ldr	r2, [pc, #108]	; (8001054 <FLS_voidErasePage+0xa8>)
 8000fe8:	605a      	str	r2, [r3, #4]
	  }
	  // Set the PER bit in the FLASH_CR register to erase page.
	  SET_BIT(FLS->CR, PER);
 8000fea:	4b18      	ldr	r3, [pc, #96]	; (800104c <FLS_voidErasePage+0xa0>)
 8000fec:	691b      	ldr	r3, [r3, #16]
 8000fee:	4a17      	ldr	r2, [pc, #92]	; (800104c <FLS_voidErasePage+0xa0>)
 8000ff0:	f043 0302 	orr.w	r3, r3, #2
 8000ff4:	6113      	str	r3, [r2, #16]
	  // Program the FLASH_AR register to select a page to erase.
	  FLS->AR = FLASH_START_ADDRESS + (u32)(Copy_u16PageNumber * PAGE_SIZE);
 8000ff6:	88fb      	ldrh	r3, [r7, #6]
 8000ff8:	029b      	lsls	r3, r3, #10
 8000ffa:	4a14      	ldr	r2, [pc, #80]	; (800104c <FLS_voidErasePage+0xa0>)
 8000ffc:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001000:	6153      	str	r3, [r2, #20]
	  // Set the STRT bit in the FLASH_CR register to start erase operation.
	  SET_BIT(FLS->CR, STRT);
 8001002:	4b12      	ldr	r3, [pc, #72]	; (800104c <FLS_voidErasePage+0xa0>)
 8001004:	691b      	ldr	r3, [r3, #16]
 8001006:	4a11      	ldr	r2, [pc, #68]	; (800104c <FLS_voidErasePage+0xa0>)
 8001008:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800100c:	6113      	str	r3, [r2, #16]
	  /*Wait for the BSY bit to be reset*/
	  while(GET_BIT(FLS->SR, BSY) == SET);
 800100e:	bf00      	nop
 8001010:	4b0e      	ldr	r3, [pc, #56]	; (800104c <FLS_voidErasePage+0xa0>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	f003 0301 	and.w	r3, r3, #1
 8001018:	2b01      	cmp	r3, #1
 800101a:	d0f9      	beq.n	8001010 <FLS_voidErasePage+0x64>
	  // EOP
	  SET_BIT(FLS->SR, EOP);
 800101c:	4b0b      	ldr	r3, [pc, #44]	; (800104c <FLS_voidErasePage+0xa0>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	4a0a      	ldr	r2, [pc, #40]	; (800104c <FLS_voidErasePage+0xa0>)
 8001022:	f043 0320 	orr.w	r3, r3, #32
 8001026:	60d3      	str	r3, [r2, #12]
	  CLR_BIT(FLS->CR, PER);
 8001028:	4b08      	ldr	r3, [pc, #32]	; (800104c <FLS_voidErasePage+0xa0>)
 800102a:	691b      	ldr	r3, [r3, #16]
 800102c:	4a07      	ldr	r2, [pc, #28]	; (800104c <FLS_voidErasePage+0xa0>)
 800102e:	f023 0302 	bic.w	r3, r3, #2
 8001032:	6113      	str	r3, [r2, #16]
	  SET_BIT(FLS->CR, LOCK);
 8001034:	4b05      	ldr	r3, [pc, #20]	; (800104c <FLS_voidErasePage+0xa0>)
 8001036:	691b      	ldr	r3, [r3, #16]
 8001038:	4a04      	ldr	r2, [pc, #16]	; (800104c <FLS_voidErasePage+0xa0>)
 800103a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800103e:	6113      	str	r3, [r2, #16]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	40022000 	.word	0x40022000
 8001050:	45670123 	.word	0x45670123
 8001054:	cdef89ab 	.word	0xcdef89ab

08001058 <FLS_voidEraseAppArea>:
 * This function is used to ERASE Area on the flash using flash driver peripheral
 * @param Copy_u16FirstPageNumber
 * @param Copy_u16LastPageNumber
 */
void FLS_voidEraseAppArea(u16 Copy_u16FirstPageNumber, u16 Copy_u16LastPageNumber)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	460a      	mov	r2, r1
 8001062:	80fb      	strh	r3, [r7, #6]
 8001064:	4613      	mov	r3, r2
 8001066:	80bb      	strh	r3, [r7, #4]
	   for(u16 Local_u8Page = Copy_u16FirstPageNumber;Local_u8Page <= Copy_u16LastPageNumber;Local_u8Page++)
 8001068:	88fb      	ldrh	r3, [r7, #6]
 800106a:	81fb      	strh	r3, [r7, #14]
 800106c:	e006      	b.n	800107c <FLS_voidEraseAppArea+0x24>
	   {
	      FLS_voidErasePage(Local_u8Page);
 800106e:	89fb      	ldrh	r3, [r7, #14]
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ff9b 	bl	8000fac <FLS_voidErasePage>
	   for(u16 Local_u8Page = Copy_u16FirstPageNumber;Local_u8Page <= Copy_u16LastPageNumber;Local_u8Page++)
 8001076:	89fb      	ldrh	r3, [r7, #14]
 8001078:	3301      	adds	r3, #1
 800107a:	81fb      	strh	r3, [r7, #14]
 800107c:	89fa      	ldrh	r2, [r7, #14]
 800107e:	88bb      	ldrh	r3, [r7, #4]
 8001080:	429a      	cmp	r2, r3
 8001082:	d9f4      	bls.n	800106e <FLS_voidEraseAppArea+0x16>
	   }
}
 8001084:	bf00      	nop
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <FLS_u32ReadWord>:
 * This function is used to Read Word on the flash using flash driver peripheral
 * @param Copy_DataAddress
 * @return
 */
u32 FLS_u32ReadWord(u32 Copy_DataAddress)
{
 800108e:	b480      	push	{r7}
 8001090:	b085      	sub	sp, #20
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
	u32 Local_u32Data = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
	Local_u32Data = *((volatile u32*)(Copy_DataAddress));
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	60fb      	str	r3, [r7, #12]
	return Local_u32Data;
 80010a0:	68fb      	ldr	r3, [r7, #12]
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3714      	adds	r7, #20
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr

080010ac <FLS_voidProgramFlashBuffer>:

void FLS_voidProgramFlashBuffer(u32 Copy_u32Address, u8* Copy_u16Code, u16 Copy_u16Length)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	4613      	mov	r3, r2
 80010b8:	80fb      	strh	r3, [r7, #6]
	u16 Local_Word = 0 ;
 80010ba:	2300      	movs	r3, #0
 80010bc:	82bb      	strh	r3, [r7, #20]
	u16 Local_Counter = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	82fb      	strh	r3, [r7, #22]

	/* Write to flash */
	for (Local_Counter = 0 ; Local_Counter < Copy_u16Length  ;  Local_Counter+= 2 )
 80010c2:	2300      	movs	r3, #0
 80010c4:	82fb      	strh	r3, [r7, #22]
 80010c6:	e019      	b.n	80010fc <FLS_voidProgramFlashBuffer+0x50>
	{
		Local_Word = Copy_u16Code[Local_Counter] | (Copy_u16Code[Local_Counter+1] << 8) ;
 80010c8:	8afb      	ldrh	r3, [r7, #22]
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	4413      	add	r3, r2
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	b21a      	sxth	r2, r3
 80010d2:	8afb      	ldrh	r3, [r7, #22]
 80010d4:	3301      	adds	r3, #1
 80010d6:	68b9      	ldr	r1, [r7, #8]
 80010d8:	440b      	add	r3, r1
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	021b      	lsls	r3, r3, #8
 80010de:	b21b      	sxth	r3, r3
 80010e0:	4313      	orrs	r3, r2
 80010e2:	b21b      	sxth	r3, r3
 80010e4:	82bb      	strh	r3, [r7, #20]
		FLS_voidProgramHalfWordFlash(Copy_u32Address , Local_Word);
 80010e6:	8abb      	ldrh	r3, [r7, #20]
 80010e8:	4619      	mov	r1, r3
 80010ea:	68f8      	ldr	r0, [r7, #12]
 80010ec:	f000 f810 	bl	8001110 <FLS_voidProgramHalfWordFlash>
		Copy_u32Address += 2 ;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	3302      	adds	r3, #2
 80010f4:	60fb      	str	r3, [r7, #12]
	for (Local_Counter = 0 ; Local_Counter < Copy_u16Length  ;  Local_Counter+= 2 )
 80010f6:	8afb      	ldrh	r3, [r7, #22]
 80010f8:	3302      	adds	r3, #2
 80010fa:	82fb      	strh	r3, [r7, #22]
 80010fc:	8afa      	ldrh	r2, [r7, #22]
 80010fe:	88fb      	ldrh	r3, [r7, #6]
 8001100:	429a      	cmp	r2, r3
 8001102:	d3e1      	bcc.n	80010c8 <FLS_voidProgramFlashBuffer+0x1c>
	}

}
 8001104:	bf00      	nop
 8001106:	bf00      	nop
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <FLS_voidProgramHalfWordFlash>:

void FLS_voidProgramHalfWordFlash(u32 Copy_u32Address, u16 Copy_u16Data)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	460b      	mov	r3, r1
 800111a:	807b      	strh	r3, [r7, #2]
	// Check that no main Flash memory operation is ongoing.
		/* Reading the Busy Bit */
	   while(GET_BIT(FLS->SR, BSY) == SET);
 800111c:	bf00      	nop
 800111e:	4b1d      	ldr	r3, [pc, #116]	; (8001194 <FLS_voidProgramHalfWordFlash+0x84>)
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	2b01      	cmp	r3, #1
 8001128:	d0f9      	beq.n	800111e <FLS_voidProgramHalfWordFlash+0xe>
	   // Check if the flash locked or not.
	   /* Reading the lock bit */
	   if(GET_BIT(FLS->CR, LOCK) == SET)
 800112a:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <FLS_voidProgramHalfWordFlash+0x84>)
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	09db      	lsrs	r3, r3, #7
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	2b01      	cmp	r3, #1
 8001136:	d105      	bne.n	8001144 <FLS_voidProgramHalfWordFlash+0x34>
	   {
	      // Perform Unlock Sequence To Unlock FLS Peripheral.
	      FLS->KEYR = FLS_KEY_1;
 8001138:	4b16      	ldr	r3, [pc, #88]	; (8001194 <FLS_voidProgramHalfWordFlash+0x84>)
 800113a:	4a17      	ldr	r2, [pc, #92]	; (8001198 <FLS_voidProgramHalfWordFlash+0x88>)
 800113c:	605a      	str	r2, [r3, #4]
	      FLS->KEYR = FLS_KEY_2;
 800113e:	4b15      	ldr	r3, [pc, #84]	; (8001194 <FLS_voidProgramHalfWordFlash+0x84>)
 8001140:	4a16      	ldr	r2, [pc, #88]	; (800119c <FLS_voidProgramHalfWordFlash+0x8c>)
 8001142:	605a      	str	r2, [r3, #4]
	   }
	   // Set the PG bit in the FLASH_CR register.
	   SET_BIT(FLS->CR, PG);
 8001144:	4b13      	ldr	r3, [pc, #76]	; (8001194 <FLS_voidProgramHalfWordFlash+0x84>)
 8001146:	691b      	ldr	r3, [r3, #16]
 8001148:	4a12      	ldr	r2, [pc, #72]	; (8001194 <FLS_voidProgramHalfWordFlash+0x84>)
 800114a:	f043 0301 	orr.w	r3, r3, #1
 800114e:	6113      	str	r3, [r2, #16]
	   // Perform the data write (half-word) at the desired address.
	   *((volatile u16*)(Copy_u32Address)) = Copy_u16Data;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	887a      	ldrh	r2, [r7, #2]
 8001154:	801a      	strh	r2, [r3, #0]
	   // Wait for the BSY bit to be reset.
	   while(GET_BIT(FLS->SR, BSY) == SET)
 8001156:	bf00      	nop
 8001158:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <FLS_voidProgramHalfWordFlash+0x84>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	f003 0301 	and.w	r3, r3, #1
 8001160:	2b01      	cmp	r3, #1
 8001162:	d0f9      	beq.n	8001158 <FLS_voidProgramHalfWordFlash+0x48>
	   {

	   }
	   // EOP
		 SET_BIT(FLS->SR, EOP);
 8001164:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <FLS_voidProgramHalfWordFlash+0x84>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	4a0a      	ldr	r2, [pc, #40]	; (8001194 <FLS_voidProgramHalfWordFlash+0x84>)
 800116a:	f043 0320 	orr.w	r3, r3, #32
 800116e:	60d3      	str	r3, [r2, #12]
		 CLR_BIT(FLS->CR, PG);
 8001170:	4b08      	ldr	r3, [pc, #32]	; (8001194 <FLS_voidProgramHalfWordFlash+0x84>)
 8001172:	691b      	ldr	r3, [r3, #16]
 8001174:	4a07      	ldr	r2, [pc, #28]	; (8001194 <FLS_voidProgramHalfWordFlash+0x84>)
 8001176:	f023 0301 	bic.w	r3, r3, #1
 800117a:	6113      	str	r3, [r2, #16]
		 SET_BIT(FLS->CR, LOCK);
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <FLS_voidProgramHalfWordFlash+0x84>)
 800117e:	691b      	ldr	r3, [r3, #16]
 8001180:	4a04      	ldr	r2, [pc, #16]	; (8001194 <FLS_voidProgramHalfWordFlash+0x84>)
 8001182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001186:	6113      	str	r3, [r2, #16]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	40022000 	.word	0x40022000
 8001198:	45670123 	.word	0x45670123
 800119c:	cdef89ab 	.word	0xcdef89ab

080011a0 <MGPIO_voidSetPinMode>:
 *
 * @param copy_u8PinId
 * @param copy_u8Mode
 */
void MGPIO_voidSetPinMode( GPIO_PinId_t copy_u8PinId , GPIO_PIN_MODE copy_u8Mode)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	460a      	mov	r2, r1
 80011aa:	71fb      	strb	r3, [r7, #7]
 80011ac:	4613      	mov	r3, r2
 80011ae:	71bb      	strb	r3, [r7, #6]
	GPIO_PortId_t copy_u8PortId;
	    if(copy_u8PinId >= GPIO_PORTA_ENTRY && copy_u8PinId <= GPIO_PORTA_END)
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	2b0f      	cmp	r3, #15
 80011b4:	d802      	bhi.n	80011bc <MGPIO_voidSetPinMode+0x1c>
	    {
	        copy_u8PortId = PORTA;
 80011b6:	4b72      	ldr	r3, [pc, #456]	; (8001380 <MGPIO_voidSetPinMode+0x1e0>)
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	e016      	b.n	80011ea <MGPIO_voidSetPinMode+0x4a>
	    }
	    else if(copy_u8PinId >= GPIO_PORTB_ENTRY && copy_u8PinId <= GPIO_PORTB_END)
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	2b0f      	cmp	r3, #15
 80011c0:	d908      	bls.n	80011d4 <MGPIO_voidSetPinMode+0x34>
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	2b1f      	cmp	r3, #31
 80011c6:	d805      	bhi.n	80011d4 <MGPIO_voidSetPinMode+0x34>
	    {
	        copy_u8PortId = PORTB;
 80011c8:	4b6e      	ldr	r3, [pc, #440]	; (8001384 <MGPIO_voidSetPinMode+0x1e4>)
 80011ca:	60fb      	str	r3, [r7, #12]
	        copy_u8PinId -= GPIO_ADJUST_PORTB_PIN;
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	3b10      	subs	r3, #16
 80011d0:	71fb      	strb	r3, [r7, #7]
 80011d2:	e00a      	b.n	80011ea <MGPIO_voidSetPinMode+0x4a>
	    }
	    else if(copy_u8PinId >= GPIO_PORTC_ENTRY && copy_u8PinId <= GPIO_PORTC_END)
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	2b1f      	cmp	r3, #31
 80011d8:	d907      	bls.n	80011ea <MGPIO_voidSetPinMode+0x4a>
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	2b2f      	cmp	r3, #47	; 0x2f
 80011de:	d804      	bhi.n	80011ea <MGPIO_voidSetPinMode+0x4a>
	    {
	        copy_u8PortId = PORTC;
 80011e0:	4b69      	ldr	r3, [pc, #420]	; (8001388 <MGPIO_voidSetPinMode+0x1e8>)
 80011e2:	60fb      	str	r3, [r7, #12]
	        copy_u8PinId -= GPIO_ADJUST_PORTC_PIN;
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	3b20      	subs	r3, #32
 80011e8:	71fb      	strb	r3, [r7, #7]
	    else
	    {
	        /*!<TODO: Error Codes*/
	    }

	    switch (copy_u8PortId)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	4a66      	ldr	r2, [pc, #408]	; (8001388 <MGPIO_voidSetPinMode+0x1e8>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	f000 8081 	beq.w	80012f6 <MGPIO_voidSetPinMode+0x156>
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	4a64      	ldr	r2, [pc, #400]	; (8001388 <MGPIO_voidSetPinMode+0x1e8>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	f200 80b5 	bhi.w	8001368 <MGPIO_voidSetPinMode+0x1c8>
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	4a5f      	ldr	r2, [pc, #380]	; (8001380 <MGPIO_voidSetPinMode+0x1e0>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d004      	beq.n	8001210 <MGPIO_voidSetPinMode+0x70>
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	4a5e      	ldr	r2, [pc, #376]	; (8001384 <MGPIO_voidSetPinMode+0x1e4>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d03a      	beq.n	8001284 <MGPIO_voidSetPinMode+0xe4>
	               /*!<TODO: Error Codes*/
	           }
	        break;
	        default :
	            /*TODO: Error Codes*/
	        break;
 800120e:	e0ab      	b.n	8001368 <MGPIO_voidSetPinMode+0x1c8>
	           if(copy_u8PinId <= GPIO_PORT_MIDDLE)
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	2b07      	cmp	r3, #7
 8001214:	d817      	bhi.n	8001246 <MGPIO_voidSetPinMode+0xa6>
	               GPIOA_CRL &= ~ ((GPIO_CLR_MODE) << (GPIO_SHIFT_BIT * copy_u8PinId));
 8001216:	4b5a      	ldr	r3, [pc, #360]	; (8001380 <MGPIO_voidSetPinMode+0x1e0>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	79fa      	ldrb	r2, [r7, #7]
 800121c:	0092      	lsls	r2, r2, #2
 800121e:	210f      	movs	r1, #15
 8001220:	fa01 f202 	lsl.w	r2, r1, r2
 8001224:	43d2      	mvns	r2, r2
 8001226:	4611      	mov	r1, r2
 8001228:	4a55      	ldr	r2, [pc, #340]	; (8001380 <MGPIO_voidSetPinMode+0x1e0>)
 800122a:	400b      	ands	r3, r1
 800122c:	6013      	str	r3, [r2, #0]
	               GPIOA_CRL |=   ((copy_u8Mode)   << (GPIO_SHIFT_BIT * copy_u8PinId));
 800122e:	4b54      	ldr	r3, [pc, #336]	; (8001380 <MGPIO_voidSetPinMode+0x1e0>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	79b9      	ldrb	r1, [r7, #6]
 8001234:	79fa      	ldrb	r2, [r7, #7]
 8001236:	0092      	lsls	r2, r2, #2
 8001238:	fa01 f202 	lsl.w	r2, r1, r2
 800123c:	4611      	mov	r1, r2
 800123e:	4a50      	ldr	r2, [pc, #320]	; (8001380 <MGPIO_voidSetPinMode+0x1e0>)
 8001240:	430b      	orrs	r3, r1
 8001242:	6013      	str	r3, [r2, #0]
	        break;
 8001244:	e092      	b.n	800136c <MGPIO_voidSetPinMode+0x1cc>
	           else if(copy_u8PinId <= GPIO_PORT_END)
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	2b0f      	cmp	r3, #15
 800124a:	f200 808f 	bhi.w	800136c <MGPIO_voidSetPinMode+0x1cc>
	               copy_u8PinId -= GPIO_ADJUST_BIT;
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	3b08      	subs	r3, #8
 8001252:	71fb      	strb	r3, [r7, #7]
	               GPIOA_CRH &= ~ ((GPIO_CLR_MODE) << (GPIO_SHIFT_BIT * copy_u8PinId));
 8001254:	4b4d      	ldr	r3, [pc, #308]	; (800138c <MGPIO_voidSetPinMode+0x1ec>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	79fa      	ldrb	r2, [r7, #7]
 800125a:	0092      	lsls	r2, r2, #2
 800125c:	210f      	movs	r1, #15
 800125e:	fa01 f202 	lsl.w	r2, r1, r2
 8001262:	43d2      	mvns	r2, r2
 8001264:	4611      	mov	r1, r2
 8001266:	4a49      	ldr	r2, [pc, #292]	; (800138c <MGPIO_voidSetPinMode+0x1ec>)
 8001268:	400b      	ands	r3, r1
 800126a:	6013      	str	r3, [r2, #0]
	               GPIOA_CRH |=   ((copy_u8Mode)   << (GPIO_SHIFT_BIT * copy_u8PinId));
 800126c:	4b47      	ldr	r3, [pc, #284]	; (800138c <MGPIO_voidSetPinMode+0x1ec>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	79b9      	ldrb	r1, [r7, #6]
 8001272:	79fa      	ldrb	r2, [r7, #7]
 8001274:	0092      	lsls	r2, r2, #2
 8001276:	fa01 f202 	lsl.w	r2, r1, r2
 800127a:	4611      	mov	r1, r2
 800127c:	4a43      	ldr	r2, [pc, #268]	; (800138c <MGPIO_voidSetPinMode+0x1ec>)
 800127e:	430b      	orrs	r3, r1
 8001280:	6013      	str	r3, [r2, #0]
	        break;
 8001282:	e073      	b.n	800136c <MGPIO_voidSetPinMode+0x1cc>
	           if(copy_u8PinId <= GPIO_PORT_MIDDLE)
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	2b07      	cmp	r3, #7
 8001288:	d817      	bhi.n	80012ba <MGPIO_voidSetPinMode+0x11a>
	               GPIOB_CRL &= ~ ((GPIO_CLR_MODE) << (GPIO_SHIFT_BIT * copy_u8PinId));
 800128a:	4b3e      	ldr	r3, [pc, #248]	; (8001384 <MGPIO_voidSetPinMode+0x1e4>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	79fa      	ldrb	r2, [r7, #7]
 8001290:	0092      	lsls	r2, r2, #2
 8001292:	210f      	movs	r1, #15
 8001294:	fa01 f202 	lsl.w	r2, r1, r2
 8001298:	43d2      	mvns	r2, r2
 800129a:	4611      	mov	r1, r2
 800129c:	4a39      	ldr	r2, [pc, #228]	; (8001384 <MGPIO_voidSetPinMode+0x1e4>)
 800129e:	400b      	ands	r3, r1
 80012a0:	6013      	str	r3, [r2, #0]
	               GPIOB_CRL |=   ((copy_u8Mode)   << (GPIO_SHIFT_BIT * copy_u8PinId));
 80012a2:	4b38      	ldr	r3, [pc, #224]	; (8001384 <MGPIO_voidSetPinMode+0x1e4>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	79b9      	ldrb	r1, [r7, #6]
 80012a8:	79fa      	ldrb	r2, [r7, #7]
 80012aa:	0092      	lsls	r2, r2, #2
 80012ac:	fa01 f202 	lsl.w	r2, r1, r2
 80012b0:	4611      	mov	r1, r2
 80012b2:	4a34      	ldr	r2, [pc, #208]	; (8001384 <MGPIO_voidSetPinMode+0x1e4>)
 80012b4:	430b      	orrs	r3, r1
 80012b6:	6013      	str	r3, [r2, #0]
	        break;
 80012b8:	e05a      	b.n	8001370 <MGPIO_voidSetPinMode+0x1d0>
	           else if(copy_u8PinId <= GPIO_PORT_END)
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	2b0f      	cmp	r3, #15
 80012be:	d857      	bhi.n	8001370 <MGPIO_voidSetPinMode+0x1d0>
	               copy_u8PinId -= GPIO_ADJUST_BIT;
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	3b08      	subs	r3, #8
 80012c4:	71fb      	strb	r3, [r7, #7]
	               GPIOB_CRH &= ~ ((GPIO_CLR_MODE) << (GPIO_SHIFT_BIT * copy_u8PinId));
 80012c6:	4b32      	ldr	r3, [pc, #200]	; (8001390 <MGPIO_voidSetPinMode+0x1f0>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	79fa      	ldrb	r2, [r7, #7]
 80012cc:	0092      	lsls	r2, r2, #2
 80012ce:	210f      	movs	r1, #15
 80012d0:	fa01 f202 	lsl.w	r2, r1, r2
 80012d4:	43d2      	mvns	r2, r2
 80012d6:	4611      	mov	r1, r2
 80012d8:	4a2d      	ldr	r2, [pc, #180]	; (8001390 <MGPIO_voidSetPinMode+0x1f0>)
 80012da:	400b      	ands	r3, r1
 80012dc:	6013      	str	r3, [r2, #0]
	               GPIOB_CRH |=   ((copy_u8Mode)   << (GPIO_SHIFT_BIT * copy_u8PinId));
 80012de:	4b2c      	ldr	r3, [pc, #176]	; (8001390 <MGPIO_voidSetPinMode+0x1f0>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	79b9      	ldrb	r1, [r7, #6]
 80012e4:	79fa      	ldrb	r2, [r7, #7]
 80012e6:	0092      	lsls	r2, r2, #2
 80012e8:	fa01 f202 	lsl.w	r2, r1, r2
 80012ec:	4611      	mov	r1, r2
 80012ee:	4a28      	ldr	r2, [pc, #160]	; (8001390 <MGPIO_voidSetPinMode+0x1f0>)
 80012f0:	430b      	orrs	r3, r1
 80012f2:	6013      	str	r3, [r2, #0]
	        break;
 80012f4:	e03c      	b.n	8001370 <MGPIO_voidSetPinMode+0x1d0>
	           if(copy_u8PinId <= GPIO_PORT_MIDDLE)
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	2b07      	cmp	r3, #7
 80012fa:	d817      	bhi.n	800132c <MGPIO_voidSetPinMode+0x18c>
	               GPIOC_CRL &= ~ ((GPIO_CLR_MODE) << (GPIO_SHIFT_BIT * copy_u8PinId));
 80012fc:	4b22      	ldr	r3, [pc, #136]	; (8001388 <MGPIO_voidSetPinMode+0x1e8>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	79fa      	ldrb	r2, [r7, #7]
 8001302:	0092      	lsls	r2, r2, #2
 8001304:	210f      	movs	r1, #15
 8001306:	fa01 f202 	lsl.w	r2, r1, r2
 800130a:	43d2      	mvns	r2, r2
 800130c:	4611      	mov	r1, r2
 800130e:	4a1e      	ldr	r2, [pc, #120]	; (8001388 <MGPIO_voidSetPinMode+0x1e8>)
 8001310:	400b      	ands	r3, r1
 8001312:	6013      	str	r3, [r2, #0]
	               GPIOC_CRL |=   ((copy_u8Mode)   << (GPIO_SHIFT_BIT * copy_u8PinId));
 8001314:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <MGPIO_voidSetPinMode+0x1e8>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	79b9      	ldrb	r1, [r7, #6]
 800131a:	79fa      	ldrb	r2, [r7, #7]
 800131c:	0092      	lsls	r2, r2, #2
 800131e:	fa01 f202 	lsl.w	r2, r1, r2
 8001322:	4611      	mov	r1, r2
 8001324:	4a18      	ldr	r2, [pc, #96]	; (8001388 <MGPIO_voidSetPinMode+0x1e8>)
 8001326:	430b      	orrs	r3, r1
 8001328:	6013      	str	r3, [r2, #0]
	        break;
 800132a:	e023      	b.n	8001374 <MGPIO_voidSetPinMode+0x1d4>
	           else if(copy_u8PinId <= GPIO_PORT_END)
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	2b0f      	cmp	r3, #15
 8001330:	d820      	bhi.n	8001374 <MGPIO_voidSetPinMode+0x1d4>
	               copy_u8PinId -= GPIO_ADJUST_BIT;
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	3b08      	subs	r3, #8
 8001336:	71fb      	strb	r3, [r7, #7]
	               GPIOC_CRH &= ~ ((GPIO_CLR_MODE) << (GPIO_SHIFT_BIT * copy_u8PinId));
 8001338:	4b16      	ldr	r3, [pc, #88]	; (8001394 <MGPIO_voidSetPinMode+0x1f4>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	79fa      	ldrb	r2, [r7, #7]
 800133e:	0092      	lsls	r2, r2, #2
 8001340:	210f      	movs	r1, #15
 8001342:	fa01 f202 	lsl.w	r2, r1, r2
 8001346:	43d2      	mvns	r2, r2
 8001348:	4611      	mov	r1, r2
 800134a:	4a12      	ldr	r2, [pc, #72]	; (8001394 <MGPIO_voidSetPinMode+0x1f4>)
 800134c:	400b      	ands	r3, r1
 800134e:	6013      	str	r3, [r2, #0]
	               GPIOC_CRH |=   ((copy_u8Mode)   << (GPIO_SHIFT_BIT * copy_u8PinId));
 8001350:	4b10      	ldr	r3, [pc, #64]	; (8001394 <MGPIO_voidSetPinMode+0x1f4>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	79b9      	ldrb	r1, [r7, #6]
 8001356:	79fa      	ldrb	r2, [r7, #7]
 8001358:	0092      	lsls	r2, r2, #2
 800135a:	fa01 f202 	lsl.w	r2, r1, r2
 800135e:	4611      	mov	r1, r2
 8001360:	4a0c      	ldr	r2, [pc, #48]	; (8001394 <MGPIO_voidSetPinMode+0x1f4>)
 8001362:	430b      	orrs	r3, r1
 8001364:	6013      	str	r3, [r2, #0]
	        break;
 8001366:	e005      	b.n	8001374 <MGPIO_voidSetPinMode+0x1d4>
	        break;
 8001368:	bf00      	nop
 800136a:	e004      	b.n	8001376 <MGPIO_voidSetPinMode+0x1d6>
	        break;
 800136c:	bf00      	nop
 800136e:	e002      	b.n	8001376 <MGPIO_voidSetPinMode+0x1d6>
	        break;
 8001370:	bf00      	nop
 8001372:	e000      	b.n	8001376 <MGPIO_voidSetPinMode+0x1d6>
	        break;
 8001374:	bf00      	nop
	    }
}
 8001376:	bf00      	nop
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr
 8001380:	40010800 	.word	0x40010800
 8001384:	40010c00 	.word	0x40010c00
 8001388:	40011000 	.word	0x40011000
 800138c:	40010804 	.word	0x40010804
 8001390:	40010c04 	.word	0x40010c04
 8001394:	40011004 	.word	0x40011004

08001398 <NVM_voidUpdateControlPage>:
/******************************************************************************
* Function Definitions
*******************************************************************************/

void NVM_voidUpdateControlPage(u32 Copy_u32Address, u32 Copy_u32NewData)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b0ac      	sub	sp, #176	; 0xb0
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
	u32 Local_u32AddressArray[NUMBER_OF_FLAGS];
	u32 Local_u32DataArray[NUMBER_OF_FLAGS];
	u16 Local_u16DataIndex        = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
	u16 Local_u16DataCounter      = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
	u32 Local_u32AddressCounter   = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	for ( Local_u32AddressCounter = START_OF_AREA ;Local_u32AddressCounter < END_OF_AREA; Local_u32AddressCounter += WORD_SIZE_IN_BYTE)
 80013b4:	4b33      	ldr	r3, [pc, #204]	; (8001484 <NVM_voidUpdateControlPage+0xec>)
 80013b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80013ba:	e031      	b.n	8001420 <NVM_voidUpdateControlPage+0x88>
	{
		if( (Local_u32AddressCounter != Copy_u32Address) & (*((u32*)(Local_u32AddressCounter)) != ERASED_VALUE))
 80013bc:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	bf14      	ite	ne
 80013c6:	2301      	movne	r3, #1
 80013c8:	2300      	moveq	r3, #0
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d6:	bf14      	ite	ne
 80013d8:	2301      	movne	r3, #1
 80013da:	2300      	moveq	r3, #0
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	4013      	ands	r3, r2
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d017      	beq.n	8001416 <NVM_voidUpdateControlPage+0x7e>
		{
			Local_u32AddressArray[Local_u16DataIndex] = Local_u32AddressCounter;
 80013e6:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	33b0      	adds	r3, #176	; 0xb0
 80013ee:	443b      	add	r3, r7
 80013f0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80013f4:	f843 2c58 	str.w	r2, [r3, #-88]
			Local_u32DataArray[Local_u16DataIndex] = *((u32*)(Local_u32AddressCounter));
 80013f8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80013fc:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001400:	6812      	ldr	r2, [r2, #0]
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	33b0      	adds	r3, #176	; 0xb0
 8001406:	443b      	add	r3, r7
 8001408:	f843 2ca8 	str.w	r2, [r3, #-168]
			Local_u16DataIndex++ ;
 800140c:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001410:	3301      	adds	r3, #1
 8001412:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
	for ( Local_u32AddressCounter = START_OF_AREA ;Local_u32AddressCounter < END_OF_AREA; Local_u32AddressCounter += WORD_SIZE_IN_BYTE)
 8001416:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800141a:	3304      	adds	r3, #4
 800141c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001420:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001424:	4a18      	ldr	r2, [pc, #96]	; (8001488 <NVM_voidUpdateControlPage+0xf0>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d9c8      	bls.n	80013bc <NVM_voidUpdateControlPage+0x24>
		}
	}

	Fee_EraseImmediateBlock(HEADER_PAGE_NUMBER); // erase after save
 800142a:	203f      	movs	r0, #63	; 0x3f
 800142c:	f7ff fd82 	bl	8000f34 <Fee_EraseImmediateBlock>

	for (Local_u16DataCounter = 0 ; Local_u16DataCounter < Local_u16DataIndex ;Local_u16DataCounter++ )
 8001430:	2300      	movs	r3, #0
 8001432:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 8001436:	e016      	b.n	8001466 <NVM_voidUpdateControlPage+0xce>
	{
		Fee_Write(Local_u32AddressArray[Local_u16DataCounter], Local_u32DataArray[Local_u16DataCounter]);
 8001438:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	33b0      	adds	r3, #176	; 0xb0
 8001440:	443b      	add	r3, r7
 8001442:	f853 2c58 	ldr.w	r2, [r3, #-88]
 8001446:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	33b0      	adds	r3, #176	; 0xb0
 800144e:	443b      	add	r3, r7
 8001450:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 8001454:	4619      	mov	r1, r3
 8001456:	4610      	mov	r0, r2
 8001458:	f7ff fd79 	bl	8000f4e <Fee_Write>
	for (Local_u16DataCounter = 0 ; Local_u16DataCounter < Local_u16DataIndex ;Local_u16DataCounter++ )
 800145c:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8001460:	3301      	adds	r3, #1
 8001462:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 8001466:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 800146a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800146e:	429a      	cmp	r2, r3
 8001470:	d3e2      	bcc.n	8001438 <NVM_voidUpdateControlPage+0xa0>
	}
	Fee_Write(Copy_u32Address, Copy_u32NewData);
 8001472:	6839      	ldr	r1, [r7, #0]
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7ff fd6a 	bl	8000f4e <Fee_Write>
}
 800147a:	bf00      	nop
 800147c:	37b0      	adds	r7, #176	; 0xb0
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	0800fc00 	.word	0x0800fc00
 8001488:	0800fc4f 	.word	0x0800fc4f

0800148c <MRCC_voidEnableClock>:
#include "RCC_INTERFACE.h"
#include "RCC_CONFIG.h"

/* This function is used to enable the clock for the chosen perpheral */
void MRCC_voidEnableClock(u8 Copy_u8BusId,  u8 Copy_u8BperId)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	460a      	mov	r2, r1
 8001496:	71fb      	strb	r3, [r7, #7]
 8001498:	4613      	mov	r3, r2
 800149a:	71bb      	strb	r3, [r7, #6]
    if(Copy_u8BperId <= 31)
 800149c:	79bb      	ldrb	r3, [r7, #6]
 800149e:	2b1f      	cmp	r3, #31
 80014a0:	d82a      	bhi.n	80014f8 <MRCC_voidEnableClock+0x6c>
	{
		switch(Copy_u8BusId)
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d01c      	beq.n	80014e2 <MRCC_voidEnableClock+0x56>
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	dc25      	bgt.n	80014f8 <MRCC_voidEnableClock+0x6c>
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d002      	beq.n	80014b6 <MRCC_voidEnableClock+0x2a>
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d00b      	beq.n	80014cc <MRCC_voidEnableClock+0x40>
	}
	else
	{
		//TODO: Return Error Code
	}
}
 80014b4:	e020      	b.n	80014f8 <MRCC_voidEnableClock+0x6c>
			case RCC_AHB  : SET_BIT(RCC_AHBENR,  Copy_u8BperId); break;
 80014b6:	4b13      	ldr	r3, [pc, #76]	; (8001504 <MRCC_voidEnableClock+0x78>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	79ba      	ldrb	r2, [r7, #6]
 80014bc:	2101      	movs	r1, #1
 80014be:	fa01 f202 	lsl.w	r2, r1, r2
 80014c2:	4611      	mov	r1, r2
 80014c4:	4a0f      	ldr	r2, [pc, #60]	; (8001504 <MRCC_voidEnableClock+0x78>)
 80014c6:	430b      	orrs	r3, r1
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	e015      	b.n	80014f8 <MRCC_voidEnableClock+0x6c>
			case RCC_APB1 : SET_BIT(RCC_APB1ENR, Copy_u8BperId); break;
 80014cc:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <MRCC_voidEnableClock+0x7c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	79ba      	ldrb	r2, [r7, #6]
 80014d2:	2101      	movs	r1, #1
 80014d4:	fa01 f202 	lsl.w	r2, r1, r2
 80014d8:	4611      	mov	r1, r2
 80014da:	4a0b      	ldr	r2, [pc, #44]	; (8001508 <MRCC_voidEnableClock+0x7c>)
 80014dc:	430b      	orrs	r3, r1
 80014de:	6013      	str	r3, [r2, #0]
 80014e0:	e00a      	b.n	80014f8 <MRCC_voidEnableClock+0x6c>
			case RCC_APB2 : SET_BIT(RCC_APB2ENR, Copy_u8BperId); break;
 80014e2:	4b0a      	ldr	r3, [pc, #40]	; (800150c <MRCC_voidEnableClock+0x80>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	79ba      	ldrb	r2, [r7, #6]
 80014e8:	2101      	movs	r1, #1
 80014ea:	fa01 f202 	lsl.w	r2, r1, r2
 80014ee:	4611      	mov	r1, r2
 80014f0:	4a06      	ldr	r2, [pc, #24]	; (800150c <MRCC_voidEnableClock+0x80>)
 80014f2:	430b      	orrs	r3, r1
 80014f4:	6013      	str	r3, [r2, #0]
 80014f6:	bf00      	nop
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bc80      	pop	{r7}
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	40021014 	.word	0x40021014
 8001508:	4002101c 	.word	0x4002101c
 800150c:	40021018 	.word	0x40021018

08001510 <MRCC_voidInitSysClock>:
		//TODO: Return Error Code
	}
}
/* This function is used to select clock source for processor */
void MRCC_voidInitSysClock(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
	RCC_CR   = 0X00000080;                    /*CLEAR REG + Triming = 0  */
 8001514:	4b0d      	ldr	r3, [pc, #52]	; (800154c <MRCC_voidInitSysClock+0x3c>)
 8001516:	2280      	movs	r2, #128	; 0x80
 8001518:	601a      	str	r2, [r3, #0]
	RCC_CFGR = 0X00000000;                    /*CLEAR REG */
 800151a:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <MRCC_voidInitSysClock+0x40>)
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
	    SET_BIT(RCC_CR, RCC_CR_HSEBYP);
		SET_BIT(RCC_CR, RCC_CR_HSEON);
		while(!(GET_BIT(RCC_CR, RCC_CR_HSERDY)));
		RCC_CFGR |= RCC_CFGR_SW_HSE;
	#elif  RCC_CLOCK_TYPE == RCC_HSI
	    SET_BIT(RCC_CR, RCC_CR_HSION);
 8001520:	4b0a      	ldr	r3, [pc, #40]	; (800154c <MRCC_voidInitSysClock+0x3c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a09      	ldr	r2, [pc, #36]	; (800154c <MRCC_voidInitSysClock+0x3c>)
 8001526:	f043 0301 	orr.w	r3, r3, #1
 800152a:	6013      	str	r3, [r2, #0]
		while(!(GET_BIT(RCC_CR, RCC_CR_HSIRDY)));
 800152c:	bf00      	nop
 800152e:	4b07      	ldr	r3, [pc, #28]	; (800154c <MRCC_voidInitSysClock+0x3c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d0f9      	beq.n	800152e <MRCC_voidInitSysClock+0x1e>
        RCC_CFGR |= RCC_CFGR_SW_HSI;
 800153a:	4b05      	ldr	r3, [pc, #20]	; (8001550 <MRCC_voidInitSysClock+0x40>)
 800153c:	4a04      	ldr	r2, [pc, #16]	; (8001550 <MRCC_voidInitSysClock+0x40>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6013      	str	r3, [r2, #0]
	    #warning("Wrong Clock Type/HSI is default")
	    SET_BIT(RCC_CR, RCC_CR_HSION);
		while(!(GET_BIT(RCC_CR, RCC_CR_HSIRDY)));
        RCC_CFGR |= RCC_CFGR_SW_HSI;
	#endif
}
 8001542:	bf00      	nop
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	40021000 	.word	0x40021000
 8001550:	40021004 	.word	0x40021004

08001554 <IWDT_voidMakeSoftWareReset>:
}



void IWDT_voidMakeSoftWareReset(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
   CLR_BIT(IWDT_SR, RUV);
 8001558:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <IWDT_voidMakeSoftWareReset+0x30>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a09      	ldr	r2, [pc, #36]	; (8001584 <IWDT_voidMakeSoftWareReset+0x30>)
 800155e:	f023 0302 	bic.w	r3, r3, #2
 8001562:	6013      	str	r3, [r2, #0]
   IWDT_KR = IWDT_ACCESS_PR_RLR_KEY;
 8001564:	4b08      	ldr	r3, [pc, #32]	; (8001588 <IWDT_voidMakeSoftWareReset+0x34>)
 8001566:	f245 5255 	movw	r2, #21845	; 0x5555
 800156a:	601a      	str	r2, [r3, #0]
   IWDT_PR = 1;
 800156c:	4b07      	ldr	r3, [pc, #28]	; (800158c <IWDT_voidMakeSoftWareReset+0x38>)
 800156e:	2201      	movs	r2, #1
 8001570:	601a      	str	r2, [r3, #0]
   IWDT_KR = IWDT_ENABLE_IWDT;
 8001572:	4b05      	ldr	r3, [pc, #20]	; (8001588 <IWDT_voidMakeSoftWareReset+0x34>)
 8001574:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8001578:	601a      	str	r2, [r3, #0]
}
 800157a:	bf00      	nop
 800157c:	46bd      	mov	sp, r7
 800157e:	bc80      	pop	{r7}
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	4000300c 	.word	0x4000300c
 8001588:	40003000 	.word	0x40003000
 800158c:	40003004 	.word	0x40003004

08001590 <WWDT_voidMakeSoftWareReset>:




void WWDT_voidMakeSoftWareReset(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
   WWDT_CR = WWDT_REQUEST_SW_RESET;
 8001594:	4b03      	ldr	r3, [pc, #12]	; (80015a4 <WWDT_voidMakeSoftWareReset+0x14>)
 8001596:	22bf      	movs	r2, #191	; 0xbf
 8001598:	601a      	str	r2, [r3, #0]
}
 800159a:	bf00      	nop
 800159c:	46bd      	mov	sp, r7
 800159e:	bc80      	pop	{r7}
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	40002c00 	.word	0x40002c00

080015a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0

  /* Initialize all configured peripherals */
  MRCC_voidInitSysClock();
 80015ac:	f7ff ffb0 	bl	8001510 <MRCC_voidInitSysClock>
  MRCC_voidEnableClock(RCC_APB2, IOPA_PERIPHERAL); // port a
 80015b0:	2102      	movs	r1, #2
 80015b2:	2002      	movs	r0, #2
 80015b4:	f7ff ff6a 	bl	800148c <MRCC_voidEnableClock>
  MRCC_voidEnableClock(RCC_AHB, CRCE_PERIPHERAL); // crc clock
 80015b8:	2106      	movs	r1, #6
 80015ba:	2000      	movs	r0, #0
 80015bc:	f7ff ff66 	bl	800148c <MRCC_voidEnableClock>
  MRCC_voidEnableClock(RCC_AHB, FLITF_PERIPHERAL); //flash clock
 80015c0:	2104      	movs	r1, #4
 80015c2:	2000      	movs	r0, #0
 80015c4:	f7ff ff62 	bl	800148c <MRCC_voidEnableClock>
  MRCC_voidEnableClock(RCC_APB1, CAN_PERIPHERAL);
 80015c8:	2119      	movs	r1, #25
 80015ca:	2001      	movs	r0, #1
 80015cc:	f7ff ff5e 	bl	800148c <MRCC_voidEnableClock>

  MGPIO_voidSetPinMode( PINA12, AFIO_OUTPUT_2M_PULL_UP_DN);
 80015d0:	210a      	movs	r1, #10
 80015d2:	200c      	movs	r0, #12
 80015d4:	f7ff fde4 	bl	80011a0 <MGPIO_voidSetPinMode>
  MGPIO_voidSetPinMode(PINA11, GPIO_INPUT_FLOATING);
 80015d8:	2104      	movs	r1, #4
 80015da:	200b      	movs	r0, #11
 80015dc:	f7ff fde0 	bl	80011a0 <MGPIO_voidSetPinMode>


  CAN_VoidInit(CAN1, &CAN_InitStruct);
 80015e0:	4906      	ldr	r1, [pc, #24]	; (80015fc <main+0x54>)
 80015e2:	4807      	ldr	r0, [pc, #28]	; (8001600 <main+0x58>)
 80015e4:	f7ff f928 	bl	8000838 <CAN_VoidInit>

  CAN_VoidFilterSet(&CAN_FilterInitStruct_0, CAN1);
 80015e8:	4905      	ldr	r1, [pc, #20]	; (8001600 <main+0x58>)
 80015ea:	4806      	ldr	r0, [pc, #24]	; (8001604 <main+0x5c>)
 80015ec:	f7ff f9b4 	bl	8000958 <CAN_VoidFilterSet>
  //CAN_VoidFilterSet(&CAN_FilterInitStruct_4, CAN1);

  BL_voidSpecify_Bank();
 80015f0:	f7fe fdac 	bl	800014c <BL_voidSpecify_Bank>
 80015f4:	2300      	movs	r3, #0

}
 80015f6:	4618      	mov	r0, r3
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000004 	.word	0x20000004
 8001600:	40006400 	.word	0x40006400
 8001604:	20000010 	.word	0x20000010

08001608 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800160c:	e7fe      	b.n	800160c <NMI_Handler+0x4>

0800160e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001612:	e7fe      	b.n	8001612 <HardFault_Handler+0x4>

08001614 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001618:	e7fe      	b.n	8001618 <MemManage_Handler+0x4>

0800161a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800161e:	e7fe      	b.n	800161e <BusFault_Handler+0x4>

08001620 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001624:	e7fe      	b.n	8001624 <UsageFault_Handler+0x4>

08001626 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr

08001632 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	46bd      	mov	sp, r7
 800163a:	bc80      	pop	{r7}
 800163c:	4770      	bx	lr

0800163e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr

0800164a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800164e:	f000 f82f 	bl	80016b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}

08001656 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800165a:	bf00      	nop
 800165c:	46bd      	mov	sp, r7
 800165e:	bc80      	pop	{r7}
 8001660:	4770      	bx	lr
	...

08001664 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001664:	f7ff fff7 	bl	8001656 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001668:	480b      	ldr	r0, [pc, #44]	; (8001698 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800166a:	490c      	ldr	r1, [pc, #48]	; (800169c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800166c:	4a0c      	ldr	r2, [pc, #48]	; (80016a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800166e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001670:	e002      	b.n	8001678 <LoopCopyDataInit>

08001672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001676:	3304      	adds	r3, #4

08001678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800167a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800167c:	d3f9      	bcc.n	8001672 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800167e:	4a09      	ldr	r2, [pc, #36]	; (80016a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001680:	4c09      	ldr	r4, [pc, #36]	; (80016a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001684:	e001      	b.n	800168a <LoopFillZerobss>

08001686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001688:	3204      	adds	r2, #4

0800168a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800168a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800168c:	d3fb      	bcc.n	8001686 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800168e:	f000 f821 	bl	80016d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001692:	f7ff ff89 	bl	80015a8 <main>
  bx lr
 8001696:	4770      	bx	lr
  ldr r0, =_sdata
 8001698:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800169c:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 80016a0:	0800173c 	.word	0x0800173c
  ldr r2, =_sbss
 80016a4:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 80016a8:	2000045c 	.word	0x2000045c

080016ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016ac:	e7fe      	b.n	80016ac <ADC1_2_IRQHandler>
	...

080016b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016b4:	4b05      	ldr	r3, [pc, #20]	; (80016cc <HAL_IncTick+0x1c>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	461a      	mov	r2, r3
 80016ba:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <HAL_IncTick+0x20>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4413      	add	r3, r2
 80016c0:	4a03      	ldr	r2, [pc, #12]	; (80016d0 <HAL_IncTick+0x20>)
 80016c2:	6013      	str	r3, [r2, #0]
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr
 80016cc:	20000034 	.word	0x20000034
 80016d0:	20000458 	.word	0x20000458

080016d4 <__libc_init_array>:
 80016d4:	b570      	push	{r4, r5, r6, lr}
 80016d6:	2600      	movs	r6, #0
 80016d8:	4d0c      	ldr	r5, [pc, #48]	; (800170c <__libc_init_array+0x38>)
 80016da:	4c0d      	ldr	r4, [pc, #52]	; (8001710 <__libc_init_array+0x3c>)
 80016dc:	1b64      	subs	r4, r4, r5
 80016de:	10a4      	asrs	r4, r4, #2
 80016e0:	42a6      	cmp	r6, r4
 80016e2:	d109      	bne.n	80016f8 <__libc_init_array+0x24>
 80016e4:	f000 f81a 	bl	800171c <_init>
 80016e8:	2600      	movs	r6, #0
 80016ea:	4d0a      	ldr	r5, [pc, #40]	; (8001714 <__libc_init_array+0x40>)
 80016ec:	4c0a      	ldr	r4, [pc, #40]	; (8001718 <__libc_init_array+0x44>)
 80016ee:	1b64      	subs	r4, r4, r5
 80016f0:	10a4      	asrs	r4, r4, #2
 80016f2:	42a6      	cmp	r6, r4
 80016f4:	d105      	bne.n	8001702 <__libc_init_array+0x2e>
 80016f6:	bd70      	pop	{r4, r5, r6, pc}
 80016f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80016fc:	4798      	blx	r3
 80016fe:	3601      	adds	r6, #1
 8001700:	e7ee      	b.n	80016e0 <__libc_init_array+0xc>
 8001702:	f855 3b04 	ldr.w	r3, [r5], #4
 8001706:	4798      	blx	r3
 8001708:	3601      	adds	r6, #1
 800170a:	e7f2      	b.n	80016f2 <__libc_init_array+0x1e>
 800170c:	08001734 	.word	0x08001734
 8001710:	08001734 	.word	0x08001734
 8001714:	08001734 	.word	0x08001734
 8001718:	08001738 	.word	0x08001738

0800171c <_init>:
 800171c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800171e:	bf00      	nop
 8001720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001722:	bc08      	pop	{r3}
 8001724:	469e      	mov	lr, r3
 8001726:	4770      	bx	lr

08001728 <_fini>:
 8001728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800172a:	bf00      	nop
 800172c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800172e:	bc08      	pop	{r3}
 8001730:	469e      	mov	lr, r3
 8001732:	4770      	bx	lr
