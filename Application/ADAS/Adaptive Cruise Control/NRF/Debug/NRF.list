
NRF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000324c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080033e0  080033e0  000133e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033fc  080033fc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080033fc  080033fc  000133fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003404  08003404  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003404  08003404  00013404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003408  08003408  00013408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800340c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  2000000c  08003418  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08003418  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a590  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ccf  00000000  00000000  0002a60f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000978  00000000  00000000  0002c2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000731  00000000  00000000  0002cc58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015443  00000000  00000000  0002d389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b6cf  00000000  00000000  000427cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008362c  00000000  00000000  0004de9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002570  00000000  00000000  000d14c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000d3a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080033c8 	.word	0x080033c8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080033c8 	.word	0x080033c8

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b088      	sub	sp, #32
 80004d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d6:	f107 030c 	add.w	r3, r7, #12
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
 80004e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e6:	2300      	movs	r3, #0
 80004e8:	60bb      	str	r3, [r7, #8]
 80004ea:	4b42      	ldr	r3, [pc, #264]	; (80005f4 <MX_GPIO_Init+0x124>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ee:	4a41      	ldr	r2, [pc, #260]	; (80005f4 <MX_GPIO_Init+0x124>)
 80004f0:	f043 0304 	orr.w	r3, r3, #4
 80004f4:	6313      	str	r3, [r2, #48]	; 0x30
 80004f6:	4b3f      	ldr	r3, [pc, #252]	; (80005f4 <MX_GPIO_Init+0x124>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	f003 0304 	and.w	r3, r3, #4
 80004fe:	60bb      	str	r3, [r7, #8]
 8000500:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000502:	2300      	movs	r3, #0
 8000504:	607b      	str	r3, [r7, #4]
 8000506:	4b3b      	ldr	r3, [pc, #236]	; (80005f4 <MX_GPIO_Init+0x124>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050a:	4a3a      	ldr	r2, [pc, #232]	; (80005f4 <MX_GPIO_Init+0x124>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	6313      	str	r3, [r2, #48]	; 0x30
 8000512:	4b38      	ldr	r3, [pc, #224]	; (80005f4 <MX_GPIO_Init+0x124>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800051e:	2300      	movs	r3, #0
 8000520:	603b      	str	r3, [r7, #0]
 8000522:	4b34      	ldr	r3, [pc, #208]	; (80005f4 <MX_GPIO_Init+0x124>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4a33      	ldr	r2, [pc, #204]	; (80005f4 <MX_GPIO_Init+0x124>)
 8000528:	f043 0302 	orr.w	r3, r3, #2
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
 800052e:	4b31      	ldr	r3, [pc, #196]	; (80005f4 <MX_GPIO_Init+0x124>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	f003 0302 	and.w	r3, r3, #2
 8000536:	603b      	str	r3, [r7, #0]
 8000538:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800053a:	2201      	movs	r2, #1
 800053c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000540:	482d      	ldr	r0, [pc, #180]	; (80005f8 <MX_GPIO_Init+0x128>)
 8000542:	f001 f88f 	bl	8001664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RECICVER_GPIO_Port, LED_RECICVER_Pin, GPIO_PIN_RESET);
 8000546:	2200      	movs	r2, #0
 8000548:	2101      	movs	r1, #1
 800054a:	482c      	ldr	r0, [pc, #176]	; (80005fc <MX_GPIO_Init+0x12c>)
 800054c:	f001 f88a 	bl	8001664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 8000550:	2200      	movs	r2, #0
 8000552:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000556:	482a      	ldr	r0, [pc, #168]	; (8000600 <MX_GPIO_Init+0x130>)
 8000558:	f001 f884 	bl	8001664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CSN_GPIO_Port, SPI2_CSN_Pin, GPIO_PIN_SET);
 800055c:	2201      	movs	r2, #1
 800055e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000562:	4827      	ldr	r0, [pc, #156]	; (8000600 <MX_GPIO_Init+0x130>)
 8000564:	f001 f87e 	bl	8001664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000568:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800056c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056e:	2301      	movs	r3, #1
 8000570:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000572:	2300      	movs	r3, #0
 8000574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000576:	2300      	movs	r3, #0
 8000578:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800057a:	f107 030c 	add.w	r3, r7, #12
 800057e:	4619      	mov	r1, r3
 8000580:	481d      	ldr	r0, [pc, #116]	; (80005f8 <MX_GPIO_Init+0x128>)
 8000582:	f000 feeb 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_RECICVER_Pin;
 8000586:	2301      	movs	r3, #1
 8000588:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058a:	2301      	movs	r3, #1
 800058c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058e:	2300      	movs	r3, #0
 8000590:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000592:	2303      	movs	r3, #3
 8000594:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_RECICVER_GPIO_Port, &GPIO_InitStruct);
 8000596:	f107 030c 	add.w	r3, r7, #12
 800059a:	4619      	mov	r1, r3
 800059c:	4817      	ldr	r0, [pc, #92]	; (80005fc <MX_GPIO_Init+0x12c>)
 800059e:	f000 fedd 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CE_Pin|SPI2_CSN_Pin;
 80005a2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80005a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a8:	2301      	movs	r3, #1
 80005aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ac:	2300      	movs	r3, #0
 80005ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005b0:	2302      	movs	r3, #2
 80005b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	4619      	mov	r1, r3
 80005ba:	4811      	ldr	r0, [pc, #68]	; (8000600 <MX_GPIO_Init+0x130>)
 80005bc:	f000 fece 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 80005c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005c6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80005ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005cc:	2300      	movs	r3, #0
 80005ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	4619      	mov	r1, r3
 80005d6:	4809      	ldr	r0, [pc, #36]	; (80005fc <MX_GPIO_Init+0x12c>)
 80005d8:	f000 fec0 	bl	800135c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80005dc:	2200      	movs	r2, #0
 80005de:	2100      	movs	r1, #0
 80005e0:	2017      	movs	r0, #23
 80005e2:	f000 fe84 	bl	80012ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80005e6:	2017      	movs	r0, #23
 80005e8:	f000 fe9d 	bl	8001326 <HAL_NVIC_EnableIRQ>

}
 80005ec:	bf00      	nop
 80005ee:	3720      	adds	r7, #32
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40023800 	.word	0x40023800
 80005f8:	40020800 	.word	0x40020800
 80005fc:	40020000 	.word	0x40020000
 8000600:	40020400 	.word	0x40020400

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000608:	f000 fd00 	bl	800100c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060c:	f000 f854 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000610:	f7ff ff5e 	bl	80004d0 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000614:	f000 f8ce 	bl	80007b4 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000618:	f000 f9b6 	bl	8000988 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


#ifdef RECEIVER
  	nrf24l01p_rx_init(2500, _1Mbps);
 800061c:	2100      	movs	r1, #0
 800061e:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000622:	f000 faa7 	bl	8000b74 <nrf24l01p_rx_init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
#ifdef RECEIVER
	  // Nothing to do
	  if(recieved_flag == 1)
 8000626:	4b1f      	ldr	r3, [pc, #124]	; (80006a4 <main+0xa0>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	b2db      	uxtb	r3, r3
 800062c:	2b01      	cmp	r3, #1
 800062e:	d135      	bne.n	800069c <main+0x98>
	  {
		  HAL_UART_Transmit(&huart1, rx_data, NRF24L01P_PAYLOAD_LENGTH, 2000);
 8000630:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000634:	2208      	movs	r2, #8
 8000636:	491c      	ldr	r1, [pc, #112]	; (80006a8 <main+0xa4>)
 8000638:	481c      	ldr	r0, [pc, #112]	; (80006ac <main+0xa8>)
 800063a:	f002 fadd 	bl	8002bf8 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 5, 2000);
 800063e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000642:	2205      	movs	r2, #5
 8000644:	491a      	ldr	r1, [pc, #104]	; (80006b0 <main+0xac>)
 8000646:	4819      	ldr	r0, [pc, #100]	; (80006ac <main+0xa8>)
 8000648:	f002 fad6 	bl	8002bf8 <HAL_UART_Transmit>
		  if (
		  		rx_data[0] == 0 &&
 800064c:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <main+0xa4>)
 800064e:	781b      	ldrb	r3, [r3, #0]
		  if (
 8000650:	2b00      	cmp	r3, #0
 8000652:	d120      	bne.n	8000696 <main+0x92>
		  		rx_data[1] == 1 &&
 8000654:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <main+0xa4>)
 8000656:	785b      	ldrb	r3, [r3, #1]
		  		rx_data[0] == 0 &&
 8000658:	2b01      	cmp	r3, #1
 800065a:	d11c      	bne.n	8000696 <main+0x92>
		  		rx_data[2] == 2 &&
 800065c:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <main+0xa4>)
 800065e:	789b      	ldrb	r3, [r3, #2]
		  		rx_data[1] == 1 &&
 8000660:	2b02      	cmp	r3, #2
 8000662:	d118      	bne.n	8000696 <main+0x92>
		  		rx_data[3] == 3 &&
 8000664:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <main+0xa4>)
 8000666:	78db      	ldrb	r3, [r3, #3]
		  		rx_data[2] == 2 &&
 8000668:	2b03      	cmp	r3, #3
 800066a:	d114      	bne.n	8000696 <main+0x92>
		  		rx_data[4] == 4 &&
 800066c:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <main+0xa4>)
 800066e:	791b      	ldrb	r3, [r3, #4]
		  		rx_data[3] == 3 &&
 8000670:	2b04      	cmp	r3, #4
 8000672:	d110      	bne.n	8000696 <main+0x92>
		  		rx_data[5] == 5 &&
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <main+0xa4>)
 8000676:	795b      	ldrb	r3, [r3, #5]
		  		rx_data[4] == 4 &&
 8000678:	2b05      	cmp	r3, #5
 800067a:	d10c      	bne.n	8000696 <main+0x92>
		  		rx_data[6] == 6 &&
 800067c:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <main+0xa4>)
 800067e:	799b      	ldrb	r3, [r3, #6]
		  		rx_data[5] == 5 &&
 8000680:	2b06      	cmp	r3, #6
 8000682:	d108      	bne.n	8000696 <main+0x92>
		  		rx_data[7] == 7
 8000684:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <main+0xa4>)
 8000686:	79db      	ldrb	r3, [r3, #7]
		  		rx_data[6] == 6 &&
 8000688:	2b07      	cmp	r3, #7
 800068a:	d104      	bne.n	8000696 <main+0x92>
		  		)
		  {
			  HAL_GPIO_WritePin(LED_RECICVER_GPIO_Port, LED_RECICVER_Pin, GPIO_PIN_SET);
 800068c:	2201      	movs	r2, #1
 800068e:	2101      	movs	r1, #1
 8000690:	4808      	ldr	r0, [pc, #32]	; (80006b4 <main+0xb0>)
 8000692:	f000 ffe7 	bl	8001664 <HAL_GPIO_WritePin>
		  }
//		  HAL_UART_Transmit_IT(&huart1, rx_data, 8);
		  recieved_flag = 0;
 8000696:	4b03      	ldr	r3, [pc, #12]	; (80006a4 <main+0xa0>)
 8000698:	2200      	movs	r2, #0
 800069a:	701a      	strb	r2, [r3, #0]


	  nrf24l01p_tx_transmit(tx_data);
#endif

	  HAL_Delay(100);
 800069c:	2064      	movs	r0, #100	; 0x64
 800069e:	f000 fd27 	bl	80010f0 <HAL_Delay>
	  if(recieved_flag == 1)
 80006a2:	e7c0      	b.n	8000626 <main+0x22>
 80006a4:	20000028 	.word	0x20000028
 80006a8:	2000002c 	.word	0x2000002c
 80006ac:	2000008c 	.word	0x2000008c
 80006b0:	080033e0 	.word	0x080033e0
 80006b4:	40020000 	.word	0x40020000

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b094      	sub	sp, #80	; 0x50
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 0320 	add.w	r3, r7, #32
 80006c2:	2230      	movs	r2, #48	; 0x30
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f002 fe52 	bl	8003370 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	4b23      	ldr	r3, [pc, #140]	; (8000770 <SystemClock_Config+0xb8>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e4:	4a22      	ldr	r2, [pc, #136]	; (8000770 <SystemClock_Config+0xb8>)
 80006e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ea:	6413      	str	r3, [r2, #64]	; 0x40
 80006ec:	4b20      	ldr	r3, [pc, #128]	; (8000770 <SystemClock_Config+0xb8>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006f8:	2300      	movs	r3, #0
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	4b1d      	ldr	r3, [pc, #116]	; (8000774 <SystemClock_Config+0xbc>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000704:	4a1b      	ldr	r2, [pc, #108]	; (8000774 <SystemClock_Config+0xbc>)
 8000706:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800070a:	6013      	str	r3, [r2, #0]
 800070c:	4b19      	ldr	r3, [pc, #100]	; (8000774 <SystemClock_Config+0xbc>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000718:	2302      	movs	r3, #2
 800071a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800071c:	2301      	movs	r3, #1
 800071e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000720:	2310      	movs	r3, #16
 8000722:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000724:	2300      	movs	r3, #0
 8000726:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000728:	f107 0320 	add.w	r3, r7, #32
 800072c:	4618      	mov	r0, r3
 800072e:	f000 ffe5 	bl	80016fc <HAL_RCC_OscConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000738:	f000 f836 	bl	80007a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073c:	230f      	movs	r3, #15
 800073e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000740:	2300      	movs	r3, #0
 8000742:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000748:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074e:	2300      	movs	r3, #0
 8000750:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	2100      	movs	r1, #0
 8000758:	4618      	mov	r0, r3
 800075a:	f001 fa47 	bl	8001bec <HAL_RCC_ClockConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000764:	f000 f820 	bl	80007a8 <Error_Handler>
  }
}
 8000768:	bf00      	nop
 800076a:	3750      	adds	r7, #80	; 0x50
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40023800 	.word	0x40023800
 8000774:	40007000 	.word	0x40007000

08000778 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF24L01P_IRQ_PIN_NUMBER)
 8000782:	88fb      	ldrh	r3, [r7, #6]
 8000784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000788:	d105      	bne.n	8000796 <HAL_GPIO_EXTI_Callback+0x1e>
	{
#ifdef RECEIVER
	    nrf24l01p_rx_receive(rx_data);
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <HAL_GPIO_EXTI_Callback+0x28>)
 800078c:	f000 fa20 	bl	8000bd0 <nrf24l01p_rx_receive>
	    recieved_flag = 1;
 8000790:	4b04      	ldr	r3, [pc, #16]	; (80007a4 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000792:	2201      	movs	r2, #1
 8000794:	701a      	strb	r2, [r3, #0]
#ifdef TRANSMITTER
		nrf24l01p_tx_irq();
#endif
	}

}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	2000002c 	.word	0x2000002c
 80007a4:	20000028 	.word	0x20000028

080007a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ac:	b672      	cpsid	i
}
 80007ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <Error_Handler+0x8>
	...

080007b4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80007b8:	4b17      	ldr	r3, [pc, #92]	; (8000818 <MX_SPI2_Init+0x64>)
 80007ba:	4a18      	ldr	r2, [pc, #96]	; (800081c <MX_SPI2_Init+0x68>)
 80007bc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007be:	4b16      	ldr	r3, [pc, #88]	; (8000818 <MX_SPI2_Init+0x64>)
 80007c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007c4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007c6:	4b14      	ldr	r3, [pc, #80]	; (8000818 <MX_SPI2_Init+0x64>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <MX_SPI2_Init+0x64>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_SPI2_Init+0x64>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_SPI2_Init+0x64>)
 80007da:	2200      	movs	r2, #0
 80007dc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_SPI2_Init+0x64>)
 80007e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80007e6:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_SPI2_Init+0x64>)
 80007e8:	2210      	movs	r2, #16
 80007ea:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ec:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <MX_SPI2_Init+0x64>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_SPI2_Init+0x64>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <MX_SPI2_Init+0x64>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_SPI2_Init+0x64>)
 8000800:	220a      	movs	r2, #10
 8000802:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000804:	4804      	ldr	r0, [pc, #16]	; (8000818 <MX_SPI2_Init+0x64>)
 8000806:	f001 fbd1 	bl	8001fac <HAL_SPI_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000810:	f7ff ffca 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000034 	.word	0x20000034
 800081c:	40003800 	.word	0x40003800

08000820 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08a      	sub	sp, #40	; 0x28
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a19      	ldr	r2, [pc, #100]	; (80008a4 <HAL_SPI_MspInit+0x84>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d12c      	bne.n	800089c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	613b      	str	r3, [r7, #16]
 8000846:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <HAL_SPI_MspInit+0x88>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084a:	4a17      	ldr	r2, [pc, #92]	; (80008a8 <HAL_SPI_MspInit+0x88>)
 800084c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000850:	6413      	str	r3, [r2, #64]	; 0x40
 8000852:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <HAL_SPI_MspInit+0x88>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <HAL_SPI_MspInit+0x88>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a10      	ldr	r2, [pc, #64]	; (80008a8 <HAL_SPI_MspInit+0x88>)
 8000868:	f043 0302 	orr.w	r3, r3, #2
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <HAL_SPI_MspInit+0x88>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 800087a:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 800087e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000880:	2302      	movs	r3, #2
 8000882:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000888:	2303      	movs	r3, #3
 800088a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800088c:	2305      	movs	r3, #5
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000890:	f107 0314 	add.w	r3, r7, #20
 8000894:	4619      	mov	r1, r3
 8000896:	4805      	ldr	r0, [pc, #20]	; (80008ac <HAL_SPI_MspInit+0x8c>)
 8000898:	f000 fd60 	bl	800135c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800089c:	bf00      	nop
 800089e:	3728      	adds	r7, #40	; 0x28
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40003800 	.word	0x40003800
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40020400 	.word	0x40020400

080008b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <HAL_MspInit+0x4c>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008be:	4a0f      	ldr	r2, [pc, #60]	; (80008fc <HAL_MspInit+0x4c>)
 80008c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c4:	6453      	str	r3, [r2, #68]	; 0x44
 80008c6:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <HAL_MspInit+0x4c>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	603b      	str	r3, [r7, #0]
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <HAL_MspInit+0x4c>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008da:	4a08      	ldr	r2, [pc, #32]	; (80008fc <HAL_MspInit+0x4c>)
 80008dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e0:	6413      	str	r3, [r2, #64]	; 0x40
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <HAL_MspInit+0x4c>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ee:	bf00      	nop
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800

08000900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000904:	e7fe      	b.n	8000904 <NMI_Handler+0x4>

08000906 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090a:	e7fe      	b.n	800090a <HardFault_Handler+0x4>

0800090c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000910:	e7fe      	b.n	8000910 <MemManage_Handler+0x4>

08000912 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000916:	e7fe      	b.n	8000916 <BusFault_Handler+0x4>

08000918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800091c:	e7fe      	b.n	800091c <UsageFault_Handler+0x4>

0800091e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr

0800093a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800094c:	f000 fbb0 	bl	80010b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}

08000954 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_Pin);
 8000958:	f44f 7080 	mov.w	r0, #256	; 0x100
 800095c:	f000 feb6 	bl	80016cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}

08000964 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <SystemInit+0x20>)
 800096a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800096e:	4a05      	ldr	r2, [pc, #20]	; (8000984 <SystemInit+0x20>)
 8000970:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000974:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800098c:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <MX_USART1_UART_Init+0x4c>)
 800098e:	4a12      	ldr	r2, [pc, #72]	; (80009d8 <MX_USART1_UART_Init+0x50>)
 8000990:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000992:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <MX_USART1_UART_Init+0x4c>)
 8000994:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000998:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <MX_USART1_UART_Init+0x4c>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009a0:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <MX_USART1_UART_Init+0x4c>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009a6:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <MX_USART1_UART_Init+0x4c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009ac:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <MX_USART1_UART_Init+0x4c>)
 80009ae:	220c      	movs	r2, #12
 80009b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b2:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <MX_USART1_UART_Init+0x4c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <MX_USART1_UART_Init+0x4c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009be:	4805      	ldr	r0, [pc, #20]	; (80009d4 <MX_USART1_UART_Init+0x4c>)
 80009c0:	f002 f8ca 	bl	8002b58 <HAL_UART_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009ca:	f7ff feed 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	2000008c 	.word	0x2000008c
 80009d8:	40011000 	.word	0x40011000

080009dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	; 0x28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a19      	ldr	r2, [pc, #100]	; (8000a60 <HAL_UART_MspInit+0x84>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d12c      	bne.n	8000a58 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	613b      	str	r3, [r7, #16]
 8000a02:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <HAL_UART_MspInit+0x88>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a06:	4a17      	ldr	r2, [pc, #92]	; (8000a64 <HAL_UART_MspInit+0x88>)
 8000a08:	f043 0310 	orr.w	r3, r3, #16
 8000a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a0e:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <HAL_UART_MspInit+0x88>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a12:	f003 0310 	and.w	r3, r3, #16
 8000a16:	613b      	str	r3, [r7, #16]
 8000a18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <HAL_UART_MspInit+0x88>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a10      	ldr	r2, [pc, #64]	; (8000a64 <HAL_UART_MspInit+0x88>)
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <HAL_UART_MspInit+0x88>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a36:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a44:	2303      	movs	r3, #3
 8000a46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a48:	2307      	movs	r3, #7
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	4619      	mov	r1, r3
 8000a52:	4805      	ldr	r0, [pc, #20]	; (8000a68 <HAL_UART_MspInit+0x8c>)
 8000a54:	f000 fc82 	bl	800135c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000a58:	bf00      	nop
 8000a5a:	3728      	adds	r7, #40	; 0x28
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40011000 	.word	0x40011000
 8000a64:	40023800 	.word	0x40023800
 8000a68:	40020000 	.word	0x40020000

08000a6c <cs_high>:

#include "nrf24l01p.h"


static void cs_high()
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_SET);
 8000a70:	2201      	movs	r2, #1
 8000a72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a76:	4802      	ldr	r0, [pc, #8]	; (8000a80 <cs_high+0x14>)
 8000a78:	f000 fdf4 	bl	8001664 <HAL_GPIO_WritePin>
}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40020400 	.word	0x40020400

08000a84 <cs_low>:

static void cs_low()
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a8e:	4802      	ldr	r0, [pc, #8]	; (8000a98 <cs_low+0x14>)
 8000a90:	f000 fde8 	bl	8001664 <HAL_GPIO_WritePin>
}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40020400 	.word	0x40020400

08000a9c <ce_high>:

static void ce_high()
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aa6:	4802      	ldr	r0, [pc, #8]	; (8000ab0 <ce_high+0x14>)
 8000aa8:	f000 fddc 	bl	8001664 <HAL_GPIO_WritePin>
}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40020400 	.word	0x40020400

08000ab4 <ce_low>:

static void ce_low()
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_RESET);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000abe:	4802      	ldr	r0, [pc, #8]	; (8000ac8 <ce_low+0x14>)
 8000ac0:	f000 fdd0 	bl	8001664 <HAL_GPIO_WritePin>
}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40020400 	.word	0x40020400

08000acc <read_register>:

static uint8_t read_register(uint8_t reg)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af02      	add	r7, sp, #8
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	71fb      	strb	r3, [r7, #7]
    uint8_t command = NRF24L01P_CMD_R_REGISTER | reg;
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t read_val;

    cs_low();
 8000ada:	f7ff ffd3 	bl	8000a84 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000ade:	f107 020e 	add.w	r2, r7, #14
 8000ae2:	f107 010f 	add.w	r1, r7, #15
 8000ae6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000aea:	9300      	str	r3, [sp, #0]
 8000aec:	2301      	movs	r3, #1
 8000aee:	4809      	ldr	r0, [pc, #36]	; (8000b14 <read_register+0x48>)
 8000af0:	f001 fd40 	bl	8002574 <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(NRF24L01P_SPI, &read_val, 1, 2000);
 8000af4:	f107 010d 	add.w	r1, r7, #13
 8000af8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000afc:	2201      	movs	r2, #1
 8000afe:	4805      	ldr	r0, [pc, #20]	; (8000b14 <read_register+0x48>)
 8000b00:	f001 fc20 	bl	8002344 <HAL_SPI_Receive>
    cs_high();
 8000b04:	f7ff ffb2 	bl	8000a6c <cs_high>

    return read_val;
 8000b08:	7b7b      	ldrb	r3, [r7, #13]
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000034 	.word	0x20000034

08000b18 <write_register>:

static uint8_t write_register(uint8_t reg, uint8_t value)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af02      	add	r7, sp, #8
 8000b1e:	4603      	mov	r3, r0
 8000b20:	460a      	mov	r2, r1
 8000b22:	71fb      	strb	r3, [r7, #7]
 8000b24:	4613      	mov	r3, r2
 8000b26:	71bb      	strb	r3, [r7, #6]
    uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	f043 0320 	orr.w	r3, r3, #32
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t write_val = value;
 8000b32:	79bb      	ldrb	r3, [r7, #6]
 8000b34:	737b      	strb	r3, [r7, #13]

    cs_low();
 8000b36:	f7ff ffa5 	bl	8000a84 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000b3a:	f107 020e 	add.w	r2, r7, #14
 8000b3e:	f107 010f 	add.w	r1, r7, #15
 8000b42:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000b46:	9300      	str	r3, [sp, #0]
 8000b48:	2301      	movs	r3, #1
 8000b4a:	4809      	ldr	r0, [pc, #36]	; (8000b70 <write_register+0x58>)
 8000b4c:	f001 fd12 	bl	8002574 <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, &write_val, 1, 2000);
 8000b50:	f107 010d 	add.w	r1, r7, #13
 8000b54:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000b58:	2201      	movs	r2, #1
 8000b5a:	4805      	ldr	r0, [pc, #20]	; (8000b70 <write_register+0x58>)
 8000b5c:	f001 faaf 	bl	80020be <HAL_SPI_Transmit>
    cs_high();
 8000b60:	f7ff ff84 	bl	8000a6c <cs_high>

    return write_val;
 8000b64:	7b7b      	ldrb	r3, [r7, #13]
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000034 	.word	0x20000034

08000b74 <nrf24l01p_rx_init>:


/* nRF24L01+ Main Functions */
void nrf24l01p_rx_init(channel MHz, air_data_rate bps)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	460a      	mov	r2, r1
 8000b7e:	80fb      	strh	r3, [r7, #6]
 8000b80:	4613      	mov	r3, r2
 8000b82:	717b      	strb	r3, [r7, #5]
    nrf24l01p_reset();
 8000b84:	f000 f838 	bl	8000bf8 <nrf24l01p_reset>

    nrf24l01p_prx_mode();
 8000b88:	f000 f88a 	bl	8000ca0 <nrf24l01p_prx_mode>
    nrf24l01p_power_up();
 8000b8c:	f000 f92e 	bl	8000dec <nrf24l01p_power_up>

    nrf24l01p_rx_set_payload_widths(NRF24L01P_PAYLOAD_LENGTH);
 8000b90:	2008      	movs	r0, #8
 8000b92:	f000 f909 	bl	8000da8 <nrf24l01p_rx_set_payload_widths>

    nrf24l01p_set_rf_channel(MHz);
 8000b96:	88fb      	ldrh	r3, [r7, #6]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f000 f9b3 	bl	8000f04 <nrf24l01p_set_rf_channel>
    nrf24l01p_set_rf_air_data_rate(bps);
 8000b9e:	797b      	ldrb	r3, [r7, #5]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f000 f9df 	bl	8000f64 <nrf24l01p_set_rf_air_data_rate>
    nrf24l01p_set_rf_tx_output_power(_0dBm);
 8000ba6:	2003      	movs	r0, #3
 8000ba8:	f000 f9bf 	bl	8000f2a <nrf24l01p_set_rf_tx_output_power>

    nrf24l01p_set_crc_length(1);
 8000bac:	2001      	movs	r0, #1
 8000bae:	f000 f932 	bl	8000e16 <nrf24l01p_set_crc_length>
    nrf24l01p_set_address_widths(5);
 8000bb2:	2005      	movs	r0, #5
 8000bb4:	f000 f952 	bl	8000e5c <nrf24l01p_set_address_widths>

    nrf24l01p_auto_retransmit_count(3);
 8000bb8:	2003      	movs	r0, #3
 8000bba:	f000 f95f 	bl	8000e7c <nrf24l01p_auto_retransmit_count>
    nrf24l01p_auto_retransmit_delay(250);
 8000bbe:	20fa      	movs	r0, #250	; 0xfa
 8000bc0:	f000 f978 	bl	8000eb4 <nrf24l01p_auto_retransmit_delay>
    
    ce_high();
 8000bc4:	f7ff ff6a 	bl	8000a9c <ce_high>
}
 8000bc8:	bf00      	nop
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <nrf24l01p_rx_receive>:

    ce_high();
}

void nrf24l01p_rx_receive(uint8_t* rx_payload)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
    nrf24l01p_read_rx_fifo(rx_payload);
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f000 f877 	bl	8000ccc <nrf24l01p_read_rx_fifo>
    nrf24l01p_clear_rx_dr();
 8000bde:	f000 f8f1 	bl	8000dc4 <nrf24l01p_clear_rx_dr>

    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000be2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000be6:	4803      	ldr	r0, [pc, #12]	; (8000bf4 <nrf24l01p_rx_receive+0x24>)
 8000be8:	f000 fd55 	bl	8001696 <HAL_GPIO_TogglePin>
}
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40020800 	.word	0x40020800

08000bf8 <nrf24l01p_reset>:
    }
}

/* nRF24L01+ Sub Functions */
void nrf24l01p_reset()
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
    // Reset pins
    cs_high();
 8000bfc:	f7ff ff36 	bl	8000a6c <cs_high>
    ce_low();
 8000c00:	f7ff ff58 	bl	8000ab4 <ce_low>

    // Reset registers
    write_register(NRF24L01P_REG_CONFIG, 0x08);
 8000c04:	2108      	movs	r1, #8
 8000c06:	2000      	movs	r0, #0
 8000c08:	f7ff ff86 	bl	8000b18 <write_register>
    write_register(NRF24L01P_REG_EN_AA, 0x3F);
 8000c0c:	213f      	movs	r1, #63	; 0x3f
 8000c0e:	2001      	movs	r0, #1
 8000c10:	f7ff ff82 	bl	8000b18 <write_register>
    write_register(NRF24L01P_REG_EN_RXADDR, 0x03);
 8000c14:	2103      	movs	r1, #3
 8000c16:	2002      	movs	r0, #2
 8000c18:	f7ff ff7e 	bl	8000b18 <write_register>
    write_register(NRF24L01P_REG_SETUP_AW, 0x03);
 8000c1c:	2103      	movs	r1, #3
 8000c1e:	2003      	movs	r0, #3
 8000c20:	f7ff ff7a 	bl	8000b18 <write_register>
    write_register(NRF24L01P_REG_SETUP_RETR, 0x03);
 8000c24:	2103      	movs	r1, #3
 8000c26:	2004      	movs	r0, #4
 8000c28:	f7ff ff76 	bl	8000b18 <write_register>
    write_register(NRF24L01P_REG_RF_CH, 0x02);
 8000c2c:	2102      	movs	r1, #2
 8000c2e:	2005      	movs	r0, #5
 8000c30:	f7ff ff72 	bl	8000b18 <write_register>
    write_register(NRF24L01P_REG_RF_SETUP, 0x07);
 8000c34:	2107      	movs	r1, #7
 8000c36:	2006      	movs	r0, #6
 8000c38:	f7ff ff6e 	bl	8000b18 <write_register>
    write_register(NRF24L01P_REG_STATUS, 0x7E);
 8000c3c:	217e      	movs	r1, #126	; 0x7e
 8000c3e:	2007      	movs	r0, #7
 8000c40:	f7ff ff6a 	bl	8000b18 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 8000c44:	2100      	movs	r1, #0
 8000c46:	2011      	movs	r0, #17
 8000c48:	f7ff ff66 	bl	8000b18 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	2011      	movs	r0, #17
 8000c50:	f7ff ff62 	bl	8000b18 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P1, 0x00);
 8000c54:	2100      	movs	r1, #0
 8000c56:	2012      	movs	r0, #18
 8000c58:	f7ff ff5e 	bl	8000b18 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P2, 0x00);
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	2013      	movs	r0, #19
 8000c60:	f7ff ff5a 	bl	8000b18 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P3, 0x00);
 8000c64:	2100      	movs	r1, #0
 8000c66:	2014      	movs	r0, #20
 8000c68:	f7ff ff56 	bl	8000b18 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P4, 0x00);
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	2015      	movs	r0, #21
 8000c70:	f7ff ff52 	bl	8000b18 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P5, 0x00);
 8000c74:	2100      	movs	r1, #0
 8000c76:	2016      	movs	r0, #22
 8000c78:	f7ff ff4e 	bl	8000b18 <write_register>
    write_register(NRF24L01P_REG_FIFO_STATUS, 0x11);
 8000c7c:	2111      	movs	r1, #17
 8000c7e:	2017      	movs	r0, #23
 8000c80:	f7ff ff4a 	bl	8000b18 <write_register>
    write_register(NRF24L01P_REG_DYNPD, 0x00);
 8000c84:	2100      	movs	r1, #0
 8000c86:	201c      	movs	r0, #28
 8000c88:	f7ff ff46 	bl	8000b18 <write_register>
    write_register(NRF24L01P_REG_FEATURE, 0x00);
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	201d      	movs	r0, #29
 8000c90:	f7ff ff42 	bl	8000b18 <write_register>

    // Reset FIFO
    nrf24l01p_flush_rx_fifo();
 8000c94:	f000 f83e 	bl	8000d14 <nrf24l01p_flush_rx_fifo>
    nrf24l01p_flush_tx_fifo();
 8000c98:	f000 f854 	bl	8000d44 <nrf24l01p_flush_tx_fifo>
}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <nrf24l01p_prx_mode>:

void nrf24l01p_prx_mode()
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f7ff ff10 	bl	8000acc <read_register>
 8000cac:	4603      	mov	r3, r0
 8000cae:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 0;
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	f043 0301 	orr.w	r3, r3, #1
 8000cb6:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	4619      	mov	r1, r3
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f7ff ff2b 	bl	8000b18 <write_register>
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
	...

08000ccc <nrf24l01p_read_rx_fifo>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

uint8_t nrf24l01p_read_rx_fifo(uint8_t* rx_payload)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af02      	add	r7, sp, #8
 8000cd2:	6078      	str	r0, [r7, #4]
    uint8_t command = NRF24L01P_CMD_R_RX_PAYLOAD;
 8000cd4:	2361      	movs	r3, #97	; 0x61
 8000cd6:	73fb      	strb	r3, [r7, #15]
    uint8_t status;

    cs_low();
 8000cd8:	f7ff fed4 	bl	8000a84 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000cdc:	f107 020e 	add.w	r2, r7, #14
 8000ce0:	f107 010f 	add.w	r1, r7, #15
 8000ce4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000ce8:	9300      	str	r3, [sp, #0]
 8000cea:	2301      	movs	r3, #1
 8000cec:	4808      	ldr	r0, [pc, #32]	; (8000d10 <nrf24l01p_read_rx_fifo+0x44>)
 8000cee:	f001 fc41 	bl	8002574 <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(NRF24L01P_SPI, rx_payload, NRF24L01P_PAYLOAD_LENGTH, 2000);
 8000cf2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000cf6:	2208      	movs	r2, #8
 8000cf8:	6879      	ldr	r1, [r7, #4]
 8000cfa:	4805      	ldr	r0, [pc, #20]	; (8000d10 <nrf24l01p_read_rx_fifo+0x44>)
 8000cfc:	f001 fb22 	bl	8002344 <HAL_SPI_Receive>
    cs_high();
 8000d00:	f7ff feb4 	bl	8000a6c <cs_high>

    return status;
 8000d04:	7bbb      	ldrb	r3, [r7, #14]
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3710      	adds	r7, #16
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000034 	.word	0x20000034

08000d14 <nrf24l01p_flush_rx_fifo>:

    return status;
}

void nrf24l01p_flush_rx_fifo()
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_RX;
 8000d1a:	23e2      	movs	r3, #226	; 0xe2
 8000d1c:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8000d1e:	f7ff feb1 	bl	8000a84 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000d22:	1dba      	adds	r2, r7, #6
 8000d24:	1df9      	adds	r1, r7, #7
 8000d26:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000d2a:	9300      	str	r3, [sp, #0]
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	4804      	ldr	r0, [pc, #16]	; (8000d40 <nrf24l01p_flush_rx_fifo+0x2c>)
 8000d30:	f001 fc20 	bl	8002574 <HAL_SPI_TransmitReceive>
    cs_high();
 8000d34:	f7ff fe9a 	bl	8000a6c <cs_high>
}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000034 	.word	0x20000034

08000d44 <nrf24l01p_flush_tx_fifo>:

void nrf24l01p_flush_tx_fifo()
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_TX;
 8000d4a:	23e1      	movs	r3, #225	; 0xe1
 8000d4c:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8000d4e:	f7ff fe99 	bl	8000a84 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000d52:	1dba      	adds	r2, r7, #6
 8000d54:	1df9      	adds	r1, r7, #7
 8000d56:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000d5a:	9300      	str	r3, [sp, #0]
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	4804      	ldr	r0, [pc, #16]	; (8000d70 <nrf24l01p_flush_tx_fifo+0x2c>)
 8000d60:	f001 fc08 	bl	8002574 <HAL_SPI_TransmitReceive>
    cs_high();
 8000d64:	f7ff fe82 	bl	8000a6c <cs_high>
}
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20000034 	.word	0x20000034

08000d74 <nrf24l01p_get_status>:

uint8_t nrf24l01p_get_status()
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_NOP;
 8000d7a:	23ff      	movs	r3, #255	; 0xff
 8000d7c:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8000d7e:	f7ff fe81 	bl	8000a84 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000d82:	1dba      	adds	r2, r7, #6
 8000d84:	1df9      	adds	r1, r7, #7
 8000d86:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000d8a:	9300      	str	r3, [sp, #0]
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	4805      	ldr	r0, [pc, #20]	; (8000da4 <nrf24l01p_get_status+0x30>)
 8000d90:	f001 fbf0 	bl	8002574 <HAL_SPI_TransmitReceive>
    cs_high(); 
 8000d94:	f7ff fe6a 	bl	8000a6c <cs_high>

    return status;
 8000d98:	79bb      	ldrb	r3, [r7, #6]
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000034 	.word	0x20000034

08000da8 <nrf24l01p_rx_set_payload_widths>:
{
    return read_register(NRF24L01P_REG_FIFO_STATUS);
}

void nrf24l01p_rx_set_payload_widths(widths bytes)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_RX_PW_P0, bytes);
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	4619      	mov	r1, r3
 8000db6:	2011      	movs	r0, #17
 8000db8:	f7ff feae 	bl	8000b18 <write_register>
}
 8000dbc:	bf00      	nop
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <nrf24l01p_clear_rx_dr>:

void nrf24l01p_clear_rx_dr()
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 8000dca:	f7ff ffd3 	bl	8000d74 <nrf24l01p_get_status>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x40;
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dd8:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status);
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	4619      	mov	r1, r3
 8000dde:	2007      	movs	r0, #7
 8000de0:	f7ff fe9a 	bl	8000b18 <write_register>
}
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <nrf24l01p_power_up>:

    write_register(NRF24L01P_REG_STATUS, new_status); 
}

void nrf24l01p_power_up()
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8000df2:	2000      	movs	r0, #0
 8000df4:	f7ff fe6a 	bl	8000acc <read_register>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 1;
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	f043 0302 	orr.w	r3, r3, #2
 8000e02:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	4619      	mov	r1, r3
 8000e08:	2000      	movs	r0, #0
 8000e0a:	f7ff fe85 	bl	8000b18 <write_register>
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <nrf24l01p_set_crc_length>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_set_crc_length(length bytes)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b084      	sub	sp, #16
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	71fb      	strb	r3, [r7, #7]
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8000e20:	2000      	movs	r0, #0
 8000e22:	f7ff fe53 	bl	8000acc <read_register>
 8000e26:	4603      	mov	r3, r0
 8000e28:	73fb      	strb	r3, [r7, #15]
    
    switch(bytes)
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d002      	beq.n	8000e36 <nrf24l01p_set_crc_length+0x20>
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d005      	beq.n	8000e40 <nrf24l01p_set_crc_length+0x2a>
 8000e34:	e009      	b.n	8000e4a <nrf24l01p_set_crc_length+0x34>
    {
        // CRCO bit in CONFIG resiger set 0
        case 1:
            new_config &= 0xFB;
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
 8000e38:	f023 0304 	bic.w	r3, r3, #4
 8000e3c:	73fb      	strb	r3, [r7, #15]
            break;
 8000e3e:	e004      	b.n	8000e4a <nrf24l01p_set_crc_length+0x34>
        // CRCO bit in CONFIG resiger set 1
        case 2:
            new_config |= 1 << 2;
 8000e40:	7bfb      	ldrb	r3, [r7, #15]
 8000e42:	f043 0304 	orr.w	r3, r3, #4
 8000e46:	73fb      	strb	r3, [r7, #15]
            break;
 8000e48:	bf00      	nop
    }

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8000e4a:	7bfb      	ldrb	r3, [r7, #15]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f7ff fe62 	bl	8000b18 <write_register>
}
 8000e54:	bf00      	nop
 8000e56:	3710      	adds	r7, #16
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <nrf24l01p_set_address_widths>:

void nrf24l01p_set_address_widths(widths bytes)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_SETUP_AW, bytes - 2);
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	3b02      	subs	r3, #2
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	2003      	movs	r0, #3
 8000e70:	f7ff fe52 	bl	8000b18 <write_register>
}
 8000e74:	bf00      	nop
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <nrf24l01p_auto_retransmit_count>:

void nrf24l01p_auto_retransmit_count(count cnt)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 8000e86:	2004      	movs	r0, #4
 8000e88:	f7ff fe20 	bl	8000acc <read_register>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	73fb      	strb	r3, [r7, #15]
    
    // Reset ARC register 0
    new_setup_retr |= 0xF0;
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
 8000e92:	f063 030f 	orn	r3, r3, #15
 8000e96:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= cnt;
 8000e98:	7bfa      	ldrb	r2, [r7, #15]
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	2004      	movs	r0, #4
 8000ea6:	f7ff fe37 	bl	8000b18 <write_register>
}
 8000eaa:	bf00      	nop
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
	...

08000eb4 <nrf24l01p_auto_retransmit_delay>:

void nrf24l01p_auto_retransmit_delay(delay us)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	80fb      	strh	r3, [r7, #6]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 8000ebe:	2004      	movs	r0, #4
 8000ec0:	f7ff fe04 	bl	8000acc <read_register>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	73fb      	strb	r3, [r7, #15]

    // Reset ARD register 0
    new_setup_retr |= 0x0F;
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
 8000eca:	f043 030f 	orr.w	r3, r3, #15
 8000ece:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= ((us / 250) - 1) << 4;
 8000ed0:	88fb      	ldrh	r3, [r7, #6]
 8000ed2:	4a0b      	ldr	r2, [pc, #44]	; (8000f00 <nrf24l01p_auto_retransmit_delay+0x4c>)
 8000ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ed8:	091b      	lsrs	r3, r3, #4
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	3b01      	subs	r3, #1
 8000ede:	011b      	lsls	r3, r3, #4
 8000ee0:	b25a      	sxtb	r2, r3
 8000ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	b25b      	sxtb	r3, r3
 8000eea:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8000eec:	7bfb      	ldrb	r3, [r7, #15]
 8000eee:	4619      	mov	r1, r3
 8000ef0:	2004      	movs	r0, #4
 8000ef2:	f7ff fe11 	bl	8000b18 <write_register>
}
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	10624dd3 	.word	0x10624dd3

08000f04 <nrf24l01p_set_rf_channel>:

void nrf24l01p_set_rf_channel(channel MHz)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	80fb      	strh	r3, [r7, #6]
	uint16_t new_rf_ch = MHz - 2400;
 8000f0e:	88fb      	ldrh	r3, [r7, #6]
 8000f10:	f5a3 6316 	sub.w	r3, r3, #2400	; 0x960
 8000f14:	81fb      	strh	r3, [r7, #14]
    write_register(NRF24L01P_REG_RF_CH, new_rf_ch);
 8000f16:	89fb      	ldrh	r3, [r7, #14]
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	2005      	movs	r0, #5
 8000f1e:	f7ff fdfb 	bl	8000b18 <write_register>
}
 8000f22:	bf00      	nop
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <nrf24l01p_set_rf_tx_output_power>:

void nrf24l01p_set_rf_tx_output_power(output_power dBm)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b084      	sub	sp, #16
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	4603      	mov	r3, r0
 8000f32:	71fb      	strb	r3, [r7, #7]
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xF9;
 8000f34:	2006      	movs	r0, #6
 8000f36:	f7ff fdc9 	bl	8000acc <read_register>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	f023 0306 	bic.w	r3, r3, #6
 8000f40:	73fb      	strb	r3, [r7, #15]
    new_rf_setup |= (dBm << 1);
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	b25a      	sxtb	r2, r3
 8000f48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	b25b      	sxtb	r3, r3
 8000f50:	73fb      	strb	r3, [r7, #15]

    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8000f52:	7bfb      	ldrb	r3, [r7, #15]
 8000f54:	4619      	mov	r1, r3
 8000f56:	2006      	movs	r0, #6
 8000f58:	f7ff fdde 	bl	8000b18 <write_register>
}
 8000f5c:	bf00      	nop
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <nrf24l01p_set_rf_air_data_rate>:

void nrf24l01p_set_rf_air_data_rate(air_data_rate bps)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
    // Set value to 0
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xD7;
 8000f6e:	2006      	movs	r0, #6
 8000f70:	f7ff fdac 	bl	8000acc <read_register>
 8000f74:	4603      	mov	r3, r0
 8000f76:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000f7a:	73fb      	strb	r3, [r7, #15]
    
    switch(bps)
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d00a      	beq.n	8000f98 <nrf24l01p_set_rf_air_data_rate+0x34>
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	dc0e      	bgt.n	8000fa4 <nrf24l01p_set_rf_air_data_rate+0x40>
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d00b      	beq.n	8000fa2 <nrf24l01p_set_rf_air_data_rate+0x3e>
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d10a      	bne.n	8000fa4 <nrf24l01p_set_rf_air_data_rate+0x40>
    {
        case _1Mbps: 
            break;
        case _2Mbps: 
            new_rf_setup |= 1 << 3;
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	f043 0308 	orr.w	r3, r3, #8
 8000f94:	73fb      	strb	r3, [r7, #15]
            break;
 8000f96:	e005      	b.n	8000fa4 <nrf24l01p_set_rf_air_data_rate+0x40>
        case _250kbps:
            new_rf_setup |= 1 << 5;
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
 8000f9a:	f043 0320 	orr.w	r3, r3, #32
 8000f9e:	73fb      	strb	r3, [r7, #15]
            break;
 8000fa0:	e000      	b.n	8000fa4 <nrf24l01p_set_rf_air_data_rate+0x40>
            break;
 8000fa2:	bf00      	nop
    }
    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	2006      	movs	r0, #6
 8000faa:	f7ff fdb5 	bl	8000b18 <write_register>
 8000fae:	bf00      	nop
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ff0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000fbc:	f7ff fcd2 	bl	8000964 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fc0:	480c      	ldr	r0, [pc, #48]	; (8000ff4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fc2:	490d      	ldr	r1, [pc, #52]	; (8000ff8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fc4:	4a0d      	ldr	r2, [pc, #52]	; (8000ffc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc8:	e002      	b.n	8000fd0 <LoopCopyDataInit>

08000fca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fce:	3304      	adds	r3, #4

08000fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd4:	d3f9      	bcc.n	8000fca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd6:	4a0a      	ldr	r2, [pc, #40]	; (8001000 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fd8:	4c0a      	ldr	r4, [pc, #40]	; (8001004 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fdc:	e001      	b.n	8000fe2 <LoopFillZerobss>

08000fde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe0:	3204      	adds	r2, #4

08000fe2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe4:	d3fb      	bcc.n	8000fde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fe6:	f002 f9cb 	bl	8003380 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fea:	f7ff fb0b 	bl	8000604 <main>
  bx  lr    
 8000fee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ff0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ff4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ffc:	0800340c 	.word	0x0800340c
  ldr r2, =_sbss
 8001000:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001004:	200000d8 	.word	0x200000d8

08001008 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001008:	e7fe      	b.n	8001008 <ADC_IRQHandler>
	...

0800100c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001010:	4b0e      	ldr	r3, [pc, #56]	; (800104c <HAL_Init+0x40>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a0d      	ldr	r2, [pc, #52]	; (800104c <HAL_Init+0x40>)
 8001016:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800101a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800101c:	4b0b      	ldr	r3, [pc, #44]	; (800104c <HAL_Init+0x40>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a0a      	ldr	r2, [pc, #40]	; (800104c <HAL_Init+0x40>)
 8001022:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001026:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001028:	4b08      	ldr	r3, [pc, #32]	; (800104c <HAL_Init+0x40>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a07      	ldr	r2, [pc, #28]	; (800104c <HAL_Init+0x40>)
 800102e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001032:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001034:	2003      	movs	r0, #3
 8001036:	f000 f94f 	bl	80012d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800103a:	2000      	movs	r0, #0
 800103c:	f000 f808 	bl	8001050 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001040:	f7ff fc36 	bl	80008b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40023c00 	.word	0x40023c00

08001050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001058:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <HAL_InitTick+0x54>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <HAL_InitTick+0x58>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	4619      	mov	r1, r3
 8001062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001066:	fbb3 f3f1 	udiv	r3, r3, r1
 800106a:	fbb2 f3f3 	udiv	r3, r2, r3
 800106e:	4618      	mov	r0, r3
 8001070:	f000 f967 	bl	8001342 <HAL_SYSTICK_Config>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e00e      	b.n	800109c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b0f      	cmp	r3, #15
 8001082:	d80a      	bhi.n	800109a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001084:	2200      	movs	r2, #0
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	f04f 30ff 	mov.w	r0, #4294967295
 800108c:	f000 f92f 	bl	80012ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001090:	4a06      	ldr	r2, [pc, #24]	; (80010ac <HAL_InitTick+0x5c>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001096:	2300      	movs	r3, #0
 8001098:	e000      	b.n	800109c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
}
 800109c:	4618      	mov	r0, r3
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000000 	.word	0x20000000
 80010a8:	20000008 	.word	0x20000008
 80010ac:	20000004 	.word	0x20000004

080010b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <HAL_IncTick+0x20>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_IncTick+0x24>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4413      	add	r3, r2
 80010c0:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <HAL_IncTick+0x24>)
 80010c2:	6013      	str	r3, [r2, #0]
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	20000008 	.word	0x20000008
 80010d4:	200000d4 	.word	0x200000d4

080010d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  return uwTick;
 80010dc:	4b03      	ldr	r3, [pc, #12]	; (80010ec <HAL_GetTick+0x14>)
 80010de:	681b      	ldr	r3, [r3, #0]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	200000d4 	.word	0x200000d4

080010f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f8:	f7ff ffee 	bl	80010d8 <HAL_GetTick>
 80010fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001108:	d005      	beq.n	8001116 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800110a:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <HAL_Delay+0x44>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	461a      	mov	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4413      	add	r3, r2
 8001114:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001116:	bf00      	nop
 8001118:	f7ff ffde 	bl	80010d8 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	429a      	cmp	r2, r3
 8001126:	d8f7      	bhi.n	8001118 <HAL_Delay+0x28>
  {
  }
}
 8001128:	bf00      	nop
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000008 	.word	0x20000008

08001138 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <__NVIC_SetPriorityGrouping+0x44>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800114e:	68ba      	ldr	r2, [r7, #8]
 8001150:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001154:	4013      	ands	r3, r2
 8001156:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001160:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001168:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800116a:	4a04      	ldr	r2, [pc, #16]	; (800117c <__NVIC_SetPriorityGrouping+0x44>)
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	60d3      	str	r3, [r2, #12]
}
 8001170:	bf00      	nop
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001184:	4b04      	ldr	r3, [pc, #16]	; (8001198 <__NVIC_GetPriorityGrouping+0x18>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	0a1b      	lsrs	r3, r3, #8
 800118a:	f003 0307 	and.w	r3, r3, #7
}
 800118e:	4618      	mov	r0, r3
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	db0b      	blt.n	80011c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	f003 021f 	and.w	r2, r3, #31
 80011b4:	4907      	ldr	r1, [pc, #28]	; (80011d4 <__NVIC_EnableIRQ+0x38>)
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	095b      	lsrs	r3, r3, #5
 80011bc:	2001      	movs	r0, #1
 80011be:	fa00 f202 	lsl.w	r2, r0, r2
 80011c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	e000e100 	.word	0xe000e100

080011d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	6039      	str	r1, [r7, #0]
 80011e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	db0a      	blt.n	8001202 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	490c      	ldr	r1, [pc, #48]	; (8001224 <__NVIC_SetPriority+0x4c>)
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	0112      	lsls	r2, r2, #4
 80011f8:	b2d2      	uxtb	r2, r2
 80011fa:	440b      	add	r3, r1
 80011fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001200:	e00a      	b.n	8001218 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	b2da      	uxtb	r2, r3
 8001206:	4908      	ldr	r1, [pc, #32]	; (8001228 <__NVIC_SetPriority+0x50>)
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	f003 030f 	and.w	r3, r3, #15
 800120e:	3b04      	subs	r3, #4
 8001210:	0112      	lsls	r2, r2, #4
 8001212:	b2d2      	uxtb	r2, r2
 8001214:	440b      	add	r3, r1
 8001216:	761a      	strb	r2, [r3, #24]
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000e100 	.word	0xe000e100
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800122c:	b480      	push	{r7}
 800122e:	b089      	sub	sp, #36	; 0x24
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	f1c3 0307 	rsb	r3, r3, #7
 8001246:	2b04      	cmp	r3, #4
 8001248:	bf28      	it	cs
 800124a:	2304      	movcs	r3, #4
 800124c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	3304      	adds	r3, #4
 8001252:	2b06      	cmp	r3, #6
 8001254:	d902      	bls.n	800125c <NVIC_EncodePriority+0x30>
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3b03      	subs	r3, #3
 800125a:	e000      	b.n	800125e <NVIC_EncodePriority+0x32>
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001260:	f04f 32ff 	mov.w	r2, #4294967295
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43da      	mvns	r2, r3
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	401a      	ands	r2, r3
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001274:	f04f 31ff 	mov.w	r1, #4294967295
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	fa01 f303 	lsl.w	r3, r1, r3
 800127e:	43d9      	mvns	r1, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001284:	4313      	orrs	r3, r2
         );
}
 8001286:	4618      	mov	r0, r3
 8001288:	3724      	adds	r7, #36	; 0x24
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
	...

08001294 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3b01      	subs	r3, #1
 80012a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012a4:	d301      	bcc.n	80012aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012a6:	2301      	movs	r3, #1
 80012a8:	e00f      	b.n	80012ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012aa:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <SysTick_Config+0x40>)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012b2:	210f      	movs	r1, #15
 80012b4:	f04f 30ff 	mov.w	r0, #4294967295
 80012b8:	f7ff ff8e 	bl	80011d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012bc:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <SysTick_Config+0x40>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012c2:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <SysTick_Config+0x40>)
 80012c4:	2207      	movs	r2, #7
 80012c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	e000e010 	.word	0xe000e010

080012d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff ff29 	bl	8001138 <__NVIC_SetPriorityGrouping>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b086      	sub	sp, #24
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	4603      	mov	r3, r0
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
 80012fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001300:	f7ff ff3e 	bl	8001180 <__NVIC_GetPriorityGrouping>
 8001304:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	68b9      	ldr	r1, [r7, #8]
 800130a:	6978      	ldr	r0, [r7, #20]
 800130c:	f7ff ff8e 	bl	800122c <NVIC_EncodePriority>
 8001310:	4602      	mov	r2, r0
 8001312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001316:	4611      	mov	r1, r2
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff5d 	bl	80011d8 <__NVIC_SetPriority>
}
 800131e:	bf00      	nop
 8001320:	3718      	adds	r7, #24
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	4603      	mov	r3, r0
 800132e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ff31 	bl	800119c <__NVIC_EnableIRQ>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff ffa2 	bl	8001294 <SysTick_Config>
 8001350:	4603      	mov	r3, r0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800135c:	b480      	push	{r7}
 800135e:	b089      	sub	sp, #36	; 0x24
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800136a:	2300      	movs	r3, #0
 800136c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800136e:	2300      	movs	r3, #0
 8001370:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
 8001376:	e159      	b.n	800162c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001378:	2201      	movs	r2, #1
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	697a      	ldr	r2, [r7, #20]
 8001388:	4013      	ands	r3, r2
 800138a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	429a      	cmp	r2, r3
 8001392:	f040 8148 	bne.w	8001626 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f003 0303 	and.w	r3, r3, #3
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d005      	beq.n	80013ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d130      	bne.n	8001410 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	2203      	movs	r2, #3
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	43db      	mvns	r3, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4013      	ands	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	68da      	ldr	r2, [r3, #12]
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013e4:	2201      	movs	r2, #1
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4013      	ands	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	091b      	lsrs	r3, r3, #4
 80013fa:	f003 0201 	and.w	r2, r3, #1
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4313      	orrs	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f003 0303 	and.w	r3, r3, #3
 8001418:	2b03      	cmp	r3, #3
 800141a:	d017      	beq.n	800144c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	2203      	movs	r2, #3
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4013      	ands	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	689a      	ldr	r2, [r3, #8]
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4313      	orrs	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f003 0303 	and.w	r3, r3, #3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d123      	bne.n	80014a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	08da      	lsrs	r2, r3, #3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3208      	adds	r2, #8
 8001460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001464:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	f003 0307 	and.w	r3, r3, #7
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	220f      	movs	r2, #15
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	43db      	mvns	r3, r3
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4013      	ands	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	691a      	ldr	r2, [r3, #16]
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4313      	orrs	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	08da      	lsrs	r2, r3, #3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3208      	adds	r2, #8
 800149a:	69b9      	ldr	r1, [r7, #24]
 800149c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	2203      	movs	r2, #3
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	43db      	mvns	r3, r3
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	4013      	ands	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 0203 	and.w	r2, r3, #3
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 80a2 	beq.w	8001626 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	4b57      	ldr	r3, [pc, #348]	; (8001644 <HAL_GPIO_Init+0x2e8>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ea:	4a56      	ldr	r2, [pc, #344]	; (8001644 <HAL_GPIO_Init+0x2e8>)
 80014ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f0:	6453      	str	r3, [r2, #68]	; 0x44
 80014f2:	4b54      	ldr	r3, [pc, #336]	; (8001644 <HAL_GPIO_Init+0x2e8>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014fe:	4a52      	ldr	r2, [pc, #328]	; (8001648 <HAL_GPIO_Init+0x2ec>)
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	089b      	lsrs	r3, r3, #2
 8001504:	3302      	adds	r3, #2
 8001506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800150a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f003 0303 	and.w	r3, r3, #3
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	220f      	movs	r2, #15
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43db      	mvns	r3, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4013      	ands	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a49      	ldr	r2, [pc, #292]	; (800164c <HAL_GPIO_Init+0x2f0>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d019      	beq.n	800155e <HAL_GPIO_Init+0x202>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a48      	ldr	r2, [pc, #288]	; (8001650 <HAL_GPIO_Init+0x2f4>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d013      	beq.n	800155a <HAL_GPIO_Init+0x1fe>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a47      	ldr	r2, [pc, #284]	; (8001654 <HAL_GPIO_Init+0x2f8>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d00d      	beq.n	8001556 <HAL_GPIO_Init+0x1fa>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a46      	ldr	r2, [pc, #280]	; (8001658 <HAL_GPIO_Init+0x2fc>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d007      	beq.n	8001552 <HAL_GPIO_Init+0x1f6>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a45      	ldr	r2, [pc, #276]	; (800165c <HAL_GPIO_Init+0x300>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d101      	bne.n	800154e <HAL_GPIO_Init+0x1f2>
 800154a:	2304      	movs	r3, #4
 800154c:	e008      	b.n	8001560 <HAL_GPIO_Init+0x204>
 800154e:	2307      	movs	r3, #7
 8001550:	e006      	b.n	8001560 <HAL_GPIO_Init+0x204>
 8001552:	2303      	movs	r3, #3
 8001554:	e004      	b.n	8001560 <HAL_GPIO_Init+0x204>
 8001556:	2302      	movs	r3, #2
 8001558:	e002      	b.n	8001560 <HAL_GPIO_Init+0x204>
 800155a:	2301      	movs	r3, #1
 800155c:	e000      	b.n	8001560 <HAL_GPIO_Init+0x204>
 800155e:	2300      	movs	r3, #0
 8001560:	69fa      	ldr	r2, [r7, #28]
 8001562:	f002 0203 	and.w	r2, r2, #3
 8001566:	0092      	lsls	r2, r2, #2
 8001568:	4093      	lsls	r3, r2
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4313      	orrs	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001570:	4935      	ldr	r1, [pc, #212]	; (8001648 <HAL_GPIO_Init+0x2ec>)
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	089b      	lsrs	r3, r3, #2
 8001576:	3302      	adds	r3, #2
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800157e:	4b38      	ldr	r3, [pc, #224]	; (8001660 <HAL_GPIO_Init+0x304>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	43db      	mvns	r3, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4013      	ands	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	4313      	orrs	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015a2:	4a2f      	ldr	r2, [pc, #188]	; (8001660 <HAL_GPIO_Init+0x304>)
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015a8:	4b2d      	ldr	r3, [pc, #180]	; (8001660 <HAL_GPIO_Init+0x304>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	43db      	mvns	r3, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4013      	ands	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015cc:	4a24      	ldr	r2, [pc, #144]	; (8001660 <HAL_GPIO_Init+0x304>)
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015d2:	4b23      	ldr	r3, [pc, #140]	; (8001660 <HAL_GPIO_Init+0x304>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	43db      	mvns	r3, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4013      	ands	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015f6:	4a1a      	ldr	r2, [pc, #104]	; (8001660 <HAL_GPIO_Init+0x304>)
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015fc:	4b18      	ldr	r3, [pc, #96]	; (8001660 <HAL_GPIO_Init+0x304>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	43db      	mvns	r3, r3
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4013      	ands	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d003      	beq.n	8001620 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	4313      	orrs	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001620:	4a0f      	ldr	r2, [pc, #60]	; (8001660 <HAL_GPIO_Init+0x304>)
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	3301      	adds	r3, #1
 800162a:	61fb      	str	r3, [r7, #28]
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	2b0f      	cmp	r3, #15
 8001630:	f67f aea2 	bls.w	8001378 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001634:	bf00      	nop
 8001636:	bf00      	nop
 8001638:	3724      	adds	r7, #36	; 0x24
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	40023800 	.word	0x40023800
 8001648:	40013800 	.word	0x40013800
 800164c:	40020000 	.word	0x40020000
 8001650:	40020400 	.word	0x40020400
 8001654:	40020800 	.word	0x40020800
 8001658:	40020c00 	.word	0x40020c00
 800165c:	40021000 	.word	0x40021000
 8001660:	40013c00 	.word	0x40013c00

08001664 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	807b      	strh	r3, [r7, #2]
 8001670:	4613      	mov	r3, r2
 8001672:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001674:	787b      	ldrb	r3, [r7, #1]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800167a:	887a      	ldrh	r2, [r7, #2]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001680:	e003      	b.n	800168a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001682:	887b      	ldrh	r3, [r7, #2]
 8001684:	041a      	lsls	r2, r3, #16
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	619a      	str	r2, [r3, #24]
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001696:	b480      	push	{r7}
 8001698:	b085      	sub	sp, #20
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
 800169e:	460b      	mov	r3, r1
 80016a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	695b      	ldr	r3, [r3, #20]
 80016a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016a8:	887a      	ldrh	r2, [r7, #2]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	4013      	ands	r3, r2
 80016ae:	041a      	lsls	r2, r3, #16
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	43d9      	mvns	r1, r3
 80016b4:	887b      	ldrh	r3, [r7, #2]
 80016b6:	400b      	ands	r3, r1
 80016b8:	431a      	orrs	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	619a      	str	r2, [r3, #24]
}
 80016be:	bf00      	nop
 80016c0:	3714      	adds	r7, #20
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
	...

080016cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80016d6:	4b08      	ldr	r3, [pc, #32]	; (80016f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016d8:	695a      	ldr	r2, [r3, #20]
 80016da:	88fb      	ldrh	r3, [r7, #6]
 80016dc:	4013      	ands	r3, r2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d006      	beq.n	80016f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016e2:	4a05      	ldr	r2, [pc, #20]	; (80016f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016e4:	88fb      	ldrh	r3, [r7, #6]
 80016e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016e8:	88fb      	ldrh	r3, [r7, #6]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff f844 	bl	8000778 <HAL_GPIO_EXTI_Callback>
  }
}
 80016f0:	bf00      	nop
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40013c00 	.word	0x40013c00

080016fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e267      	b.n	8001bde <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	2b00      	cmp	r3, #0
 8001718:	d075      	beq.n	8001806 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800171a:	4b88      	ldr	r3, [pc, #544]	; (800193c <HAL_RCC_OscConfig+0x240>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f003 030c 	and.w	r3, r3, #12
 8001722:	2b04      	cmp	r3, #4
 8001724:	d00c      	beq.n	8001740 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001726:	4b85      	ldr	r3, [pc, #532]	; (800193c <HAL_RCC_OscConfig+0x240>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800172e:	2b08      	cmp	r3, #8
 8001730:	d112      	bne.n	8001758 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001732:	4b82      	ldr	r3, [pc, #520]	; (800193c <HAL_RCC_OscConfig+0x240>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800173a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800173e:	d10b      	bne.n	8001758 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001740:	4b7e      	ldr	r3, [pc, #504]	; (800193c <HAL_RCC_OscConfig+0x240>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d05b      	beq.n	8001804 <HAL_RCC_OscConfig+0x108>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d157      	bne.n	8001804 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e242      	b.n	8001bde <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001760:	d106      	bne.n	8001770 <HAL_RCC_OscConfig+0x74>
 8001762:	4b76      	ldr	r3, [pc, #472]	; (800193c <HAL_RCC_OscConfig+0x240>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a75      	ldr	r2, [pc, #468]	; (800193c <HAL_RCC_OscConfig+0x240>)
 8001768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	e01d      	b.n	80017ac <HAL_RCC_OscConfig+0xb0>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001778:	d10c      	bne.n	8001794 <HAL_RCC_OscConfig+0x98>
 800177a:	4b70      	ldr	r3, [pc, #448]	; (800193c <HAL_RCC_OscConfig+0x240>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a6f      	ldr	r2, [pc, #444]	; (800193c <HAL_RCC_OscConfig+0x240>)
 8001780:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001784:	6013      	str	r3, [r2, #0]
 8001786:	4b6d      	ldr	r3, [pc, #436]	; (800193c <HAL_RCC_OscConfig+0x240>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a6c      	ldr	r2, [pc, #432]	; (800193c <HAL_RCC_OscConfig+0x240>)
 800178c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	e00b      	b.n	80017ac <HAL_RCC_OscConfig+0xb0>
 8001794:	4b69      	ldr	r3, [pc, #420]	; (800193c <HAL_RCC_OscConfig+0x240>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a68      	ldr	r2, [pc, #416]	; (800193c <HAL_RCC_OscConfig+0x240>)
 800179a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800179e:	6013      	str	r3, [r2, #0]
 80017a0:	4b66      	ldr	r3, [pc, #408]	; (800193c <HAL_RCC_OscConfig+0x240>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a65      	ldr	r2, [pc, #404]	; (800193c <HAL_RCC_OscConfig+0x240>)
 80017a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d013      	beq.n	80017dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b4:	f7ff fc90 	bl	80010d8 <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017bc:	f7ff fc8c 	bl	80010d8 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b64      	cmp	r3, #100	; 0x64
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e207      	b.n	8001bde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ce:	4b5b      	ldr	r3, [pc, #364]	; (800193c <HAL_RCC_OscConfig+0x240>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d0f0      	beq.n	80017bc <HAL_RCC_OscConfig+0xc0>
 80017da:	e014      	b.n	8001806 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017dc:	f7ff fc7c 	bl	80010d8 <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017e4:	f7ff fc78 	bl	80010d8 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b64      	cmp	r3, #100	; 0x64
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e1f3      	b.n	8001bde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017f6:	4b51      	ldr	r3, [pc, #324]	; (800193c <HAL_RCC_OscConfig+0x240>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1f0      	bne.n	80017e4 <HAL_RCC_OscConfig+0xe8>
 8001802:	e000      	b.n	8001806 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001804:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d063      	beq.n	80018da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001812:	4b4a      	ldr	r3, [pc, #296]	; (800193c <HAL_RCC_OscConfig+0x240>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f003 030c 	and.w	r3, r3, #12
 800181a:	2b00      	cmp	r3, #0
 800181c:	d00b      	beq.n	8001836 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800181e:	4b47      	ldr	r3, [pc, #284]	; (800193c <HAL_RCC_OscConfig+0x240>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001826:	2b08      	cmp	r3, #8
 8001828:	d11c      	bne.n	8001864 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800182a:	4b44      	ldr	r3, [pc, #272]	; (800193c <HAL_RCC_OscConfig+0x240>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d116      	bne.n	8001864 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001836:	4b41      	ldr	r3, [pc, #260]	; (800193c <HAL_RCC_OscConfig+0x240>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d005      	beq.n	800184e <HAL_RCC_OscConfig+0x152>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d001      	beq.n	800184e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e1c7      	b.n	8001bde <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800184e:	4b3b      	ldr	r3, [pc, #236]	; (800193c <HAL_RCC_OscConfig+0x240>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	4937      	ldr	r1, [pc, #220]	; (800193c <HAL_RCC_OscConfig+0x240>)
 800185e:	4313      	orrs	r3, r2
 8001860:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001862:	e03a      	b.n	80018da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d020      	beq.n	80018ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800186c:	4b34      	ldr	r3, [pc, #208]	; (8001940 <HAL_RCC_OscConfig+0x244>)
 800186e:	2201      	movs	r2, #1
 8001870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001872:	f7ff fc31 	bl	80010d8 <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001878:	e008      	b.n	800188c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800187a:	f7ff fc2d 	bl	80010d8 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e1a8      	b.n	8001bde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800188c:	4b2b      	ldr	r3, [pc, #172]	; (800193c <HAL_RCC_OscConfig+0x240>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d0f0      	beq.n	800187a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001898:	4b28      	ldr	r3, [pc, #160]	; (800193c <HAL_RCC_OscConfig+0x240>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	691b      	ldr	r3, [r3, #16]
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	4925      	ldr	r1, [pc, #148]	; (800193c <HAL_RCC_OscConfig+0x240>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	600b      	str	r3, [r1, #0]
 80018ac:	e015      	b.n	80018da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ae:	4b24      	ldr	r3, [pc, #144]	; (8001940 <HAL_RCC_OscConfig+0x244>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b4:	f7ff fc10 	bl	80010d8 <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018bc:	f7ff fc0c 	bl	80010d8 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e187      	b.n	8001bde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ce:	4b1b      	ldr	r3, [pc, #108]	; (800193c <HAL_RCC_OscConfig+0x240>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1f0      	bne.n	80018bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d036      	beq.n	8001954 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d016      	beq.n	800191c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ee:	4b15      	ldr	r3, [pc, #84]	; (8001944 <HAL_RCC_OscConfig+0x248>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f4:	f7ff fbf0 	bl	80010d8 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018fc:	f7ff fbec 	bl	80010d8 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e167      	b.n	8001bde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800190e:	4b0b      	ldr	r3, [pc, #44]	; (800193c <HAL_RCC_OscConfig+0x240>)
 8001910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d0f0      	beq.n	80018fc <HAL_RCC_OscConfig+0x200>
 800191a:	e01b      	b.n	8001954 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800191c:	4b09      	ldr	r3, [pc, #36]	; (8001944 <HAL_RCC_OscConfig+0x248>)
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001922:	f7ff fbd9 	bl	80010d8 <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001928:	e00e      	b.n	8001948 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800192a:	f7ff fbd5 	bl	80010d8 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d907      	bls.n	8001948 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e150      	b.n	8001bde <HAL_RCC_OscConfig+0x4e2>
 800193c:	40023800 	.word	0x40023800
 8001940:	42470000 	.word	0x42470000
 8001944:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001948:	4b88      	ldr	r3, [pc, #544]	; (8001b6c <HAL_RCC_OscConfig+0x470>)
 800194a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1ea      	bne.n	800192a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	2b00      	cmp	r3, #0
 800195e:	f000 8097 	beq.w	8001a90 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001962:	2300      	movs	r3, #0
 8001964:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001966:	4b81      	ldr	r3, [pc, #516]	; (8001b6c <HAL_RCC_OscConfig+0x470>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d10f      	bne.n	8001992 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	60bb      	str	r3, [r7, #8]
 8001976:	4b7d      	ldr	r3, [pc, #500]	; (8001b6c <HAL_RCC_OscConfig+0x470>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	4a7c      	ldr	r2, [pc, #496]	; (8001b6c <HAL_RCC_OscConfig+0x470>)
 800197c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001980:	6413      	str	r3, [r2, #64]	; 0x40
 8001982:	4b7a      	ldr	r3, [pc, #488]	; (8001b6c <HAL_RCC_OscConfig+0x470>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198a:	60bb      	str	r3, [r7, #8]
 800198c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800198e:	2301      	movs	r3, #1
 8001990:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001992:	4b77      	ldr	r3, [pc, #476]	; (8001b70 <HAL_RCC_OscConfig+0x474>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199a:	2b00      	cmp	r3, #0
 800199c:	d118      	bne.n	80019d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800199e:	4b74      	ldr	r3, [pc, #464]	; (8001b70 <HAL_RCC_OscConfig+0x474>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a73      	ldr	r2, [pc, #460]	; (8001b70 <HAL_RCC_OscConfig+0x474>)
 80019a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019aa:	f7ff fb95 	bl	80010d8 <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019b2:	f7ff fb91 	bl	80010d8 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e10c      	b.n	8001bde <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c4:	4b6a      	ldr	r3, [pc, #424]	; (8001b70 <HAL_RCC_OscConfig+0x474>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d0f0      	beq.n	80019b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d106      	bne.n	80019e6 <HAL_RCC_OscConfig+0x2ea>
 80019d8:	4b64      	ldr	r3, [pc, #400]	; (8001b6c <HAL_RCC_OscConfig+0x470>)
 80019da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019dc:	4a63      	ldr	r2, [pc, #396]	; (8001b6c <HAL_RCC_OscConfig+0x470>)
 80019de:	f043 0301 	orr.w	r3, r3, #1
 80019e2:	6713      	str	r3, [r2, #112]	; 0x70
 80019e4:	e01c      	b.n	8001a20 <HAL_RCC_OscConfig+0x324>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	2b05      	cmp	r3, #5
 80019ec:	d10c      	bne.n	8001a08 <HAL_RCC_OscConfig+0x30c>
 80019ee:	4b5f      	ldr	r3, [pc, #380]	; (8001b6c <HAL_RCC_OscConfig+0x470>)
 80019f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f2:	4a5e      	ldr	r2, [pc, #376]	; (8001b6c <HAL_RCC_OscConfig+0x470>)
 80019f4:	f043 0304 	orr.w	r3, r3, #4
 80019f8:	6713      	str	r3, [r2, #112]	; 0x70
 80019fa:	4b5c      	ldr	r3, [pc, #368]	; (8001b6c <HAL_RCC_OscConfig+0x470>)
 80019fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019fe:	4a5b      	ldr	r2, [pc, #364]	; (8001b6c <HAL_RCC_OscConfig+0x470>)
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	6713      	str	r3, [r2, #112]	; 0x70
 8001a06:	e00b      	b.n	8001a20 <HAL_RCC_OscConfig+0x324>
 8001a08:	4b58      	ldr	r3, [pc, #352]	; (8001b6c <HAL_RCC_OscConfig+0x470>)
 8001a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a0c:	4a57      	ldr	r2, [pc, #348]	; (8001b6c <HAL_RCC_OscConfig+0x470>)
 8001a0e:	f023 0301 	bic.w	r3, r3, #1
 8001a12:	6713      	str	r3, [r2, #112]	; 0x70
 8001a14:	4b55      	ldr	r3, [pc, #340]	; (8001b6c <HAL_RCC_OscConfig+0x470>)
 8001a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a18:	4a54      	ldr	r2, [pc, #336]	; (8001b6c <HAL_RCC_OscConfig+0x470>)
 8001a1a:	f023 0304 	bic.w	r3, r3, #4
 8001a1e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d015      	beq.n	8001a54 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a28:	f7ff fb56 	bl	80010d8 <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a2e:	e00a      	b.n	8001a46 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a30:	f7ff fb52 	bl	80010d8 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e0cb      	b.n	8001bde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a46:	4b49      	ldr	r3, [pc, #292]	; (8001b6c <HAL_RCC_OscConfig+0x470>)
 8001a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0ee      	beq.n	8001a30 <HAL_RCC_OscConfig+0x334>
 8001a52:	e014      	b.n	8001a7e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a54:	f7ff fb40 	bl	80010d8 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a5a:	e00a      	b.n	8001a72 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a5c:	f7ff fb3c 	bl	80010d8 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e0b5      	b.n	8001bde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a72:	4b3e      	ldr	r3, [pc, #248]	; (8001b6c <HAL_RCC_OscConfig+0x470>)
 8001a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1ee      	bne.n	8001a5c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a7e:	7dfb      	ldrb	r3, [r7, #23]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d105      	bne.n	8001a90 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a84:	4b39      	ldr	r3, [pc, #228]	; (8001b6c <HAL_RCC_OscConfig+0x470>)
 8001a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a88:	4a38      	ldr	r2, [pc, #224]	; (8001b6c <HAL_RCC_OscConfig+0x470>)
 8001a8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a8e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f000 80a1 	beq.w	8001bdc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a9a:	4b34      	ldr	r3, [pc, #208]	; (8001b6c <HAL_RCC_OscConfig+0x470>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 030c 	and.w	r3, r3, #12
 8001aa2:	2b08      	cmp	r3, #8
 8001aa4:	d05c      	beq.n	8001b60 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d141      	bne.n	8001b32 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aae:	4b31      	ldr	r3, [pc, #196]	; (8001b74 <HAL_RCC_OscConfig+0x478>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab4:	f7ff fb10 	bl	80010d8 <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001abc:	f7ff fb0c 	bl	80010d8 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e087      	b.n	8001bde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ace:	4b27      	ldr	r3, [pc, #156]	; (8001b6c <HAL_RCC_OscConfig+0x470>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1f0      	bne.n	8001abc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69da      	ldr	r2, [r3, #28]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a1b      	ldr	r3, [r3, #32]
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae8:	019b      	lsls	r3, r3, #6
 8001aea:	431a      	orrs	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af0:	085b      	lsrs	r3, r3, #1
 8001af2:	3b01      	subs	r3, #1
 8001af4:	041b      	lsls	r3, r3, #16
 8001af6:	431a      	orrs	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afc:	061b      	lsls	r3, r3, #24
 8001afe:	491b      	ldr	r1, [pc, #108]	; (8001b6c <HAL_RCC_OscConfig+0x470>)
 8001b00:	4313      	orrs	r3, r2
 8001b02:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b04:	4b1b      	ldr	r3, [pc, #108]	; (8001b74 <HAL_RCC_OscConfig+0x478>)
 8001b06:	2201      	movs	r2, #1
 8001b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0a:	f7ff fae5 	bl	80010d8 <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b10:	e008      	b.n	8001b24 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b12:	f7ff fae1 	bl	80010d8 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e05c      	b.n	8001bde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b24:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <HAL_RCC_OscConfig+0x470>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d0f0      	beq.n	8001b12 <HAL_RCC_OscConfig+0x416>
 8001b30:	e054      	b.n	8001bdc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b32:	4b10      	ldr	r3, [pc, #64]	; (8001b74 <HAL_RCC_OscConfig+0x478>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b38:	f7ff face 	bl	80010d8 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b40:	f7ff faca 	bl	80010d8 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e045      	b.n	8001bde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b52:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <HAL_RCC_OscConfig+0x470>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1f0      	bne.n	8001b40 <HAL_RCC_OscConfig+0x444>
 8001b5e:	e03d      	b.n	8001bdc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d107      	bne.n	8001b78 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e038      	b.n	8001bde <HAL_RCC_OscConfig+0x4e2>
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	40007000 	.word	0x40007000
 8001b74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b78:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <HAL_RCC_OscConfig+0x4ec>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d028      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d121      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d11a      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ba8:	4013      	ands	r3, r2
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d111      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bbe:	085b      	lsrs	r3, r3, #1
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d107      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d001      	beq.n	8001bdc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e000      	b.n	8001bde <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3718      	adds	r7, #24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40023800 	.word	0x40023800

08001bec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e0cc      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c00:	4b68      	ldr	r3, [pc, #416]	; (8001da4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d90c      	bls.n	8001c28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0e:	4b65      	ldr	r3, [pc, #404]	; (8001da4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	b2d2      	uxtb	r2, r2
 8001c14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c16:	4b63      	ldr	r3, [pc, #396]	; (8001da4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d001      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e0b8      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d020      	beq.n	8001c76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d005      	beq.n	8001c4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c40:	4b59      	ldr	r3, [pc, #356]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	4a58      	ldr	r2, [pc, #352]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0308 	and.w	r3, r3, #8
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d005      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c58:	4b53      	ldr	r3, [pc, #332]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	4a52      	ldr	r2, [pc, #328]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c64:	4b50      	ldr	r3, [pc, #320]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	494d      	ldr	r1, [pc, #308]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c72:	4313      	orrs	r3, r2
 8001c74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d044      	beq.n	8001d0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d107      	bne.n	8001c9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c8a:	4b47      	ldr	r3, [pc, #284]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d119      	bne.n	8001cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e07f      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d003      	beq.n	8001caa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ca6:	2b03      	cmp	r3, #3
 8001ca8:	d107      	bne.n	8001cba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001caa:	4b3f      	ldr	r3, [pc, #252]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d109      	bne.n	8001cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e06f      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cba:	4b3b      	ldr	r3, [pc, #236]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e067      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cca:	4b37      	ldr	r3, [pc, #220]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f023 0203 	bic.w	r2, r3, #3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	4934      	ldr	r1, [pc, #208]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cdc:	f7ff f9fc 	bl	80010d8 <HAL_GetTick>
 8001ce0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce2:	e00a      	b.n	8001cfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ce4:	f7ff f9f8 	bl	80010d8 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e04f      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cfa:	4b2b      	ldr	r3, [pc, #172]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 020c 	and.w	r2, r3, #12
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d1eb      	bne.n	8001ce4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d0c:	4b25      	ldr	r3, [pc, #148]	; (8001da4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d20c      	bcs.n	8001d34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1a:	4b22      	ldr	r3, [pc, #136]	; (8001da4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	b2d2      	uxtb	r2, r2
 8001d20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d22:	4b20      	ldr	r3, [pc, #128]	; (8001da4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d001      	beq.n	8001d34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e032      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d008      	beq.n	8001d52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d40:	4b19      	ldr	r3, [pc, #100]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	4916      	ldr	r1, [pc, #88]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d009      	beq.n	8001d72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d5e:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	490e      	ldr	r1, [pc, #56]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d72:	f000 f821 	bl	8001db8 <HAL_RCC_GetSysClockFreq>
 8001d76:	4602      	mov	r2, r0
 8001d78:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	091b      	lsrs	r3, r3, #4
 8001d7e:	f003 030f 	and.w	r3, r3, #15
 8001d82:	490a      	ldr	r1, [pc, #40]	; (8001dac <HAL_RCC_ClockConfig+0x1c0>)
 8001d84:	5ccb      	ldrb	r3, [r1, r3]
 8001d86:	fa22 f303 	lsr.w	r3, r2, r3
 8001d8a:	4a09      	ldr	r2, [pc, #36]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d8e:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff f95c 	bl	8001050 <HAL_InitTick>

  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40023c00 	.word	0x40023c00
 8001da8:	40023800 	.word	0x40023800
 8001dac:	080033e4 	.word	0x080033e4
 8001db0:	20000000 	.word	0x20000000
 8001db4:	20000004 	.word	0x20000004

08001db8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001db8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dbc:	b090      	sub	sp, #64	; 0x40
 8001dbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	637b      	str	r3, [r7, #52]	; 0x34
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dc8:	2300      	movs	r3, #0
 8001dca:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dd0:	4b59      	ldr	r3, [pc, #356]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x180>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f003 030c 	and.w	r3, r3, #12
 8001dd8:	2b08      	cmp	r3, #8
 8001dda:	d00d      	beq.n	8001df8 <HAL_RCC_GetSysClockFreq+0x40>
 8001ddc:	2b08      	cmp	r3, #8
 8001dde:	f200 80a1 	bhi.w	8001f24 <HAL_RCC_GetSysClockFreq+0x16c>
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d002      	beq.n	8001dec <HAL_RCC_GetSysClockFreq+0x34>
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	d003      	beq.n	8001df2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001dea:	e09b      	b.n	8001f24 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001dec:	4b53      	ldr	r3, [pc, #332]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x184>)
 8001dee:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001df0:	e09b      	b.n	8001f2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001df2:	4b53      	ldr	r3, [pc, #332]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x188>)
 8001df4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001df6:	e098      	b.n	8001f2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001df8:	4b4f      	ldr	r3, [pc, #316]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x180>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e00:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e02:	4b4d      	ldr	r3, [pc, #308]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d028      	beq.n	8001e60 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e0e:	4b4a      	ldr	r3, [pc, #296]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	099b      	lsrs	r3, r3, #6
 8001e14:	2200      	movs	r2, #0
 8001e16:	623b      	str	r3, [r7, #32]
 8001e18:	627a      	str	r2, [r7, #36]	; 0x24
 8001e1a:	6a3b      	ldr	r3, [r7, #32]
 8001e1c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001e20:	2100      	movs	r1, #0
 8001e22:	4b47      	ldr	r3, [pc, #284]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e24:	fb03 f201 	mul.w	r2, r3, r1
 8001e28:	2300      	movs	r3, #0
 8001e2a:	fb00 f303 	mul.w	r3, r0, r3
 8001e2e:	4413      	add	r3, r2
 8001e30:	4a43      	ldr	r2, [pc, #268]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e32:	fba0 1202 	umull	r1, r2, r0, r2
 8001e36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e38:	460a      	mov	r2, r1
 8001e3a:	62ba      	str	r2, [r7, #40]	; 0x28
 8001e3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e3e:	4413      	add	r3, r2
 8001e40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e44:	2200      	movs	r2, #0
 8001e46:	61bb      	str	r3, [r7, #24]
 8001e48:	61fa      	str	r2, [r7, #28]
 8001e4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e4e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e52:	f7fe f9bf 	bl	80001d4 <__aeabi_uldivmod>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e5e:	e053      	b.n	8001f08 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e60:	4b35      	ldr	r3, [pc, #212]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	099b      	lsrs	r3, r3, #6
 8001e66:	2200      	movs	r2, #0
 8001e68:	613b      	str	r3, [r7, #16]
 8001e6a:	617a      	str	r2, [r7, #20]
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001e72:	f04f 0b00 	mov.w	fp, #0
 8001e76:	4652      	mov	r2, sl
 8001e78:	465b      	mov	r3, fp
 8001e7a:	f04f 0000 	mov.w	r0, #0
 8001e7e:	f04f 0100 	mov.w	r1, #0
 8001e82:	0159      	lsls	r1, r3, #5
 8001e84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e88:	0150      	lsls	r0, r2, #5
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	ebb2 080a 	subs.w	r8, r2, sl
 8001e92:	eb63 090b 	sbc.w	r9, r3, fp
 8001e96:	f04f 0200 	mov.w	r2, #0
 8001e9a:	f04f 0300 	mov.w	r3, #0
 8001e9e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001ea2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001ea6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001eaa:	ebb2 0408 	subs.w	r4, r2, r8
 8001eae:	eb63 0509 	sbc.w	r5, r3, r9
 8001eb2:	f04f 0200 	mov.w	r2, #0
 8001eb6:	f04f 0300 	mov.w	r3, #0
 8001eba:	00eb      	lsls	r3, r5, #3
 8001ebc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ec0:	00e2      	lsls	r2, r4, #3
 8001ec2:	4614      	mov	r4, r2
 8001ec4:	461d      	mov	r5, r3
 8001ec6:	eb14 030a 	adds.w	r3, r4, sl
 8001eca:	603b      	str	r3, [r7, #0]
 8001ecc:	eb45 030b 	adc.w	r3, r5, fp
 8001ed0:	607b      	str	r3, [r7, #4]
 8001ed2:	f04f 0200 	mov.w	r2, #0
 8001ed6:	f04f 0300 	mov.w	r3, #0
 8001eda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ede:	4629      	mov	r1, r5
 8001ee0:	028b      	lsls	r3, r1, #10
 8001ee2:	4621      	mov	r1, r4
 8001ee4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ee8:	4621      	mov	r1, r4
 8001eea:	028a      	lsls	r2, r1, #10
 8001eec:	4610      	mov	r0, r2
 8001eee:	4619      	mov	r1, r3
 8001ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	60bb      	str	r3, [r7, #8]
 8001ef6:	60fa      	str	r2, [r7, #12]
 8001ef8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001efc:	f7fe f96a 	bl	80001d4 <__aeabi_uldivmod>
 8001f00:	4602      	mov	r2, r0
 8001f02:	460b      	mov	r3, r1
 8001f04:	4613      	mov	r3, r2
 8001f06:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f08:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	0c1b      	lsrs	r3, r3, #16
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	3301      	adds	r3, #1
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001f18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f20:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f22:	e002      	b.n	8001f2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f24:	4b05      	ldr	r3, [pc, #20]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x184>)
 8001f26:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3740      	adds	r7, #64	; 0x40
 8001f30:	46bd      	mov	sp, r7
 8001f32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f36:	bf00      	nop
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	00f42400 	.word	0x00f42400
 8001f40:	017d7840 	.word	0x017d7840

08001f44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f48:	4b03      	ldr	r3, [pc, #12]	; (8001f58 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	20000000 	.word	0x20000000

08001f5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f60:	f7ff fff0 	bl	8001f44 <HAL_RCC_GetHCLKFreq>
 8001f64:	4602      	mov	r2, r0
 8001f66:	4b05      	ldr	r3, [pc, #20]	; (8001f7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	0a9b      	lsrs	r3, r3, #10
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	4903      	ldr	r1, [pc, #12]	; (8001f80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f72:	5ccb      	ldrb	r3, [r1, r3]
 8001f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	080033f4 	.word	0x080033f4

08001f84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f88:	f7ff ffdc 	bl	8001f44 <HAL_RCC_GetHCLKFreq>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	4b05      	ldr	r3, [pc, #20]	; (8001fa4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	0b5b      	lsrs	r3, r3, #13
 8001f94:	f003 0307 	and.w	r3, r3, #7
 8001f98:	4903      	ldr	r1, [pc, #12]	; (8001fa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f9a:	5ccb      	ldrb	r3, [r1, r3]
 8001f9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	080033f4 	.word	0x080033f4

08001fac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e07b      	b.n	80020b6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d108      	bne.n	8001fd8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fce:	d009      	beq.n	8001fe4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	61da      	str	r2, [r3, #28]
 8001fd6:	e005      	b.n	8001fe4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d106      	bne.n	8002004 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7fe fc0e 	bl	8000820 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2202      	movs	r2, #2
 8002008:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800201a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800202c:	431a      	orrs	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	691b      	ldr	r3, [r3, #16]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	431a      	orrs	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	431a      	orrs	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002054:	431a      	orrs	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800205e:	431a      	orrs	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a1b      	ldr	r3, [r3, #32]
 8002064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002068:	ea42 0103 	orr.w	r1, r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002070:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	430a      	orrs	r2, r1
 800207a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	0c1b      	lsrs	r3, r3, #16
 8002082:	f003 0104 	and.w	r1, r3, #4
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208a:	f003 0210 	and.w	r2, r3, #16
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	430a      	orrs	r2, r1
 8002094:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	69da      	ldr	r2, [r3, #28]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b088      	sub	sp, #32
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	60f8      	str	r0, [r7, #12]
 80020c6:	60b9      	str	r1, [r7, #8]
 80020c8:	603b      	str	r3, [r7, #0]
 80020ca:	4613      	mov	r3, r2
 80020cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80020ce:	2300      	movs	r3, #0
 80020d0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d101      	bne.n	80020e0 <HAL_SPI_Transmit+0x22>
 80020dc:	2302      	movs	r3, #2
 80020de:	e12d      	b.n	800233c <HAL_SPI_Transmit+0x27e>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020e8:	f7fe fff6 	bl	80010d8 <HAL_GetTick>
 80020ec:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80020ee:	88fb      	ldrh	r3, [r7, #6]
 80020f0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d002      	beq.n	8002104 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80020fe:	2302      	movs	r3, #2
 8002100:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002102:	e116      	b.n	8002332 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d002      	beq.n	8002110 <HAL_SPI_Transmit+0x52>
 800210a:	88fb      	ldrh	r3, [r7, #6]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d102      	bne.n	8002116 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002114:	e10d      	b.n	8002332 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2203      	movs	r2, #3
 800211a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	68ba      	ldr	r2, [r7, #8]
 8002128:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	88fa      	ldrh	r2, [r7, #6]
 800212e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	88fa      	ldrh	r2, [r7, #6]
 8002134:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2200      	movs	r2, #0
 8002140:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2200      	movs	r2, #0
 8002146:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800215c:	d10f      	bne.n	800217e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800216c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800217c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002188:	2b40      	cmp	r3, #64	; 0x40
 800218a:	d007      	beq.n	800219c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800219a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021a4:	d14f      	bne.n	8002246 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d002      	beq.n	80021b4 <HAL_SPI_Transmit+0xf6>
 80021ae:	8afb      	ldrh	r3, [r7, #22]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d142      	bne.n	800223a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b8:	881a      	ldrh	r2, [r3, #0]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c4:	1c9a      	adds	r2, r3, #2
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	3b01      	subs	r3, #1
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80021d8:	e02f      	b.n	800223a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d112      	bne.n	800220e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ec:	881a      	ldrh	r2, [r3, #0]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f8:	1c9a      	adds	r2, r3, #2
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002202:	b29b      	uxth	r3, r3
 8002204:	3b01      	subs	r3, #1
 8002206:	b29a      	uxth	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	86da      	strh	r2, [r3, #54]	; 0x36
 800220c:	e015      	b.n	800223a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800220e:	f7fe ff63 	bl	80010d8 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	429a      	cmp	r2, r3
 800221c:	d803      	bhi.n	8002226 <HAL_SPI_Transmit+0x168>
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002224:	d102      	bne.n	800222c <HAL_SPI_Transmit+0x16e>
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d106      	bne.n	800223a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002238:	e07b      	b.n	8002332 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800223e:	b29b      	uxth	r3, r3
 8002240:	2b00      	cmp	r3, #0
 8002242:	d1ca      	bne.n	80021da <HAL_SPI_Transmit+0x11c>
 8002244:	e050      	b.n	80022e8 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d002      	beq.n	8002254 <HAL_SPI_Transmit+0x196>
 800224e:	8afb      	ldrh	r3, [r7, #22]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d144      	bne.n	80022de <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	330c      	adds	r3, #12
 800225e:	7812      	ldrb	r2, [r2, #0]
 8002260:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	1c5a      	adds	r2, r3, #1
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002270:	b29b      	uxth	r3, r3
 8002272:	3b01      	subs	r3, #1
 8002274:	b29a      	uxth	r2, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800227a:	e030      	b.n	80022de <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b02      	cmp	r3, #2
 8002288:	d113      	bne.n	80022b2 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	330c      	adds	r3, #12
 8002294:	7812      	ldrb	r2, [r2, #0]
 8002296:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229c:	1c5a      	adds	r2, r3, #1
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	3b01      	subs	r3, #1
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	86da      	strh	r2, [r3, #54]	; 0x36
 80022b0:	e015      	b.n	80022de <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022b2:	f7fe ff11 	bl	80010d8 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d803      	bhi.n	80022ca <HAL_SPI_Transmit+0x20c>
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c8:	d102      	bne.n	80022d0 <HAL_SPI_Transmit+0x212>
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d106      	bne.n	80022de <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80022dc:	e029      	b.n	8002332 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1c9      	bne.n	800227c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	6839      	ldr	r1, [r7, #0]
 80022ec:	68f8      	ldr	r0, [r7, #12]
 80022ee:	f000 fbdf 	bl	8002ab0 <SPI_EndRxTxTransaction>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d002      	beq.n	80022fe <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2220      	movs	r2, #32
 80022fc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d10a      	bne.n	800231c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002306:	2300      	movs	r3, #0
 8002308:	613b      	str	r3, [r7, #16]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	613b      	str	r3, [r7, #16]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	613b      	str	r3, [r7, #16]
 800231a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002320:	2b00      	cmp	r3, #0
 8002322:	d002      	beq.n	800232a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	77fb      	strb	r3, [r7, #31]
 8002328:	e003      	b.n	8002332 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800233a:	7ffb      	ldrb	r3, [r7, #31]
}
 800233c:	4618      	mov	r0, r3
 800233e:	3720      	adds	r7, #32
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b088      	sub	sp, #32
 8002348:	af02      	add	r7, sp, #8
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	603b      	str	r3, [r7, #0]
 8002350:	4613      	mov	r3, r2
 8002352:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002354:	2300      	movs	r3, #0
 8002356:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b01      	cmp	r3, #1
 8002362:	d002      	beq.n	800236a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002364:	2302      	movs	r3, #2
 8002366:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002368:	e0fb      	b.n	8002562 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002372:	d112      	bne.n	800239a <HAL_SPI_Receive+0x56>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d10e      	bne.n	800239a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2204      	movs	r2, #4
 8002380:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002384:	88fa      	ldrh	r2, [r7, #6]
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	9300      	str	r3, [sp, #0]
 800238a:	4613      	mov	r3, r2
 800238c:	68ba      	ldr	r2, [r7, #8]
 800238e:	68b9      	ldr	r1, [r7, #8]
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f000 f8ef 	bl	8002574 <HAL_SPI_TransmitReceive>
 8002396:	4603      	mov	r3, r0
 8002398:	e0e8      	b.n	800256c <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d101      	bne.n	80023a8 <HAL_SPI_Receive+0x64>
 80023a4:	2302      	movs	r3, #2
 80023a6:	e0e1      	b.n	800256c <HAL_SPI_Receive+0x228>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023b0:	f7fe fe92 	bl	80010d8 <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d002      	beq.n	80023c2 <HAL_SPI_Receive+0x7e>
 80023bc:	88fb      	ldrh	r3, [r7, #6]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d102      	bne.n	80023c8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80023c6:	e0cc      	b.n	8002562 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2204      	movs	r2, #4
 80023cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	68ba      	ldr	r2, [r7, #8]
 80023da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	88fa      	ldrh	r2, [r7, #6]
 80023e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	88fa      	ldrh	r2, [r7, #6]
 80023e6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800240e:	d10f      	bne.n	8002430 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800241e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800242e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800243a:	2b40      	cmp	r3, #64	; 0x40
 800243c:	d007      	beq.n	800244e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800244c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d16a      	bne.n	800252c <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002456:	e032      	b.n	80024be <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b01      	cmp	r3, #1
 8002464:	d115      	bne.n	8002492 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f103 020c 	add.w	r2, r3, #12
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002472:	7812      	ldrb	r2, [r2, #0]
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247c:	1c5a      	adds	r2, r3, #1
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002486:	b29b      	uxth	r3, r3
 8002488:	3b01      	subs	r3, #1
 800248a:	b29a      	uxth	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002490:	e015      	b.n	80024be <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002492:	f7fe fe21 	bl	80010d8 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d803      	bhi.n	80024aa <HAL_SPI_Receive+0x166>
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a8:	d102      	bne.n	80024b0 <HAL_SPI_Receive+0x16c>
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d106      	bne.n	80024be <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80024bc:	e051      	b.n	8002562 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1c7      	bne.n	8002458 <HAL_SPI_Receive+0x114>
 80024c8:	e035      	b.n	8002536 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d113      	bne.n	8002500 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68da      	ldr	r2, [r3, #12]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e2:	b292      	uxth	r2, r2
 80024e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ea:	1c9a      	adds	r2, r3, #2
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	3b01      	subs	r3, #1
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80024fe:	e015      	b.n	800252c <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002500:	f7fe fdea 	bl	80010d8 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	429a      	cmp	r2, r3
 800250e:	d803      	bhi.n	8002518 <HAL_SPI_Receive+0x1d4>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002516:	d102      	bne.n	800251e <HAL_SPI_Receive+0x1da>
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d106      	bne.n	800252c <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800252a:	e01a      	b.n	8002562 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002530:	b29b      	uxth	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1c9      	bne.n	80024ca <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	6839      	ldr	r1, [r7, #0]
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f000 fa52 	bl	80029e4 <SPI_EndRxTransaction>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d002      	beq.n	800254c <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2220      	movs	r2, #32
 800254a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002550:	2b00      	cmp	r3, #0
 8002552:	d002      	beq.n	800255a <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	75fb      	strb	r3, [r7, #23]
 8002558:	e003      	b.n	8002562 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800256a:	7dfb      	ldrb	r3, [r7, #23]
}
 800256c:	4618      	mov	r0, r3
 800256e:	3718      	adds	r7, #24
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b08c      	sub	sp, #48	; 0x30
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
 8002580:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002582:	2301      	movs	r3, #1
 8002584:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002586:	2300      	movs	r3, #0
 8002588:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002592:	2b01      	cmp	r3, #1
 8002594:	d101      	bne.n	800259a <HAL_SPI_TransmitReceive+0x26>
 8002596:	2302      	movs	r3, #2
 8002598:	e198      	b.n	80028cc <HAL_SPI_TransmitReceive+0x358>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025a2:	f7fe fd99 	bl	80010d8 <HAL_GetTick>
 80025a6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80025b8:	887b      	ldrh	r3, [r7, #2]
 80025ba:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80025bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d00f      	beq.n	80025e4 <HAL_SPI_TransmitReceive+0x70>
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025ca:	d107      	bne.n	80025dc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d103      	bne.n	80025dc <HAL_SPI_TransmitReceive+0x68>
 80025d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025d8:	2b04      	cmp	r3, #4
 80025da:	d003      	beq.n	80025e4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80025dc:	2302      	movs	r3, #2
 80025de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80025e2:	e16d      	b.n	80028c0 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d005      	beq.n	80025f6 <HAL_SPI_TransmitReceive+0x82>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d002      	beq.n	80025f6 <HAL_SPI_TransmitReceive+0x82>
 80025f0:	887b      	ldrh	r3, [r7, #2]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d103      	bne.n	80025fe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80025fc:	e160      	b.n	80028c0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b04      	cmp	r3, #4
 8002608:	d003      	beq.n	8002612 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2205      	movs	r2, #5
 800260e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	887a      	ldrh	r2, [r7, #2]
 8002622:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	887a      	ldrh	r2, [r7, #2]
 8002628:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	68ba      	ldr	r2, [r7, #8]
 800262e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	887a      	ldrh	r2, [r7, #2]
 8002634:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	887a      	ldrh	r2, [r7, #2]
 800263a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002652:	2b40      	cmp	r3, #64	; 0x40
 8002654:	d007      	beq.n	8002666 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002664:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800266e:	d17c      	bne.n	800276a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d002      	beq.n	800267e <HAL_SPI_TransmitReceive+0x10a>
 8002678:	8b7b      	ldrh	r3, [r7, #26]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d16a      	bne.n	8002754 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	881a      	ldrh	r2, [r3, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	1c9a      	adds	r2, r3, #2
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002698:	b29b      	uxth	r3, r3
 800269a:	3b01      	subs	r3, #1
 800269c:	b29a      	uxth	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026a2:	e057      	b.n	8002754 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d11b      	bne.n	80026ea <HAL_SPI_TransmitReceive+0x176>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d016      	beq.n	80026ea <HAL_SPI_TransmitReceive+0x176>
 80026bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d113      	bne.n	80026ea <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	881a      	ldrh	r2, [r3, #0]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	1c9a      	adds	r2, r3, #2
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026dc:	b29b      	uxth	r3, r3
 80026de:	3b01      	subs	r3, #1
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026e6:	2300      	movs	r3, #0
 80026e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d119      	bne.n	800272c <HAL_SPI_TransmitReceive+0x1b8>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d014      	beq.n	800272c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68da      	ldr	r2, [r3, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270c:	b292      	uxth	r2, r2
 800270e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002714:	1c9a      	adds	r2, r3, #2
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800271e:	b29b      	uxth	r3, r3
 8002720:	3b01      	subs	r3, #1
 8002722:	b29a      	uxth	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002728:	2301      	movs	r3, #1
 800272a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800272c:	f7fe fcd4 	bl	80010d8 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002738:	429a      	cmp	r2, r3
 800273a:	d80b      	bhi.n	8002754 <HAL_SPI_TransmitReceive+0x1e0>
 800273c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002742:	d007      	beq.n	8002754 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002752:	e0b5      	b.n	80028c0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002758:	b29b      	uxth	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1a2      	bne.n	80026a4 <HAL_SPI_TransmitReceive+0x130>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002762:	b29b      	uxth	r3, r3
 8002764:	2b00      	cmp	r3, #0
 8002766:	d19d      	bne.n	80026a4 <HAL_SPI_TransmitReceive+0x130>
 8002768:	e080      	b.n	800286c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d002      	beq.n	8002778 <HAL_SPI_TransmitReceive+0x204>
 8002772:	8b7b      	ldrh	r3, [r7, #26]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d16f      	bne.n	8002858 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	330c      	adds	r3, #12
 8002782:	7812      	ldrb	r2, [r2, #0]
 8002784:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	1c5a      	adds	r2, r3, #1
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002794:	b29b      	uxth	r3, r3
 8002796:	3b01      	subs	r3, #1
 8002798:	b29a      	uxth	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800279e:	e05b      	b.n	8002858 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d11c      	bne.n	80027e8 <HAL_SPI_TransmitReceive+0x274>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d017      	beq.n	80027e8 <HAL_SPI_TransmitReceive+0x274>
 80027b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d114      	bne.n	80027e8 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	330c      	adds	r3, #12
 80027c8:	7812      	ldrb	r2, [r2, #0]
 80027ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d0:	1c5a      	adds	r2, r3, #1
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027da:	b29b      	uxth	r3, r3
 80027dc:	3b01      	subs	r3, #1
 80027de:	b29a      	uxth	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027e4:	2300      	movs	r3, #0
 80027e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d119      	bne.n	800282a <HAL_SPI_TransmitReceive+0x2b6>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d014      	beq.n	800282a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68da      	ldr	r2, [r3, #12]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002812:	1c5a      	adds	r2, r3, #1
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800281c:	b29b      	uxth	r3, r3
 800281e:	3b01      	subs	r3, #1
 8002820:	b29a      	uxth	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002826:	2301      	movs	r3, #1
 8002828:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800282a:	f7fe fc55 	bl	80010d8 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002836:	429a      	cmp	r2, r3
 8002838:	d803      	bhi.n	8002842 <HAL_SPI_TransmitReceive+0x2ce>
 800283a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800283c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002840:	d102      	bne.n	8002848 <HAL_SPI_TransmitReceive+0x2d4>
 8002842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002844:	2b00      	cmp	r3, #0
 8002846:	d107      	bne.n	8002858 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002856:	e033      	b.n	80028c0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800285c:	b29b      	uxth	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d19e      	bne.n	80027a0 <HAL_SPI_TransmitReceive+0x22c>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002866:	b29b      	uxth	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	d199      	bne.n	80027a0 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800286c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800286e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f000 f91d 	bl	8002ab0 <SPI_EndRxTxTransaction>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d006      	beq.n	800288a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2220      	movs	r2, #32
 8002886:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002888:	e01a      	b.n	80028c0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10a      	bne.n	80028a8 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002892:	2300      	movs	r3, #0
 8002894:	617b      	str	r3, [r7, #20]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	617b      	str	r3, [r7, #20]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	617b      	str	r3, [r7, #20]
 80028a6:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d003      	beq.n	80028b8 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80028b6:	e003      	b.n	80028c0 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80028c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3730      	adds	r7, #48	; 0x30
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b088      	sub	sp, #32
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	603b      	str	r3, [r7, #0]
 80028e0:	4613      	mov	r3, r2
 80028e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80028e4:	f7fe fbf8 	bl	80010d8 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ec:	1a9b      	subs	r3, r3, r2
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	4413      	add	r3, r2
 80028f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80028f4:	f7fe fbf0 	bl	80010d8 <HAL_GetTick>
 80028f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80028fa:	4b39      	ldr	r3, [pc, #228]	; (80029e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	015b      	lsls	r3, r3, #5
 8002900:	0d1b      	lsrs	r3, r3, #20
 8002902:	69fa      	ldr	r2, [r7, #28]
 8002904:	fb02 f303 	mul.w	r3, r2, r3
 8002908:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800290a:	e054      	b.n	80029b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002912:	d050      	beq.n	80029b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002914:	f7fe fbe0 	bl	80010d8 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	69fa      	ldr	r2, [r7, #28]
 8002920:	429a      	cmp	r2, r3
 8002922:	d902      	bls.n	800292a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d13d      	bne.n	80029a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002938:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002942:	d111      	bne.n	8002968 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800294c:	d004      	beq.n	8002958 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002956:	d107      	bne.n	8002968 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002966:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002970:	d10f      	bne.n	8002992 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002980:	601a      	str	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002990:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e017      	b.n	80029d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80029ac:	2300      	movs	r3, #0
 80029ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	3b01      	subs	r3, #1
 80029b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	4013      	ands	r3, r2
 80029c0:	68ba      	ldr	r2, [r7, #8]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	bf0c      	ite	eq
 80029c6:	2301      	moveq	r3, #1
 80029c8:	2300      	movne	r3, #0
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	461a      	mov	r2, r3
 80029ce:	79fb      	ldrb	r3, [r7, #7]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d19b      	bne.n	800290c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3720      	adds	r7, #32
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	20000000 	.word	0x20000000

080029e4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af02      	add	r7, sp, #8
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029f8:	d111      	bne.n	8002a1e <SPI_EndRxTransaction+0x3a>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a02:	d004      	beq.n	8002a0e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a0c:	d107      	bne.n	8002a1e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a1c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a26:	d12a      	bne.n	8002a7e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a30:	d012      	beq.n	8002a58 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	2180      	movs	r1, #128	; 0x80
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f7ff ff49 	bl	80028d4 <SPI_WaitFlagStateUntilTimeout>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d02d      	beq.n	8002aa4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4c:	f043 0220 	orr.w	r2, r3, #32
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e026      	b.n	8002aa6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	2101      	movs	r1, #1
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f7ff ff36 	bl	80028d4 <SPI_WaitFlagStateUntilTimeout>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d01a      	beq.n	8002aa4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a72:	f043 0220 	orr.w	r2, r3, #32
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e013      	b.n	8002aa6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	2200      	movs	r2, #0
 8002a86:	2101      	movs	r1, #1
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f7ff ff23 	bl	80028d4 <SPI_WaitFlagStateUntilTimeout>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d007      	beq.n	8002aa4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a98:	f043 0220 	orr.w	r2, r3, #32
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e000      	b.n	8002aa6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
	...

08002ab0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b088      	sub	sp, #32
 8002ab4:	af02      	add	r7, sp, #8
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	2102      	movs	r1, #2
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f7ff ff04 	bl	80028d4 <SPI_WaitFlagStateUntilTimeout>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d007      	beq.n	8002ae2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad6:	f043 0220 	orr.w	r2, r3, #32
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e032      	b.n	8002b48 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002ae2:	4b1b      	ldr	r3, [pc, #108]	; (8002b50 <SPI_EndRxTxTransaction+0xa0>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a1b      	ldr	r2, [pc, #108]	; (8002b54 <SPI_EndRxTxTransaction+0xa4>)
 8002ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8002aec:	0d5b      	lsrs	r3, r3, #21
 8002aee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002af2:	fb02 f303 	mul.w	r3, r2, r3
 8002af6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b00:	d112      	bne.n	8002b28 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	2180      	movs	r1, #128	; 0x80
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f7ff fee1 	bl	80028d4 <SPI_WaitFlagStateUntilTimeout>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d016      	beq.n	8002b46 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1c:	f043 0220 	orr.w	r2, r3, #32
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e00f      	b.n	8002b48 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00a      	beq.n	8002b44 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	3b01      	subs	r3, #1
 8002b32:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b3e:	2b80      	cmp	r3, #128	; 0x80
 8002b40:	d0f2      	beq.n	8002b28 <SPI_EndRxTxTransaction+0x78>
 8002b42:	e000      	b.n	8002b46 <SPI_EndRxTxTransaction+0x96>
        break;
 8002b44:	bf00      	nop
  }

  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3718      	adds	r7, #24
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	20000000 	.word	0x20000000
 8002b54:	165e9f81 	.word	0x165e9f81

08002b58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e042      	b.n	8002bf0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d106      	bne.n	8002b84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f7fd ff2c 	bl	80009dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2224      	movs	r2, #36	; 0x24
 8002b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68da      	ldr	r2, [r3, #12]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 f973 	bl	8002e88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	691a      	ldr	r2, [r3, #16]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	695a      	ldr	r2, [r3, #20]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68da      	ldr	r2, [r3, #12]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2220      	movs	r2, #32
 8002bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2220      	movs	r2, #32
 8002be4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b08a      	sub	sp, #40	; 0x28
 8002bfc:	af02      	add	r7, sp, #8
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	603b      	str	r3, [r7, #0]
 8002c04:	4613      	mov	r3, r2
 8002c06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b20      	cmp	r3, #32
 8002c16:	d175      	bne.n	8002d04 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d002      	beq.n	8002c24 <HAL_UART_Transmit+0x2c>
 8002c1e:	88fb      	ldrh	r3, [r7, #6]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e06e      	b.n	8002d06 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2221      	movs	r2, #33	; 0x21
 8002c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c36:	f7fe fa4f 	bl	80010d8 <HAL_GetTick>
 8002c3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	88fa      	ldrh	r2, [r7, #6]
 8002c40:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	88fa      	ldrh	r2, [r7, #6]
 8002c46:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c50:	d108      	bne.n	8002c64 <HAL_UART_Transmit+0x6c>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d104      	bne.n	8002c64 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	61bb      	str	r3, [r7, #24]
 8002c62:	e003      	b.n	8002c6c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c6c:	e02e      	b.n	8002ccc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	2200      	movs	r2, #0
 8002c76:	2180      	movs	r1, #128	; 0x80
 8002c78:	68f8      	ldr	r0, [r7, #12]
 8002c7a:	f000 f848 	bl	8002d0e <UART_WaitOnFlagUntilTimeout>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d005      	beq.n	8002c90 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2220      	movs	r2, #32
 8002c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e03a      	b.n	8002d06 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10b      	bne.n	8002cae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	881b      	ldrh	r3, [r3, #0]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ca4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	3302      	adds	r3, #2
 8002caa:	61bb      	str	r3, [r7, #24]
 8002cac:	e007      	b.n	8002cbe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	781a      	ldrb	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	3301      	adds	r3, #1
 8002cbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1cb      	bne.n	8002c6e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	2140      	movs	r1, #64	; 0x40
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 f814 	bl	8002d0e <UART_WaitOnFlagUntilTimeout>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d005      	beq.n	8002cf8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e006      	b.n	8002d06 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002d00:	2300      	movs	r3, #0
 8002d02:	e000      	b.n	8002d06 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002d04:	2302      	movs	r3, #2
  }
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3720      	adds	r7, #32
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b086      	sub	sp, #24
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	60f8      	str	r0, [r7, #12]
 8002d16:	60b9      	str	r1, [r7, #8]
 8002d18:	603b      	str	r3, [r7, #0]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d1e:	e03b      	b.n	8002d98 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d20:	6a3b      	ldr	r3, [r7, #32]
 8002d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d26:	d037      	beq.n	8002d98 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d28:	f7fe f9d6 	bl	80010d8 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	6a3a      	ldr	r2, [r7, #32]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d302      	bcc.n	8002d3e <UART_WaitOnFlagUntilTimeout+0x30>
 8002d38:	6a3b      	ldr	r3, [r7, #32]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e03a      	b.n	8002db8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d023      	beq.n	8002d98 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	2b80      	cmp	r3, #128	; 0x80
 8002d54:	d020      	beq.n	8002d98 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2b40      	cmp	r3, #64	; 0x40
 8002d5a:	d01d      	beq.n	8002d98 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0308 	and.w	r3, r3, #8
 8002d66:	2b08      	cmp	r3, #8
 8002d68:	d116      	bne.n	8002d98 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	617b      	str	r3, [r7, #20]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	617b      	str	r3, [r7, #20]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	617b      	str	r3, [r7, #20]
 8002d7e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d80:	68f8      	ldr	r0, [r7, #12]
 8002d82:	f000 f81d 	bl	8002dc0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2208      	movs	r2, #8
 8002d8a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e00f      	b.n	8002db8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	4013      	ands	r3, r2
 8002da2:	68ba      	ldr	r2, [r7, #8]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	bf0c      	ite	eq
 8002da8:	2301      	moveq	r3, #1
 8002daa:	2300      	movne	r3, #0
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	461a      	mov	r2, r3
 8002db0:	79fb      	ldrb	r3, [r7, #7]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d0b4      	beq.n	8002d20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3718      	adds	r7, #24
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b095      	sub	sp, #84	; 0x54
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	330c      	adds	r3, #12
 8002dce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd2:	e853 3f00 	ldrex	r3, [r3]
 8002dd6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dda:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002dde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	330c      	adds	r3, #12
 8002de6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002de8:	643a      	str	r2, [r7, #64]	; 0x40
 8002dea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002dee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002df0:	e841 2300 	strex	r3, r2, [r1]
 8002df4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1e5      	bne.n	8002dc8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	3314      	adds	r3, #20
 8002e02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e04:	6a3b      	ldr	r3, [r7, #32]
 8002e06:	e853 3f00 	ldrex	r3, [r3]
 8002e0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	f023 0301 	bic.w	r3, r3, #1
 8002e12:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	3314      	adds	r3, #20
 8002e1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e24:	e841 2300 	strex	r3, r2, [r1]
 8002e28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1e5      	bne.n	8002dfc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d119      	bne.n	8002e6c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	330c      	adds	r3, #12
 8002e3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	e853 3f00 	ldrex	r3, [r3]
 8002e46:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	f023 0310 	bic.w	r3, r3, #16
 8002e4e:	647b      	str	r3, [r7, #68]	; 0x44
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	330c      	adds	r3, #12
 8002e56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e58:	61ba      	str	r2, [r7, #24]
 8002e5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e5c:	6979      	ldr	r1, [r7, #20]
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	e841 2300 	strex	r3, r2, [r1]
 8002e64:	613b      	str	r3, [r7, #16]
   return(result);
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1e5      	bne.n	8002e38 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002e7a:	bf00      	nop
 8002e7c:	3754      	adds	r7, #84	; 0x54
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
	...

08002e88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e8c:	b0c0      	sub	sp, #256	; 0x100
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea4:	68d9      	ldr	r1, [r3, #12]
 8002ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	ea40 0301 	orr.w	r3, r0, r1
 8002eb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eb6:	689a      	ldr	r2, [r3, #8]
 8002eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ecc:	69db      	ldr	r3, [r3, #28]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ee0:	f021 010c 	bic.w	r1, r1, #12
 8002ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002eee:	430b      	orrs	r3, r1
 8002ef0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f02:	6999      	ldr	r1, [r3, #24]
 8002f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	ea40 0301 	orr.w	r3, r0, r1
 8002f0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	4b8f      	ldr	r3, [pc, #572]	; (8003154 <UART_SetConfig+0x2cc>)
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d005      	beq.n	8002f28 <UART_SetConfig+0xa0>
 8002f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	4b8d      	ldr	r3, [pc, #564]	; (8003158 <UART_SetConfig+0x2d0>)
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d104      	bne.n	8002f32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f28:	f7ff f82c 	bl	8001f84 <HAL_RCC_GetPCLK2Freq>
 8002f2c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002f30:	e003      	b.n	8002f3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f32:	f7ff f813 	bl	8001f5c <HAL_RCC_GetPCLK1Freq>
 8002f36:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f3e:	69db      	ldr	r3, [r3, #28]
 8002f40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f44:	f040 810c 	bne.w	8003160 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002f52:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002f56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002f5a:	4622      	mov	r2, r4
 8002f5c:	462b      	mov	r3, r5
 8002f5e:	1891      	adds	r1, r2, r2
 8002f60:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f62:	415b      	adcs	r3, r3
 8002f64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f6a:	4621      	mov	r1, r4
 8002f6c:	eb12 0801 	adds.w	r8, r2, r1
 8002f70:	4629      	mov	r1, r5
 8002f72:	eb43 0901 	adc.w	r9, r3, r1
 8002f76:	f04f 0200 	mov.w	r2, #0
 8002f7a:	f04f 0300 	mov.w	r3, #0
 8002f7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f8a:	4690      	mov	r8, r2
 8002f8c:	4699      	mov	r9, r3
 8002f8e:	4623      	mov	r3, r4
 8002f90:	eb18 0303 	adds.w	r3, r8, r3
 8002f94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002f98:	462b      	mov	r3, r5
 8002f9a:	eb49 0303 	adc.w	r3, r9, r3
 8002f9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002fae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002fb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	18db      	adds	r3, r3, r3
 8002fba:	653b      	str	r3, [r7, #80]	; 0x50
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	eb42 0303 	adc.w	r3, r2, r3
 8002fc2:	657b      	str	r3, [r7, #84]	; 0x54
 8002fc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002fc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002fcc:	f7fd f902 	bl	80001d4 <__aeabi_uldivmod>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	4b61      	ldr	r3, [pc, #388]	; (800315c <UART_SetConfig+0x2d4>)
 8002fd6:	fba3 2302 	umull	r2, r3, r3, r2
 8002fda:	095b      	lsrs	r3, r3, #5
 8002fdc:	011c      	lsls	r4, r3, #4
 8002fde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002fe8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002fec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002ff0:	4642      	mov	r2, r8
 8002ff2:	464b      	mov	r3, r9
 8002ff4:	1891      	adds	r1, r2, r2
 8002ff6:	64b9      	str	r1, [r7, #72]	; 0x48
 8002ff8:	415b      	adcs	r3, r3
 8002ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ffc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003000:	4641      	mov	r1, r8
 8003002:	eb12 0a01 	adds.w	sl, r2, r1
 8003006:	4649      	mov	r1, r9
 8003008:	eb43 0b01 	adc.w	fp, r3, r1
 800300c:	f04f 0200 	mov.w	r2, #0
 8003010:	f04f 0300 	mov.w	r3, #0
 8003014:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003018:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800301c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003020:	4692      	mov	sl, r2
 8003022:	469b      	mov	fp, r3
 8003024:	4643      	mov	r3, r8
 8003026:	eb1a 0303 	adds.w	r3, sl, r3
 800302a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800302e:	464b      	mov	r3, r9
 8003030:	eb4b 0303 	adc.w	r3, fp, r3
 8003034:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003044:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003048:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800304c:	460b      	mov	r3, r1
 800304e:	18db      	adds	r3, r3, r3
 8003050:	643b      	str	r3, [r7, #64]	; 0x40
 8003052:	4613      	mov	r3, r2
 8003054:	eb42 0303 	adc.w	r3, r2, r3
 8003058:	647b      	str	r3, [r7, #68]	; 0x44
 800305a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800305e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003062:	f7fd f8b7 	bl	80001d4 <__aeabi_uldivmod>
 8003066:	4602      	mov	r2, r0
 8003068:	460b      	mov	r3, r1
 800306a:	4611      	mov	r1, r2
 800306c:	4b3b      	ldr	r3, [pc, #236]	; (800315c <UART_SetConfig+0x2d4>)
 800306e:	fba3 2301 	umull	r2, r3, r3, r1
 8003072:	095b      	lsrs	r3, r3, #5
 8003074:	2264      	movs	r2, #100	; 0x64
 8003076:	fb02 f303 	mul.w	r3, r2, r3
 800307a:	1acb      	subs	r3, r1, r3
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003082:	4b36      	ldr	r3, [pc, #216]	; (800315c <UART_SetConfig+0x2d4>)
 8003084:	fba3 2302 	umull	r2, r3, r3, r2
 8003088:	095b      	lsrs	r3, r3, #5
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003090:	441c      	add	r4, r3
 8003092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003096:	2200      	movs	r2, #0
 8003098:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800309c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80030a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80030a4:	4642      	mov	r2, r8
 80030a6:	464b      	mov	r3, r9
 80030a8:	1891      	adds	r1, r2, r2
 80030aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80030ac:	415b      	adcs	r3, r3
 80030ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80030b4:	4641      	mov	r1, r8
 80030b6:	1851      	adds	r1, r2, r1
 80030b8:	6339      	str	r1, [r7, #48]	; 0x30
 80030ba:	4649      	mov	r1, r9
 80030bc:	414b      	adcs	r3, r1
 80030be:	637b      	str	r3, [r7, #52]	; 0x34
 80030c0:	f04f 0200 	mov.w	r2, #0
 80030c4:	f04f 0300 	mov.w	r3, #0
 80030c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80030cc:	4659      	mov	r1, fp
 80030ce:	00cb      	lsls	r3, r1, #3
 80030d0:	4651      	mov	r1, sl
 80030d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030d6:	4651      	mov	r1, sl
 80030d8:	00ca      	lsls	r2, r1, #3
 80030da:	4610      	mov	r0, r2
 80030dc:	4619      	mov	r1, r3
 80030de:	4603      	mov	r3, r0
 80030e0:	4642      	mov	r2, r8
 80030e2:	189b      	adds	r3, r3, r2
 80030e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80030e8:	464b      	mov	r3, r9
 80030ea:	460a      	mov	r2, r1
 80030ec:	eb42 0303 	adc.w	r3, r2, r3
 80030f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003100:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003104:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003108:	460b      	mov	r3, r1
 800310a:	18db      	adds	r3, r3, r3
 800310c:	62bb      	str	r3, [r7, #40]	; 0x28
 800310e:	4613      	mov	r3, r2
 8003110:	eb42 0303 	adc.w	r3, r2, r3
 8003114:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003116:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800311a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800311e:	f7fd f859 	bl	80001d4 <__aeabi_uldivmod>
 8003122:	4602      	mov	r2, r0
 8003124:	460b      	mov	r3, r1
 8003126:	4b0d      	ldr	r3, [pc, #52]	; (800315c <UART_SetConfig+0x2d4>)
 8003128:	fba3 1302 	umull	r1, r3, r3, r2
 800312c:	095b      	lsrs	r3, r3, #5
 800312e:	2164      	movs	r1, #100	; 0x64
 8003130:	fb01 f303 	mul.w	r3, r1, r3
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	3332      	adds	r3, #50	; 0x32
 800313a:	4a08      	ldr	r2, [pc, #32]	; (800315c <UART_SetConfig+0x2d4>)
 800313c:	fba2 2303 	umull	r2, r3, r2, r3
 8003140:	095b      	lsrs	r3, r3, #5
 8003142:	f003 0207 	and.w	r2, r3, #7
 8003146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4422      	add	r2, r4
 800314e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003150:	e106      	b.n	8003360 <UART_SetConfig+0x4d8>
 8003152:	bf00      	nop
 8003154:	40011000 	.word	0x40011000
 8003158:	40011400 	.word	0x40011400
 800315c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003160:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003164:	2200      	movs	r2, #0
 8003166:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800316a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800316e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003172:	4642      	mov	r2, r8
 8003174:	464b      	mov	r3, r9
 8003176:	1891      	adds	r1, r2, r2
 8003178:	6239      	str	r1, [r7, #32]
 800317a:	415b      	adcs	r3, r3
 800317c:	627b      	str	r3, [r7, #36]	; 0x24
 800317e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003182:	4641      	mov	r1, r8
 8003184:	1854      	adds	r4, r2, r1
 8003186:	4649      	mov	r1, r9
 8003188:	eb43 0501 	adc.w	r5, r3, r1
 800318c:	f04f 0200 	mov.w	r2, #0
 8003190:	f04f 0300 	mov.w	r3, #0
 8003194:	00eb      	lsls	r3, r5, #3
 8003196:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800319a:	00e2      	lsls	r2, r4, #3
 800319c:	4614      	mov	r4, r2
 800319e:	461d      	mov	r5, r3
 80031a0:	4643      	mov	r3, r8
 80031a2:	18e3      	adds	r3, r4, r3
 80031a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80031a8:	464b      	mov	r3, r9
 80031aa:	eb45 0303 	adc.w	r3, r5, r3
 80031ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80031b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80031be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80031c2:	f04f 0200 	mov.w	r2, #0
 80031c6:	f04f 0300 	mov.w	r3, #0
 80031ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80031ce:	4629      	mov	r1, r5
 80031d0:	008b      	lsls	r3, r1, #2
 80031d2:	4621      	mov	r1, r4
 80031d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031d8:	4621      	mov	r1, r4
 80031da:	008a      	lsls	r2, r1, #2
 80031dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80031e0:	f7fc fff8 	bl	80001d4 <__aeabi_uldivmod>
 80031e4:	4602      	mov	r2, r0
 80031e6:	460b      	mov	r3, r1
 80031e8:	4b60      	ldr	r3, [pc, #384]	; (800336c <UART_SetConfig+0x4e4>)
 80031ea:	fba3 2302 	umull	r2, r3, r3, r2
 80031ee:	095b      	lsrs	r3, r3, #5
 80031f0:	011c      	lsls	r4, r3, #4
 80031f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031f6:	2200      	movs	r2, #0
 80031f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80031fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003200:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003204:	4642      	mov	r2, r8
 8003206:	464b      	mov	r3, r9
 8003208:	1891      	adds	r1, r2, r2
 800320a:	61b9      	str	r1, [r7, #24]
 800320c:	415b      	adcs	r3, r3
 800320e:	61fb      	str	r3, [r7, #28]
 8003210:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003214:	4641      	mov	r1, r8
 8003216:	1851      	adds	r1, r2, r1
 8003218:	6139      	str	r1, [r7, #16]
 800321a:	4649      	mov	r1, r9
 800321c:	414b      	adcs	r3, r1
 800321e:	617b      	str	r3, [r7, #20]
 8003220:	f04f 0200 	mov.w	r2, #0
 8003224:	f04f 0300 	mov.w	r3, #0
 8003228:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800322c:	4659      	mov	r1, fp
 800322e:	00cb      	lsls	r3, r1, #3
 8003230:	4651      	mov	r1, sl
 8003232:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003236:	4651      	mov	r1, sl
 8003238:	00ca      	lsls	r2, r1, #3
 800323a:	4610      	mov	r0, r2
 800323c:	4619      	mov	r1, r3
 800323e:	4603      	mov	r3, r0
 8003240:	4642      	mov	r2, r8
 8003242:	189b      	adds	r3, r3, r2
 8003244:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003248:	464b      	mov	r3, r9
 800324a:	460a      	mov	r2, r1
 800324c:	eb42 0303 	adc.w	r3, r2, r3
 8003250:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	67bb      	str	r3, [r7, #120]	; 0x78
 800325e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003260:	f04f 0200 	mov.w	r2, #0
 8003264:	f04f 0300 	mov.w	r3, #0
 8003268:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800326c:	4649      	mov	r1, r9
 800326e:	008b      	lsls	r3, r1, #2
 8003270:	4641      	mov	r1, r8
 8003272:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003276:	4641      	mov	r1, r8
 8003278:	008a      	lsls	r2, r1, #2
 800327a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800327e:	f7fc ffa9 	bl	80001d4 <__aeabi_uldivmod>
 8003282:	4602      	mov	r2, r0
 8003284:	460b      	mov	r3, r1
 8003286:	4611      	mov	r1, r2
 8003288:	4b38      	ldr	r3, [pc, #224]	; (800336c <UART_SetConfig+0x4e4>)
 800328a:	fba3 2301 	umull	r2, r3, r3, r1
 800328e:	095b      	lsrs	r3, r3, #5
 8003290:	2264      	movs	r2, #100	; 0x64
 8003292:	fb02 f303 	mul.w	r3, r2, r3
 8003296:	1acb      	subs	r3, r1, r3
 8003298:	011b      	lsls	r3, r3, #4
 800329a:	3332      	adds	r3, #50	; 0x32
 800329c:	4a33      	ldr	r2, [pc, #204]	; (800336c <UART_SetConfig+0x4e4>)
 800329e:	fba2 2303 	umull	r2, r3, r2, r3
 80032a2:	095b      	lsrs	r3, r3, #5
 80032a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032a8:	441c      	add	r4, r3
 80032aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032ae:	2200      	movs	r2, #0
 80032b0:	673b      	str	r3, [r7, #112]	; 0x70
 80032b2:	677a      	str	r2, [r7, #116]	; 0x74
 80032b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80032b8:	4642      	mov	r2, r8
 80032ba:	464b      	mov	r3, r9
 80032bc:	1891      	adds	r1, r2, r2
 80032be:	60b9      	str	r1, [r7, #8]
 80032c0:	415b      	adcs	r3, r3
 80032c2:	60fb      	str	r3, [r7, #12]
 80032c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032c8:	4641      	mov	r1, r8
 80032ca:	1851      	adds	r1, r2, r1
 80032cc:	6039      	str	r1, [r7, #0]
 80032ce:	4649      	mov	r1, r9
 80032d0:	414b      	adcs	r3, r1
 80032d2:	607b      	str	r3, [r7, #4]
 80032d4:	f04f 0200 	mov.w	r2, #0
 80032d8:	f04f 0300 	mov.w	r3, #0
 80032dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80032e0:	4659      	mov	r1, fp
 80032e2:	00cb      	lsls	r3, r1, #3
 80032e4:	4651      	mov	r1, sl
 80032e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032ea:	4651      	mov	r1, sl
 80032ec:	00ca      	lsls	r2, r1, #3
 80032ee:	4610      	mov	r0, r2
 80032f0:	4619      	mov	r1, r3
 80032f2:	4603      	mov	r3, r0
 80032f4:	4642      	mov	r2, r8
 80032f6:	189b      	adds	r3, r3, r2
 80032f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80032fa:	464b      	mov	r3, r9
 80032fc:	460a      	mov	r2, r1
 80032fe:	eb42 0303 	adc.w	r3, r2, r3
 8003302:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	663b      	str	r3, [r7, #96]	; 0x60
 800330e:	667a      	str	r2, [r7, #100]	; 0x64
 8003310:	f04f 0200 	mov.w	r2, #0
 8003314:	f04f 0300 	mov.w	r3, #0
 8003318:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800331c:	4649      	mov	r1, r9
 800331e:	008b      	lsls	r3, r1, #2
 8003320:	4641      	mov	r1, r8
 8003322:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003326:	4641      	mov	r1, r8
 8003328:	008a      	lsls	r2, r1, #2
 800332a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800332e:	f7fc ff51 	bl	80001d4 <__aeabi_uldivmod>
 8003332:	4602      	mov	r2, r0
 8003334:	460b      	mov	r3, r1
 8003336:	4b0d      	ldr	r3, [pc, #52]	; (800336c <UART_SetConfig+0x4e4>)
 8003338:	fba3 1302 	umull	r1, r3, r3, r2
 800333c:	095b      	lsrs	r3, r3, #5
 800333e:	2164      	movs	r1, #100	; 0x64
 8003340:	fb01 f303 	mul.w	r3, r1, r3
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	011b      	lsls	r3, r3, #4
 8003348:	3332      	adds	r3, #50	; 0x32
 800334a:	4a08      	ldr	r2, [pc, #32]	; (800336c <UART_SetConfig+0x4e4>)
 800334c:	fba2 2303 	umull	r2, r3, r2, r3
 8003350:	095b      	lsrs	r3, r3, #5
 8003352:	f003 020f 	and.w	r2, r3, #15
 8003356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4422      	add	r2, r4
 800335e:	609a      	str	r2, [r3, #8]
}
 8003360:	bf00      	nop
 8003362:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003366:	46bd      	mov	sp, r7
 8003368:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800336c:	51eb851f 	.word	0x51eb851f

08003370 <memset>:
 8003370:	4402      	add	r2, r0
 8003372:	4603      	mov	r3, r0
 8003374:	4293      	cmp	r3, r2
 8003376:	d100      	bne.n	800337a <memset+0xa>
 8003378:	4770      	bx	lr
 800337a:	f803 1b01 	strb.w	r1, [r3], #1
 800337e:	e7f9      	b.n	8003374 <memset+0x4>

08003380 <__libc_init_array>:
 8003380:	b570      	push	{r4, r5, r6, lr}
 8003382:	4d0d      	ldr	r5, [pc, #52]	; (80033b8 <__libc_init_array+0x38>)
 8003384:	4c0d      	ldr	r4, [pc, #52]	; (80033bc <__libc_init_array+0x3c>)
 8003386:	1b64      	subs	r4, r4, r5
 8003388:	10a4      	asrs	r4, r4, #2
 800338a:	2600      	movs	r6, #0
 800338c:	42a6      	cmp	r6, r4
 800338e:	d109      	bne.n	80033a4 <__libc_init_array+0x24>
 8003390:	4d0b      	ldr	r5, [pc, #44]	; (80033c0 <__libc_init_array+0x40>)
 8003392:	4c0c      	ldr	r4, [pc, #48]	; (80033c4 <__libc_init_array+0x44>)
 8003394:	f000 f818 	bl	80033c8 <_init>
 8003398:	1b64      	subs	r4, r4, r5
 800339a:	10a4      	asrs	r4, r4, #2
 800339c:	2600      	movs	r6, #0
 800339e:	42a6      	cmp	r6, r4
 80033a0:	d105      	bne.n	80033ae <__libc_init_array+0x2e>
 80033a2:	bd70      	pop	{r4, r5, r6, pc}
 80033a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80033a8:	4798      	blx	r3
 80033aa:	3601      	adds	r6, #1
 80033ac:	e7ee      	b.n	800338c <__libc_init_array+0xc>
 80033ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80033b2:	4798      	blx	r3
 80033b4:	3601      	adds	r6, #1
 80033b6:	e7f2      	b.n	800339e <__libc_init_array+0x1e>
 80033b8:	08003404 	.word	0x08003404
 80033bc:	08003404 	.word	0x08003404
 80033c0:	08003404 	.word	0x08003404
 80033c4:	08003408 	.word	0x08003408

080033c8 <_init>:
 80033c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ca:	bf00      	nop
 80033cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ce:	bc08      	pop	{r3}
 80033d0:	469e      	mov	lr, r3
 80033d2:	4770      	bx	lr

080033d4 <_fini>:
 80033d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033d6:	bf00      	nop
 80033d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033da:	bc08      	pop	{r3}
 80033dc:	469e      	mov	lr, r3
 80033de:	4770      	bx	lr
